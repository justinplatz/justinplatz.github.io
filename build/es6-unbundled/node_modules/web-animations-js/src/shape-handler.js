(function(scope){var consumeLengthOrPercent=scope.consumeParenthesised.bind(null,scope.parseLengthOrPercent),consumeLengthOrPercentPair=scope.consumeRepeated.bind(void 0,consumeLengthOrPercent,/^/),mergeSizePair=scope.mergeNestedRepeated.bind(void 0,scope.mergeDimensions," "),mergeSizePairList=scope.mergeNestedRepeated.bind(void 0,mergeSizePair,",");function parseShape(input){var circle=scope.consumeToken(/^circle/,input);if(circle&&circle[0]){return["circle"].concat(scope.consumeList([scope.ignore(scope.consumeToken.bind(void 0,/^\(/)),consumeLengthOrPercent,scope.ignore(scope.consumeToken.bind(void 0,/^at/)),scope.consumePosition,scope.ignore(scope.consumeToken.bind(void 0,/^\)/))],circle[1]))}var ellipse=scope.consumeToken(/^ellipse/,input);if(ellipse&&ellipse[0]){return["ellipse"].concat(scope.consumeList([scope.ignore(scope.consumeToken.bind(void 0,/^\(/)),consumeLengthOrPercentPair,scope.ignore(scope.consumeToken.bind(void 0,/^at/)),scope.consumePosition,scope.ignore(scope.consumeToken.bind(void 0,/^\)/))],ellipse[1]))}var polygon=scope.consumeToken(/^polygon/,input);if(polygon&&polygon[0]){return["polygon"].concat(scope.consumeList([scope.ignore(scope.consumeToken.bind(void 0,/^\(/)),scope.optional(scope.consumeToken.bind(void 0,/^nonzero\s*,|^evenodd\s*,/),"nonzero,"),scope.consumeSizePairList,scope.ignore(scope.consumeToken.bind(void 0,/^\)/))],polygon[1]))}}function mergeShapes(left,right){if(left[0]!==right[0])return;if("circle"==left[0]){return scope.mergeList(left.slice(1),right.slice(1),["circle(",scope.mergeDimensions," at ",scope.mergeOffsetList,")"])}if("ellipse"==left[0]){return scope.mergeList(left.slice(1),right.slice(1),["ellipse(",scope.mergeNonNegativeSizePair," at ",scope.mergeOffsetList,")"])}if("polygon"==left[0]&&left[1]==right[1]){return scope.mergeList(left.slice(2),right.slice(2),["polygon(",left[1],mergeSizePairList,")"])}}scope.addPropertiesHandler(parseShape,mergeShapes,["shape-outside"])})(webAnimations1);