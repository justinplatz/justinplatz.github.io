if("undefined"===typeof sinon){this.sinon={}}(function(){"use strict";var push=[].push;function makeApi(sinon){sinon.Event=function Event(type,bubbles,cancelable,target){this.initEvent(type,bubbles,cancelable,target)};sinon.Event.prototype={initEvent:function(type,bubbles,cancelable,target){this.type=type;this.bubbles=bubbles;this.cancelable=cancelable;this.target=target},stopPropagation:function(){},preventDefault:function(){this.defaultPrevented=!0}};sinon.ProgressEvent=function ProgressEvent(type,progressEventRaw,target){this.initEvent(type,!1,!1,target);this.loaded="number"===typeof progressEventRaw.loaded?progressEventRaw.loaded:null;this.total="number"===typeof progressEventRaw.total?progressEventRaw.total:null;this.lengthComputable=!!progressEventRaw.total};sinon.ProgressEvent.prototype=new sinon.Event;sinon.ProgressEvent.prototype.constructor=sinon.ProgressEvent;sinon.CustomEvent=function CustomEvent(type,customData,target){this.initEvent(type,!1,!1,target);this.detail=customData.detail||null};sinon.CustomEvent.prototype=new sinon.Event;sinon.CustomEvent.prototype.constructor=sinon.CustomEvent;sinon.EventTarget={addEventListener:function addEventListener(event,listener){this.eventListeners=this.eventListeners||{};this.eventListeners[event]=this.eventListeners[event]||[];push.call(this.eventListeners[event],listener)},removeEventListener:function removeEventListener(event,listener){for(var listeners=this.eventListeners&&this.eventListeners[event]||[],i=0,l=listeners.length;i<l;++i){if(listeners[i]===listener){return listeners.splice(i,1)}}},dispatchEvent:function dispatchEvent(event){for(var type=event.type,listeners=this.eventListeners&&this.eventListeners[type]||[],i=0;i<listeners.length;i++){if("function"===typeof listeners[i]){listeners[i].call(this,event)}else{listeners[i].handleEvent(event)}}return!!event.defaultPrevented}}}var isNode="undefined"!==typeof module&&module.exports&&"function"===typeof require,isAMD="function"===typeof define&&"object"===typeof define.amd&&define.amd;function loadDependencies(require){var sinon=require("./core");makeApi(sinon)}if(isAMD){define(loadDependencies)}else if(isNode){loadDependencies(require)}else{makeApi(sinon)}})();