(function(){"use strict";var push=[].push;function responseArray(handler){var response=handler;if("[object Array]"!==Object.prototype.toString.call(handler)){response=[200,{},handler]}if("string"!==typeof response[2]){throw new TypeError("Fake server response body should be string, but was "+typeof response[2])}return response}var wloc="undefined"!==typeof window?window.location:{},rCurrLoc=new RegExp("^"+wloc.protocol+"//"+wloc.host);function matchOne(response,reqMethod,reqUrl){var rmeth=response.method,matchMethod=!rmeth||rmeth.toLowerCase()===reqMethod.toLowerCase(),url=response.url,matchUrl=!url||url===reqUrl||"function"===typeof url.test&&url.test(reqUrl);return matchMethod&&matchUrl}function match(response,request){var requestUrl=request.url;if(!/^https?:\/\//.test(requestUrl)||rCurrLoc.test(requestUrl)){requestUrl=requestUrl.replace(rCurrLoc,"")}if(matchOne(response,this.getHTTPMethod(request),requestUrl)){if("function"===typeof response.response){var ru=response.url,args=[request].concat(ru&&"function"===typeof ru.exec?ru.exec(requestUrl).slice(1):[]);return response.response.apply(response,args)}return!0}return!1}function makeApi(sinon){sinon.fakeServer={create:function(config){var server=sinon.create(this);server.configure(config);if(!sinon.xhr.supportsCORS){this.xhr=sinon.useFakeXDomainRequest()}else{this.xhr=sinon.useFakeXMLHttpRequest()}server.requests=[];this.xhr.onCreate=function(xhrObj){server.addRequest(xhrObj)};return server},configure:function(config){var whitelist={autoRespond:!0,autoRespondAfter:!0,respondImmediately:!0,fakeHTTPMethods:!0},setting;config=config||{};for(setting in config){if(whitelist.hasOwnProperty(setting)&&config.hasOwnProperty(setting)){this[setting]=config[setting]}}},addRequest:function addRequest(xhrObj){var server=this;push.call(this.requests,xhrObj);xhrObj.onSend=function(){server.handleRequest(this);if(server.respondImmediately){server.respond()}else if(server.autoRespond&&!server.responding){setTimeout(function(){server.responding=!1;server.respond()},server.autoRespondAfter||10);server.responding=!0}}},getHTTPMethod:function getHTTPMethod(request){if(this.fakeHTTPMethods&&/post/i.test(request.method)){var matches=(request.requestBody||"").match(/_method=([^\b;]+)/);return matches?matches[1]:request.method}return request.method},handleRequest:function handleRequest(xhr){if(xhr.async){if(!this.queue){this.queue=[]}push.call(this.queue,xhr)}else{this.processRequest(xhr)}},log:function log(response,request){var str;str="Request:\n"+sinon.format(request)+"\n\n";str+="Response:\n"+sinon.format(response)+"\n\n";sinon.log(str)},respondWith:function respondWith(method,url,body){if(1===arguments.length&&"function"!==typeof method){this.response=responseArray(method);return}if(!this.responses){this.responses=[]}if(1===arguments.length){body=method;url=method=null}if(2===arguments.length){body=url;url=method;method=null}push.call(this.responses,{method:method,url:url,response:"function"===typeof body?body:responseArray(body)})},respond:function respond(){if(0<arguments.length){this.respondWith.apply(this,arguments)}for(var queue=this.queue||[],requests=queue.splice(0,queue.length),i=0;i<requests.length;i++){this.processRequest(requests[i])}},processRequest:function processRequest(request){try{if(request.aborted){return}var response=this.response||[404,{},""];if(this.responses){for(var l=this.responses.length,i=l-1;0<=i;i--){if(match.call(this,this.responses[i],request)){response=this.responses[i].response;break}}}if(4!==request.readyState){this.log(response,request);request.respond(response[0],response[1],response[2])}}catch(e){sinon.logError("Fake server request processing",e)}},restore:function restore(){return this.xhr.restore&&this.xhr.restore.apply(this.xhr,arguments)}}}var isNode="undefined"!==typeof module&&module.exports&&"function"===typeof require,isAMD="function"===typeof define&&"object"===typeof define.amd&&define.amd;function loadDependencies(require,exports,module){var sinon=require("./core");require("./fake_xdomain_request");require("./fake_xml_http_request");require("../format");makeApi(sinon);module.exports=sinon}if(isAMD){define(loadDependencies)}else if(isNode){loadDependencies(require,module.exports,module)}else{makeApi(sinon)}})();