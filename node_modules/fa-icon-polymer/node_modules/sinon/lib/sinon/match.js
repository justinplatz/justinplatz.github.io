(function(sinonGlobal){"use strict";function makeApi(sinon){function assertType(value,type,name){var actual=sinon.typeOf(value);if(actual!==type){throw new TypeError("Expected type of "+name+" to be "+type+", but was "+actual)}}var matcher={toString:function(){return this.message}};function isMatcher(object){return matcher.isPrototypeOf(object)}function matchObject(expectation,actual){if(null===actual||actual===void 0){return!1}for(var key in expectation){if(expectation.hasOwnProperty(key)){var exp=expectation[key],act=actual[key];if(isMatcher(exp)){if(!exp.test(act)){return!1}}else if("object"===sinon.typeOf(exp)){if(!matchObject(exp,act)){return!1}}else if(!sinon.deepEqual(exp,act)){return!1}}}return!0}function match(expectation,message){var m=sinon.create(matcher),type=sinon.typeOf(expectation);switch(type){case"object":if("function"===typeof expectation.test){m.test=function(actual){return!0===expectation.test(actual)};m.message="match("+sinon.functionName(expectation.test)+")";return m}var str=[];for(var key in expectation){if(expectation.hasOwnProperty(key)){str.push(key+": "+expectation[key])}}m.test=function(actual){return matchObject(expectation,actual)};m.message="match("+str.join(", ")+")";break;case"number":m.test=function(actual){return expectation==actual};break;case"string":m.test=function(actual){if("string"!==typeof actual){return!1}return-1!==actual.indexOf(expectation)};m.message="match(\""+expectation+"\")";break;case"regexp":m.test=function(actual){if("string"!==typeof actual){return!1}return expectation.test(actual)};break;case"function":m.test=expectation;if(message){m.message=message}else{m.message="match("+sinon.functionName(expectation)+")"}break;default:m.test=function(actual){return sinon.deepEqual(expectation,actual)};}if(!m.message){m.message="match("+expectation+")"}return m}matcher.or=function(m2){if(!arguments.length){throw new TypeError("Matcher expected")}else if(!isMatcher(m2)){m2=match(m2)}var m1=this,or=sinon.create(matcher);or.test=function(actual){return m1.test(actual)||m2.test(actual)};or.message=m1.message+".or("+m2.message+")";return or};matcher.and=function(m2){if(!arguments.length){throw new TypeError("Matcher expected")}else if(!isMatcher(m2)){m2=match(m2)}var m1=this,and=sinon.create(matcher);and.test=function(actual){return m1.test(actual)&&m2.test(actual)};and.message=m1.message+".and("+m2.message+")";return and};match.isMatcher=isMatcher;match.any=match(function(){return!0},"any");match.defined=match(function(actual){return null!==actual&&actual!==void 0},"defined");match.truthy=match(function(actual){return!!actual},"truthy");match.falsy=match(function(actual){return!actual},"falsy");match.same=function(expectation){return match(function(actual){return expectation===actual},"same("+expectation+")")};match.typeOf=function(type){assertType(type,"string","type");return match(function(actual){return sinon.typeOf(actual)===type},"typeOf(\""+type+"\")")};match.instanceOf=function(type){assertType(type,"function","type");return match(function(actual){return actual instanceof type},"instanceOf("+sinon.functionName(type)+")")};function createPropertyMatcher(propertyTest,messagePrefix){return function(property,value){assertType(property,"string","property");var onlyProperty=1===arguments.length,message=messagePrefix+"(\""+property+"\"";if(!onlyProperty){message+=", "+value}message+=")";return match(function(actual){if(actual===void 0||null===actual||!propertyTest(actual,property)){return!1}return onlyProperty||sinon.deepEqual(value,actual[property])},message)}}match.has=createPropertyMatcher(function(actual,property){if("object"===typeof actual){return property in actual}return actual[property]!==void 0},"has");match.hasOwn=createPropertyMatcher(function(actual,property){return actual.hasOwnProperty(property)},"hasOwn");match.bool=match.typeOf("boolean");match.number=match.typeOf("number");match.string=match.typeOf("string");match.object=match.typeOf("object");match.func=match.typeOf("function");match.array=match.typeOf("array");match.regexp=match.typeOf("regexp");match.date=match.typeOf("date");sinon.match=match;return match}var isNode="undefined"!==typeof module&&module.exports&&"function"===typeof require,isAMD="function"===typeof define&&"object"===typeof define.amd&&define.amd;function loadDependencies(require,exports,module){var sinon=require("./util/core");require("./typeOf");module.exports=makeApi(sinon)}if(isAMD){define(loadDependencies);return}if(isNode){loadDependencies(require,module.exports,module);return}if(sinonGlobal){makeApi(sinonGlobal)}})("object"===typeof sinon&&sinon);