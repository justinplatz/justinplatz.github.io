const path=require("path"),CDP=require("chrome-remote-interface"),argv=require("minimist")(process.argv.slice(2)),NUMBER_OF_RUNS=argv.runs||100;babelHelpers.asyncToGenerator(function*(){let port=argv.port,chrome;if(!argv.port){const chromeLauncher=require("chrome-launcher");chrome=yield chromeLauncher.launch({chromeFlags:["--headless","--disable-gpu","--remote-debugging-address=0.0.0.0"],port:0});port=chrome.port}const tab=yield CDP.New({port}),client=yield CDP({tab,port}),{Page,Network,Runtime}=client,ONE_MB=1024*1024/8,throttling={FAST_3G:{downloadThroughput:.9*(1.6*ONE_MB),uploadThroughput:.9*(.75*ONE_MB)},SLOW_3G:{downloadThroughput:.8*(.5*ONE_MB),uploadThroughput:.8*(.5*ONE_MB)}};yield Promise.all([Page.enable(),Network.enable(),port&&argv.throttling&&Network.emulateNetworkConditions(Object.assign({},throttling[argv.throttling],{offline:!1,latency:10})),Network.clearBrowserCache(),Network.setCacheDisabled({cacheDisabled:!0}),Network.setBypassServiceWorker({bypass:!0})]);let loadEventPromise;Page.loadEventFired(()=>{loadEventPromise()});const options=require(path.join(process.cwd(),argv.targets)),perfTimings={};for(const[type]of options){perfTimings[type]=[]}process.on("exit",babelHelpers.asyncToGenerator(function*(){for(const[type,timings]of Object.entries(perfTimings)){const average=timings.reduce((a,b)=>a+b)/timings.length;console.log(`Average gain for ${type} in ${timings.length} runs is ${average}`)}yield CDP.Close({port,id:tab.id});yield client.close();if(!argv.port){yield chrome.kill()}}));for(let i=0;i<NUMBER_OF_RUNS;i++){for(const[type,url]of options){requestType=type;Page.navigate({url});yield new Promise(resolve=>{loadEventPromise=resolve});const{result:{value:perfTiming}}=yield Runtime.evaluate({expression:"window.perfTiming"});perfTimings[type].push(perfTiming)}process.stdout.write(`${i+1}/${NUMBER_OF_RUNS}\r`)}process.exit(0)})();