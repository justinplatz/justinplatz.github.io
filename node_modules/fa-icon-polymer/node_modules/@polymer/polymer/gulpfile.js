'use strict';const gulp=require("gulp"),gulpif=require("gulp-if"),runseq=require("run-sequence"),del=require("del"),eslint=require("gulp-eslint"),fs=require("fs-extra"),path=require("path"),mergeStream=require("merge-stream"),babel=require("gulp-babel"),size=require("gulp-size"),lazypipe=require("lazypipe"),closure=require("google-closure-compiler").gulp(),minimalDocument=require("./util/minimalDocument.js"),dom5=require("dom5/lib/index-next"),parse5=require("parse5"),replace=require("gulp-replace"),DIST_DIR="dist",BUNDLED_DIR=path.join(DIST_DIR,"bundled"),COMPILED_DIR=path.join(DIST_DIR,"compiled"),POLYMER_LEGACY="polymer.html",POLYMER_ELEMENT="polymer-element.html",{PolymerProject,HtmlSplitter}=require("polymer-build"),{Transform}=require("stream");class BackfillStream extends Transform{constructor(fileList){super({objectMode:!0});this.fileList=fileList}_transform(file,enc,cb){if(this.fileList){const origFile=this.fileList.shift();file.path=origFile.path}cb(null,file)}_flush(cb){if(this.fileList&&0<this.fileList.length){this.fileList.forEach(oldFile=>{let newFile=oldFile.clone({deep:!0,contents:!1});newFile.contents=new Buffer("");this.push(newFile)})}cb()}}let CLOSURE_LINT_ONLY=!1,firstImportFinder=dom5.predicates.AND(dom5.predicates.hasTagName("link"),dom5.predicates.hasAttrValue("rel","import"));const header=`/**
 * @fileoverview Generated typings for Polymer mixins
 * @externs
 *
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
/* eslint-disable */
`;class AddClosureTypeImport extends Transform{constructor(entryFileName,typeFileName){super({objectMode:!0});this.target=path.resolve(entryFileName);this.importPath=path.resolve(typeFileName)}_transform(file,enc,cb){if(file.path===this.target){let contents=file.contents.toString(),html=parse5.parse(contents,{locationInfo:!0}),firstImport=dom5.query(html,firstImportFinder);if(firstImport){let importPath=path.relative(path.dirname(this.target),this.importPath),importLink=dom5.constructors.element("link");dom5.setAttribute(importLink,"rel","import");dom5.setAttribute(importLink,"href",importPath);dom5.insertBefore(firstImport.parentNode,firstImport,importLink);dom5.removeFakeRootElements(html);file.contents=Buffer(parse5.serialize(html))}}cb(null,file)}}gulp.task("clean",()=>del([DIST_DIR,"closure.log"]));gulp.task("generate-externs",gulp.series("clean",babelHelpers.asyncToGenerator(function*(){let genClosure=require("@polymer/gen-closure-declarations").generateDeclarations;const declarations=yield genClosure();yield fs.writeFile("externs/closure-types.js",`${header}${declarations}`)})));gulp.task("generate-typescript",babelHelpers.asyncToGenerator(function*(){let genTs=require("@polymer/gen-typescript-declarations").generateDeclarations;yield del(["types/**/*.d.ts","!types/extra-types.d.ts"]);const config=yield fs.readJson("gen-tsd.json"),files=yield genTs(".",config);for(const[filePath,contents]of files){yield fs.outputFile(path.join("types",filePath),contents)}}));gulp.task("closure",gulp.series("generate-externs",()=>{let entry,splitRx,joinRx,addClosureTypes;function config(path){entry=path;joinRx=new RegExp(path.split("/").join("\\/"));splitRx=new RegExp(joinRx.source+"_script_\\d+\\.js$");addClosureTypes=new AddClosureTypeImport(entry,"externs/polymer-internal-types.html")}config("polymer-legacy.js");const project=new PolymerProject({shell:`./${entry}`,fragments:["node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js","node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js"],extraDependencies:[addClosureTypes.importPath,"externs/polymer-internal-shared-types.js"]});function closureLintLogger(log){let chalk=require("chalk");fs.writeFileSync("closure.log",chalk.stripColor(log));console.error(log);process.exit(-1)}let closurePluginOptions;if(CLOSURE_LINT_ONLY){closurePluginOptions={logger:closureLintLogger}}const closureStream=closure({compilation_level:"ADVANCED",language_in:"ES6_STRICT",language_out:"ES5_STRICT",warning_level:"VERBOSE",isolation_mode:"IIFE",assume_function_wrapper:!0,rewrite_polyfills:!1,new_type_inf:!0,checks_only:CLOSURE_LINT_ONLY,polymer_version:2,externs:["bower_components/shadycss/externs/shadycss-externs.js","externs/webcomponents-externs.js","externs/closure-types.js","externs/polymer-externs.js"],extra_annotation_name:["appliesMixin","mixinClass","mixinFunction","polymer","customElement"]},closurePluginOptions),closurePipeline=lazypipe().pipe(()=>closureStream).pipe(()=>new BackfillStream(closureStream.fileList_)),sources=project.sources(),dependencies=project.dependencies(),mergedFiles=mergeStream(sources,dependencies),splitter=new HtmlSplitter;return mergedFiles.pipe(addClosureTypes).pipe(project.bundler()).pipe(splitter.split()).pipe(gulpif(splitRx,closurePipeline())).pipe(splitter.rejoin()).pipe(gulpif(joinRx,minimalDocument())).pipe(gulpif(joinRx,size({title:"closure size",gzip:!0,showTotal:!1,showFiles:!0}))).pipe(gulp.dest(COMPILED_DIR))}));gulp.task("lint-closure",done=>{CLOSURE_LINT_ONLY=!0;runseq("closure",done)});gulp.task("estimate-size",gulp.series("clean",()=>{const babelPresets={presets:[["minify",{regexpConstructors:!1,simplifyComparisons:!1}]]},project=new PolymerProject({shell:POLYMER_LEGACY,fragments:["node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js","node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js"]}),sources=project.sources(),dependencies=project.dependencies(),mergedFiles=mergeStream(sources,dependencies),bundledSplitter=new HtmlSplitter,bundlePipe=lazypipe().pipe(()=>bundledSplitter.split()).pipe(()=>gulpif(/\.js$/,babel(babelPresets))).pipe(()=>bundledSplitter.rejoin()).pipe(minimalDocument);return mergedFiles.pipe(project.bundler()).pipe(gulpif(/polymer\.html$/,bundlePipe())).pipe(gulpif(/polymer\.html$/,size({title:"bundled size",gzip:!0,showTotal:!1,showFiles:!0}))).pipe(gulp.dest(BUNDLED_DIR))}));gulp.task("lint-eslint",function(){return gulp.src(["lib/**/*.js","test/unit/*.{html,js}","util/*.js"]).pipe(eslint()).pipe(eslint.format()).pipe(eslint.failAfterError())});gulp.task("lint",done=>{runseq("lint-eslint","lint-closure",done)});gulp.task("update-types",done=>{runseq("generate-externs","generate-typescript",done)});gulp.task("update-version",()=>{return gulp.src("lib/utils/boot.js").pipe(replace(/(window.Polymer.version = )'\d+\.\d+\.\d+'/,`$1'${require("./package.json").version}'`)).pipe(gulp.dest("lib/utils"))});