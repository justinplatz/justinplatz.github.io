'use strict';exports.__esModule=!0;exports.wordDiff=void 0;exports.diffWords=diffWords;exports.diffWordsWithSpace=diffWordsWithSpace;var _base=require("./base"),_base2=_interopRequireDefault(_base),_params=require("../util/params");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var extendedWordChars=/^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,reWhitespace=/\S/,wordDiff=exports.wordDiff=new _base2["default"];wordDiff.equals=function(left,right){return left===right||this.options.ignoreWhitespace&&!reWhitespace.test(left)&&!reWhitespace.test(right)};wordDiff.tokenize=function(value){for(var tokens=value.split(/(\s+|\b)/),i=0;i<tokens.length-1;i++){if(!tokens[i+1]&&tokens[i+2]&&extendedWordChars.test(tokens[i])&&extendedWordChars.test(tokens[i+2])){tokens[i]+=tokens[i+2];tokens.splice(i+1,2);i--}}return tokens};function diffWords(oldStr,newStr,callback){var options=(0,_params.generateOptions)(callback,{ignoreWhitespace:!0});return wordDiff.diff(oldStr,newStr,options)}function diffWordsWithSpace(oldStr,newStr,callback){return wordDiff.diff(oldStr,newStr,callback)}