(function(){module("AriaOnReservedElement");var RULE_NAME="ariaOnReservedElement";test("Non-reserved element with role and aria- attributes",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("div"));widget.setAttribute("role","spinbutton");widget.setAttribute("aria-hidden","false");widget.setAttribute("aria-required","true");widget.setAttribute("aria-valuemax","79");widget.setAttribute("aria-valuemin","10");widget.setAttribute("aria-valuenow","50");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA};assert.runRule(config,"Non-reserved elements are not applicable to this test")});test("Non-reserved element with role only",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("div"));widget.setAttribute("role","spinbutton");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA};assert.runRule(config,"Non-reserved elements are not applicable to this test")});test("Non-reserved element with aria-attributes only",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("div"));widget.setAttribute("aria-hidden","false");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA};assert.runRule(config,"Non-reserved elements are not applicable to this test")});test("Reserved element with role and aria- attributes",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("meta"));widget.setAttribute("role","spinbutton");widget.setAttribute("aria-hidden","false");widget.setAttribute("aria-required","true");widget.setAttribute("aria-valuemax","79");widget.setAttribute("aria-valuemin","10");widget.setAttribute("aria-valuenow","50");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[widget]};assert.runRule(config,"Reserved elements can't take any ARIA attributes.")});test("Reserved element with role only",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("meta"));widget.setAttribute("role","spinbutton");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[widget]};assert.runRule(config,"Reserved elements can't take any ARIA attributes.")});test("Reserved element with aria-attributes only",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("meta"));widget.setAttribute("aria-hidden","false");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[widget]};assert.runRule(config,"Reserved elements can't take any ARIA attributes.")});test("Using ignoreSelectors, reserved element with aria-attributes only",function(assert){var fixture=document.getElementById("qunit-fixture"),widget=fixture.appendChild(document.createElement("meta"));widget.setAttribute("aria-hidden","false");var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA,ignoreSelectors:["#"+(widget.id="ignoreMe")]};assert.runRule(config,"ignoreSelectors should skip this failing element")});test("Reserved element with no ARIA attributes",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(document.createElement("meta"));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config,"A reserved element with no ARIA attributes should pass")})})();