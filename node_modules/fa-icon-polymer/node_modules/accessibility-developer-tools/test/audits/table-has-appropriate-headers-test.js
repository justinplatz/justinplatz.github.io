module("TableHasAppropriateHeaders");(function(){var RULE_NAME="tableHasAppropriateHeaders";function buildRow(cells){var row=document.createElement("tr");cells.forEach(function(cell){row.appendChild(document.createElement(cell))});return row}function buildTable(rows){var table=document.createElement("table");rows.forEach(function(row){table.appendChild(buildRow(row))});return table}function buildTableWithThead(headCells,bodyRows){var table=document.createElement("table"),thead=document.createElement("thead");thead.appendChild(buildRow(headCells));table.appendChild(thead);var tbody=document.createElement("tbody");bodyRows.forEach(function(row){tbody.appendChild(buildRow(row))});table.appendChild(tbody);return table}test("Table with no child elements",function(assert){var fixture=document.getElementById("qunit-fixture"),table=document.createElement("table");fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA,elements:[table]};assert.runRule(config)});test("Table with only THEAD",function(assert){var fixture=document.getElementById("qunit-fixture"),table=document.createElement("table"),thead=document.createElement("thead");table.appendChild(thead);fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA,elements:[table]};assert.runRule(config)});test("Table with only TFOOT",function(assert){var fixture=document.getElementById("qunit-fixture"),table=document.createElement("table"),tfoot=document.createElement("tfoot");table.appendChild(tfoot);fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA,elements:[table]};assert.runRule(config)});test("Table with only TBODY",function(assert){var fixture=document.getElementById("qunit-fixture"),table=document.createElement("table"),tbody=document.createElement("tbody");table.appendChild(tbody);fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.NA,elements:[table]};assert.runRule(config)});test("Table with a header row",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTable([["th","th","th"],["td","td","td"],["td","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with an incomplete header row",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTable([["th","th","td"],["td","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table with a header column",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTable([["th","td","td"],["th","td","td"],["th","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with an incomplete header column",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTable([["th","td","td"],["th","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table uses a grid layout",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTable([["td","th","th"],["th","td","td"],["th","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with no headers at all",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTable([["td","td","td"],["td","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table with thead and tbody that has a header row",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTableWithThead(["th","th","th"],[["td","td","td"],["td","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with thead and tbody with an incomplete header row",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTableWithThead(["th","th","td"],[["td","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table with thead and tbody that has a header column",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTableWithThead(["th","td","td"],[["th","td","td"],["th","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with thead and tbody with an incomplete header column",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTableWithThead(["th","td","td"],[["th","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table with thead and tbody using a grid layout",function(assert){var fixture=document.getElementById("qunit-fixture");fixture.appendChild(buildTableWithThead(["td","th","th"],[["th","td","td"],["th","td","td"]]));var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table with thead and tbody with no headers at all",function(assert){var fixture=document.getElementById("qunit-fixture"),table=fixture.appendChild(buildTableWithThead(["td","td","td"],[["td","td","td"],["td","td","td"]])),config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)});test("Table used for layout with no headers at all",function(assert){var fixture=document.getElementById("qunit-fixture"),table=buildTable([["td","td","td"],["td","td","td"],["td","td","td"]]);table.setAttribute("role","presentation");fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Table used for layout with headers",function(assert){var fixture=document.getElementById("qunit-fixture"),table=buildTable([["th","th","th"],["td","td","td"],["td","td","td"]]);table.setAttribute("role","presentation");fixture.appendChild(table);var config={ruleName:RULE_NAME,expected:axs.constants.AuditResult.FAIL,elements:[table]};assert.runRule(config)})})();