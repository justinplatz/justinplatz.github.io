module("UncontrolledTabpanel");test("No roles === NA.",function(assert){for(var fixture=document.getElementById("qunit-fixture"),i=0;10>i;i++)fixture.appendChild(document.createElement("div"));var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.NA};assert.runRule(config)});test("No elements with role tabpanel === NA.",function(assert){var fixture=document.getElementById("qunit-fixture"),div=document.createElement("div");div.setAttribute("role","tablist");fixture.appendChild(div);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.NA};assert.runRule(config)});test("Tabpanel with aria-labelledby === PASS.",function(assert){var fixture=document.getElementById("qunit-fixture"),tabList=document.createElement("div");tabList.setAttribute("role","tablist");fixture.appendChild(tabList);var tab=document.createElement("div");tab.setAttribute("role","tab");tab.setAttribute("id","tabId");tabList.appendChild(tab);var tabPanel=document.createElement("div");tabPanel.setAttribute("role","tabpanel");tabPanel.setAttribute("aria-labelledby","tabId");fixture.appendChild(tabPanel);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Tabpanel which is controlled via aria-controls on the tab === PASS.",function(assert){var fixture=document.getElementById("qunit-fixture"),tabList=document.createElement("div");tabList.setAttribute("role","tablist");fixture.appendChild(tabList);var tab=document.createElement("div");tab.setAttribute("role","tab");tab.setAttribute("aria-controls","tabpanelId");tabList.appendChild(tab);var tabPanel=document.createElement("div");tabPanel.setAttribute("role","tabpanel");tabPanel.setAttribute("id","tabpanelId");fixture.appendChild(tabPanel);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Tabpanel which is controlled via aria-controls on its tab when there is more than one tab === PASS.",function(assert){var fixture=document.getElementById("qunit-fixture"),tabList=document.createElement("div");tabList.setAttribute("role","tablist");fixture.appendChild(tabList);var tab1=document.createElement("div");tab1.setAttribute("role","tab");tab1.setAttribute("aria-controls","tabpanelId");tabList.appendChild(tab1);var tab2=document.createElement("div");tab2.setAttribute("role","tab");tabList.appendChild(tab2);var tabPanel=document.createElement("div");tabPanel.setAttribute("role","tabpanel");tabPanel.setAttribute("id","tabpanelId");fixture.appendChild(tabPanel);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.PASS,elements:[]};assert.runRule(config)});test("Tabpanel which is not controlled or labeled by a tab === FAIL.",function(assert){var fixture=document.getElementById("qunit-fixture"),tabList=document.createElement("div");tabList.setAttribute("role","tablist");fixture.appendChild(tabList);var tab=document.createElement("div");tab.setAttribute("role","tab");tabList.appendChild(tab);var tabPanel=document.createElement("div");tabPanel.setAttribute("role","tabpanel");fixture.appendChild(tabPanel);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.FAIL,elements:[tabPanel]};assert.runRule(config)});test("Tabpanel which is labeled by something other than a tab and not controlled by a tab == FAIL.",function(assert){var fixture=document.getElementById("qunit-fixture"),tabPanel=document.createElement("div");tabPanel.setAttribute("role","tabpanel");tabPanel.setAttribute("aria-labelledby","not-a-tab");fixture.appendChild(tabPanel);var notATab=document.createElement("h5");notATab.setAttribute("id","not-a-tab");fixture.appendChild(notATab);var config={ruleName:"uncontrolledTabpanel",expected:axs.constants.AuditResult.FAIL,elements:[tabPanel]};assert.runRule(config)});