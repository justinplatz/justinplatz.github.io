goog.provide("goog.net.streams.XhrNodeReadableStreamTest");goog.setTestOnly("goog.net.streams.XhrNodeReadableStreamTest");goog.require("goog.net.streams.NodeReadableStream");goog.require("goog.net.streams.XhrNodeReadableStream");goog.require("goog.net.streams.XhrStreamReader");goog.require("goog.testing.PropertyReplacer");goog.require("goog.testing.asserts");goog.require("goog.testing.jsunit");var xhrReader,xhrStream,EventType=goog.net.streams.NodeReadableStream.EventType,Status=goog.net.streams.XhrStreamReader.Status,propertyReplacer;function MockXhrStreamReader(){this.setStatusHandler=function(handler){this.statusHandler_=handler};this.setDataHandler=function(handler){this.dataHandler_=handler};this.getStatus=function(){return this.status_};this.onData=function(messages){this.dataHandler_(messages)};this.onStatus=function(status){this.status_=status;this.statusHandler_()}}function setUp(){xhrReader=new MockXhrStreamReader;xhrStream=new goog.net.streams.XhrNodeReadableStream(xhrReader);propertyReplacer=new goog.testing.PropertyReplacer;propertyReplacer.replace(xhrStream,"handleError_",function(message){fail(message)})}function tearDown(){propertyReplacer.reset()}function testOneDataCallback(){var delivered=!1,callback=function(message){delivered=!0;assertEquals("a",message.a)};xhrStream.on(EventType.DATA,callback);xhrReader.onData([{a:"a"}]);assertTrue(delivered)}function testMultipleDataCallbacks(){var delivered=0,callback=function(message){delivered++;assertEquals("a",message.a)};xhrStream.on(EventType.DATA,callback);xhrStream.on(EventType.DATA,callback);xhrReader.onData([{a:"a"}]);assertEquals(2,delivered)}function testOrderedDataCallbacks(){var delivered=0,callback1=function(message){assertEquals(0,delivered++);assertEquals("a",message.a)},callback2=function(message){assertEquals(1,delivered++);assertEquals("a",message.a)};xhrStream.on(EventType.DATA,callback1);xhrStream.on(EventType.DATA,callback2);xhrReader.onData([{a:"a"}]);assertEquals(2,delivered)}function testMultipleMessagesCallbacks(){var delivered=0,callback1=function(message){if(message.a){assertEquals(0,delivered++);assertEquals("a",message.a)}else if(message.b){assertEquals(2,delivered++);assertEquals("b",message.b)}else{fail("unexpected message")}},callback2=function(message){if(message.a){assertEquals(1,delivered++);assertEquals("a",message.a)}else if(message.b){assertEquals(3,delivered++);assertEquals("b",message.b)}else{fail("unexpected message")}};xhrStream.on(EventType.DATA,callback1);xhrStream.on(EventType.DATA,callback2);xhrReader.onData([{a:"a"},{b:"b"}]);assertEquals(4,delivered)}function testMultipleMessagesWithOnceCallbacks(){var delivered=0,callback1=function(message){if(message.a){assertEquals(0,delivered++);assertEquals("a",message.a)}else if(message.b){assertEquals(1,delivered++);assertEquals("b",message.b)}else if(message.c){assertEquals(4,delivered++);assertEquals("c",message.c)}else{fail("unexpected message")}},callback2=function(message){if(message.a){assertEquals(2,delivered++);assertEquals("a",message.a)}else if(message.b){assertEquals(3,delivered++);assertEquals("b",message.b)}else{fail("unexpected message")}};xhrStream.on(EventType.DATA,callback1);xhrStream.once(EventType.DATA,callback2);xhrReader.onData([{a:"a"},{b:"b"}]);assertEquals(4,delivered);xhrReader.onData([{c:"c"}]);assertEquals(5,delivered)}function testMultipleMessagesWithRemovedCallbacks(){var delivered=0,callback1=function(message){if(message.a){assertEquals(0,delivered++);assertEquals("a",message.a)}else if(message.c){assertEquals(3,delivered++);assertEquals("c",message.c)}else{fail("unexpected message")}},callback2=function(message){if(message.a){assertEquals(1,delivered++);assertEquals("a",message.a)}else if(message.b){assertEquals(2,delivered++);assertEquals("b",message.b)}else{fail("unexpected message")}};xhrStream.on(EventType.DATA,callback1);xhrStream.once(EventType.DATA,callback2);xhrReader.onData([{a:"a"}]);assertEquals(2,delivered);xhrStream.removeListener(EventType.DATA,callback1);xhrStream.once(EventType.DATA,callback2);xhrReader.onData([{b:"b"}]);assertEquals(3,delivered);xhrStream.on(EventType.DATA,callback1);xhrStream.once(EventType.DATA,callback2);xhrStream.removeListener(EventType.DATA,callback2);xhrReader.onData([{c:"c"}]);assertEquals(4,delivered);xhrStream.removeListener(EventType.DATA,callback1);xhrReader.onData([{d:"d"}]);assertEquals(4,delivered)}function testOrderedStatusCallbacks(){checkStatusMapping(Status.ACTIVE,EventType.READABLE);checkStatusMapping(Status.BAD_DATA,EventType.ERROR);checkStatusMapping(Status.HANDLER_EXCEPTION,EventType.ERROR);checkStatusMapping(Status.NO_DATA,EventType.ERROR);checkStatusMapping(Status.TIMEOUT,EventType.ERROR);checkStatusMapping(Status.XHR_ERROR,EventType.ERROR);checkStatusMapping(Status.CANCELLED,EventType.CLOSE);checkStatusMapping(Status.SUCCESS,EventType.END);function checkStatusMapping(status,event){var delivered=0,callback1=function(){if(0==delivered){delivered++}else if(2==delivered){delivered++}else{fail("unexpected status change")}assertEquals(status,xhrReader.getStatus())},callback2=function(){assertEquals(1,delivered++);assertEquals(status,xhrReader.getStatus())};xhrStream.on(event,callback1);xhrStream.once(event,callback2);xhrReader.onStatus(status);assertEquals(2,delivered);xhrReader.onStatus(status);assertEquals(3,delivered);xhrStream.removeListener(event,callback1);xhrReader.onStatus(status);assertEquals(3,delivered)}}function testOrderedStatusMultipleCallbacks(){checkStatusMapping(Status.ACTIVE,EventType.READABLE);function checkStatusMapping(status,event){var delivered=0,callback1=function(){if(0==delivered){delivered++}else if(2==delivered){delivered++}else if(4==delivered){delivered++}else{fail("unexpected status change")}assertEquals(status,xhrReader.getStatus())},callback2=function(){if(1==delivered){delivered++}else if(3==delivered){delivered++}else if(5==delivered){delivered++}else if(6==delivered){delivered++}else{fail("unexpected status change")}assertEquals(status,xhrReader.getStatus())};xhrStream.on(event,callback1);xhrStream.on(event,callback2);xhrStream.once(event,callback1);xhrStream.once(event,callback2);xhrReader.onStatus(status);assertEquals(4,delivered);xhrReader.onStatus(status);assertEquals(6,delivered);xhrStream.removeListener(event,callback1);xhrReader.onStatus(status);assertEquals(7,delivered)}}