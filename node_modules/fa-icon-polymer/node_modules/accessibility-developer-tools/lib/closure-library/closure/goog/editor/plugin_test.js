goog.provide("goog.editor.PluginTest");goog.setTestOnly("goog.editor.PluginTest");goog.require("goog.editor.Field");goog.require("goog.editor.Plugin");goog.require("goog.functions");goog.require("goog.testing.StrictMock");goog.require("goog.testing.jsunit");goog.require("goog.userAgent");var plugin,fieldObject;function setUp(){plugin=new goog.editor.Plugin;fieldObject={}}function tearDown(){plugin.dispose()}function testRegisterFieldObject(){plugin.registerFieldObject(fieldObject);assertEquals("Register field object must be stored in protected field.",fieldObject,plugin.fieldObject);assertFalse("Newly registered plugin must not be enabled.",plugin.isEnabled(fieldObject))}function testUnregisterFieldObject(){plugin.registerFieldObject(fieldObject);plugin.enable(fieldObject);plugin.unregisterFieldObject(fieldObject);assertNull("fieldObject property must be undefined after "+"unregistering a field object.",plugin.fieldObject);assertFalse("Unregistered field object must not be enabled",plugin.isEnabled(fieldObject))}function testEnable(){plugin.registerFieldObject(fieldObject);plugin.enable(fieldObject);assertTrue("Enabled field object must be enabled according to isEnabled().",plugin.isEnabled(fieldObject))}function testDisable(){plugin.registerFieldObject(fieldObject);plugin.enable(fieldObject);plugin.disable(fieldObject);assertFalse("Disabled field object must be disabled according to "+"isEnabled().",plugin.isEnabled(fieldObject))}function testIsEnabled(){assertFalse("Unregistered field object must be disabled according "+"to isEnabled().",plugin.isEnabled(fieldObject))}function testIsSupportedCommand(){assertFalse("Base plugin class must not support any commands.",plugin.isSupportedCommand("+indent"))}function testExecCommand(){var mockField=new goog.testing.StrictMock(goog.editor.Field);plugin.registerFieldObject(mockField);if(goog.userAgent.GECKO){mockField.stopChangeEvents(!0,!0)}mockField.dispatchBeforeChange();mockField.dispatchChange();mockField.dispatchSelectionChangeEvent();mockField.$replay();var passedCommand,passedArg;plugin.execCommandInternal=function(command,arg){passedCommand=command;passedArg=arg};plugin.execCommand("+indent",!0);mockField.$verify();mockField.$reset();assertEquals("+indent",passedCommand);assertTrue(passedArg);plugin.isSilentCommand=goog.functions.constant(!0);mockField.$replay();plugin.execCommand("+outdent",!1);mockField.$verify();assertEquals("+outdent",passedCommand);assertFalse(passedArg)}function testExecCommandException(){var mockField=new goog.testing.StrictMock(goog.editor.Field);plugin.registerFieldObject(mockField);plugin.execCommandInternal=function(){throw 1};if(goog.userAgent.GECKO){mockField.stopChangeEvents(!0,!0)}mockField.dispatchBeforeChange();mockField.dispatchChange();mockField.dispatchSelectionChangeEvent();mockField.$replay();assertThrows("Exception should not be swallowed",function(){plugin.execCommand()});mockField.$verify()}function testDisposed(){plugin.registerFieldObject(fieldObject);plugin.dispose();assert(plugin.getDisposed());assertNull("Disposed plugin must not have a field object.",plugin.fieldObject);assertFalse("Disposed plugin must not have an enabled field object.",plugin.isEnabled(fieldObject))}function testIsAndSetAutoDispose(){assertTrue("Plugin must start auto-disposable",plugin.isAutoDispose());plugin.setAutoDispose(!1);assertFalse(plugin.isAutoDispose());plugin.setAutoDispose(!0);assertTrue(plugin.isAutoDispose())}