goog.provide("goog.testing.fs.FileEntryTest");goog.setTestOnly("goog.testing.fs.FileEntryTest");goog.require("goog.testing.MockClock");goog.require("goog.testing.fs.FileEntry");goog.require("goog.testing.fs.FileSystem");goog.require("goog.testing.jsunit");var fs,file,fileEntry,mockClock,currentTime;function setUp(){mockClock=new goog.testing.MockClock(!0);fs=new goog.testing.fs.FileSystem;fileEntry=fs.getRoot().createDirectorySync("foo").createFileSync("bar");mockClock.uninstall()}function testIsFile(){assertTrue(fileEntry.isFile())}function testIsDirectory(){assertFalse(fileEntry.isDirectory())}function testFile(){var testFile=new goog.testing.fs.FileEntry(fs,fs.getRoot(),"test","hello world");return testFile.file().then(function(f){assertEquals("test",f.name);assertEquals("hello world",f.toString())})}function testGetLastModified(){mockClock.install();mockClock.tick(53);var testFile=new goog.testing.fs.FileEntry(fs,fs.getRoot(),"timeTest","hello world"),promise=testFile.getLastModified().then(function(date){assertEquals(53,date.getTime())}).thenAlways(function(){mockClock.uninstall()});mockClock.tick();return promise}function testGetMetadata(){mockClock.install();mockClock.tick(54);var testFile=new goog.testing.fs.FileEntry(fs,fs.getRoot(),"timeTest","hello world"),promise=testFile.getMetadata().then(function(metadata){assertEquals(54,metadata.modificationTime.getTime())}).thenAlways(function(){mockClock.uninstall()});mockClock.tick();return promise}