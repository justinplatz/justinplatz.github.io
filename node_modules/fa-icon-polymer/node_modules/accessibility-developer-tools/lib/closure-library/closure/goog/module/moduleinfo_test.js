goog.provide("goog.module.ModuleInfoTest");goog.setTestOnly("goog.module.ModuleInfoTest");goog.require("goog.module.BaseModule");goog.require("goog.module.ModuleInfo");goog.require("goog.testing.MockClock");goog.require("goog.testing.jsunit");var mockClock;function setUp(){mockClock=new goog.testing.MockClock(!0)}function tearDown(){mockClock.uninstall()}function testNotLoadedAtStart(){var m=new goog.module.ModuleInfo;assertFalse("Shouldn't be loaded",m.isLoaded())}var TestModule=function(){goog.module.BaseModule.call(this)};goog.inherits(TestModule,goog.module.BaseModule);function testOnLoad(){var m=new goog.module.ModuleInfo;m.setModuleConstructor(TestModule);m.onLoad(goog.nullFunction);assertTrue(m.isLoaded());var module=m.getModule();assertNotNull(module);assertTrue(module instanceof TestModule);m.dispose();assertTrue(m.isDisposed());assertTrue("Disposing of ModuleInfo should dispose of its module",module.isDisposed())}function testCallbacks(){var m=new goog.module.ModuleInfo;m.setModuleConstructor(TestModule);var index=0,a=-1,b=-1,c=-1,d=-1,ca=m.registerCallback(function(){a=index++}),cb=m.registerCallback(function(){b=index++}),cc=m.registerCallback(function(){c=index++}),cd=m.registerEarlyCallback(function(){d=index++});cb.abort();m.onLoad(goog.nullFunction);assertTrue("callback A should have fired",0<=a);assertFalse("callback B should have been aborted",0<=b);assertTrue("callback C should have fired",0<=c);assertTrue("early callback d should have fired",0<=d);assertEquals("ordering of callbacks was wrong",0,d);assertEquals("ordering of callbacks was wrong",1,a);assertEquals("ordering of callbacks was wrong",2,c)}function testErrorsInCallbacks(){var m=new goog.module.ModuleInfo;m.setModuleConstructor(TestModule);m.registerCallback(function(){throw new Error("boom1")});m.registerCallback(function(){throw new Error("boom2")});var hadError=m.onLoad(goog.nullFunction);assertTrue(hadError);var e=assertThrows(function(){mockClock.tick()});assertEquals("boom1",e.message)}function testErrbacks(){var m=new goog.module.ModuleInfo;m.setModuleConstructor(TestModule);var index=0,a=-1,b=-1,c=-1,d=-1,ca=m.registerErrback(function(){a=index++}),cb=m.registerErrback(function(){b=index++}),cc=m.registerErrback(function(){c=index++});m.onError("foo");assertTrue("callback A should have fired",0<=a);assertTrue("callback B should have fired",0<=b);assertTrue("callback C should have fired",0<=c);assertEquals("ordering of callbacks was wrong",0,a);assertEquals("ordering of callbacks was wrong",1,b);assertEquals("ordering of callbacks was wrong",2,c)}