goog.provide("goog.net.streams.JsonStreamParserTest");goog.setTestOnly("goog.net.streams.JsonStreamParserTest");goog.require("goog.array");goog.require("goog.json");goog.require("goog.labs.testing.JsonFuzzing");goog.require("goog.net.streams.JsonStreamParser");goog.require("goog.testing.asserts");goog.require("goog.testing.jsunit");goog.require("goog.uri.utils");var debug;function setUp(){var uri=window.document.URL;if(uri){var debugFlag=goog.uri.utils.getParamValue(uri,"debug");if(debugFlag){debug=window.document.getElementById("debug")}}}function print(info){if(debug){debug.innerHTML+="<p><p>"+info}}function testEmptyStream(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[]");assertNull(result)}function testEmptyStreamMore(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("  [   ]  ");assertNull(result);parser=new goog.net.streams.JsonStreamParser;result=parser.parse("  [   ");assertNull(result);result=parser.parse("  ]   ");assertNull(result);parser=new goog.net.streams.JsonStreamParser;assertThrows(function(){parser.parse(" a [   ")});assertThrows(function(){parser.parse(" [ ] ")});parser=new goog.net.streams.JsonStreamParser;parser.parse(" [   ");assertThrows(function(){parser.parse(" ]  a   ")})}function testSingleMessage(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[{\"a\" : \"b\"}]");assertEquals(1,result.length);assertEquals("b",result[0].a)}function testEnclosingArray(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[\n");assertNull(result);result=parser.parse("{\"a\" : \"b\"}");assertEquals(1,result.length);assertEquals("b",result[0].a);result=parser.parse("\n]");assertNull(result)}function testSingleMessageInChunks(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[{\"a\" : ");assertNull(result);result=parser.parse("\"b\"}]");assertEquals(1,result.length);assertEquals("b",result[0].a);parser=new goog.net.streams.JsonStreamParser;result=parser.parse("[ {  \"a\" : ");assertNull(result);result=parser.parse("\"b\"} ");assertEquals(1,result.length);assertEquals("b",result[0].a);result=parser.parse("] ");assertNull(result)}function testTwoMessages(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[{\"a\" : \"b\"}, {\"c\" : \"d\"}]");assertEquals(2,result.length);assertEquals("b",result[0].a);assertEquals("d",result[1].c)}function testTwoMessagesInChunks(){var parser=new goog.net.streams.JsonStreamParser,result=parser.parse("[{\"a\" : \"b\"}, ");assertEquals(1,result.length);assertEquals("b",result[0].a);result=parser.parse("{\"c\" : \"d\"} ");assertEquals(1,result.length);assertEquals("d",result[0].c);result=parser.parse("] ");assertNull(result);assertThrows(function(){parser.parse("  a   ")})}function testSingleFuzzyMessages(){for(var fuzzing=new goog.labs.testing.JsonFuzzing,i=0;5>i;i++){var data=fuzzing.newArray(),dataString=goog.json.serialize(data),parser=new goog.net.streams.JsonStreamParser,result=parser.parse(dataString);assertEquals(data.length,result.length);goog.array.forEach(data,function(elm,index){assertNotNull(elm);assertObjectEquals(dataString,elm,result[index])})}}function testChunkedFuzzyMessages(){var options={jsonSize:5,numFields:5,arraySize:4,maxDepth:3},fuzzing=new goog.labs.testing.JsonFuzzing(options),data=fuzzing.newArray(),dataString=goog.json.serialize(data);print(dataString);for(var j=1;j<dataString.length;j++){var parser=new goog.net.streams.JsonStreamParser,result=[],string1=dataString.substring(0,j),parsed=parser.parse(string1);if(parsed){result=goog.array.concat(result,parsed)}var string2=dataString.substring(j);parsed=parser.parse(string2);if(parsed){result=goog.array.concat(result,parsed)}assertEquals(data.length,result.length);goog.array.forEach(data,function(elm,index){assertObjectEquals(dataString,elm,result[index])})}}function testRandomlyChunkedFuzzyMessages(){var fuzzing=new goog.labs.testing.JsonFuzzing,data=fuzzing.newArray(),dataString=goog.json.serialize(data),parser=new goog.net.streams.JsonStreamParser,result=[];print(dataString);var pos=0;while(pos<dataString.length){var num=fuzzing.nextInt(1,dataString.length-pos),next=pos+num,subString=dataString.substring(pos,next);print(subString);pos=next;var parsed=parser.parse(subString);if(parsed){result=goog.array.concat(result,parsed)}}assertEquals(data.length,result.length);goog.array.forEach(data,function(elm,index){assertObjectEquals(dataString+"\n@"+index,elm,result[index])})}