goog.module("goog.labs.promiseTest");goog.setTestOnly("goog.labs.promiseTest");goog.require("goog.testing.jsunit");var Promise=goog.require("goog.Promise"),Timer=goog.require("goog.Timer"),promise=goog.require("goog.labs.promise"),MockClock=goog.require("goog.testing.MockClock"),testSuite=goog.require("goog.testing.testSuite");function whileLoopIterator(cond,body){return function(){var done=!1;return{next:function(opt_arg){done=done||!cond();if(done){return{done:!0}}else{return{done:!1,value:body()}}},throw:function(error){throw error}}}}function shouldNotCall(result){fail("This should not have been called (result: "+(result+"")+")")}var mockClock,sentinel={};testSuite({setUp:function(){mockClock=new MockClock},tearDown:function(){mockClock.uninstall()},testWhileLoopIterator:function(){var counter=3,it=whileLoopIterator(function(){return 0<counter},function(){--counter})();assertEquals(3,counter);assertFalse(it.next().done);assertEquals(2,counter);assertFalse(it.next().done);assertEquals(1,counter);assertFalse(it.next().done);assertEquals(0,counter);assertTrue(it.next().done);assertEquals(0,counter)},testRun:function(){var counter=5,resolved=0;return promise.run(whileLoopIterator(function(){return 0<counter},function(){--counter;return Promise.resolve().then(function(){++resolved})})).then(function(result){assertFalse(goog.isDef(result));assertEquals(0,counter);assertEquals(5,resolved)})},testRunWithNonPromise:function(){var counter=5;return promise.run(whileLoopIterator(function(){return 0<counter},function(){--counter})).then(function(result){assertFalse(goog.isDef(result));assertEquals(0,counter)})},testRunWithMockClock:function(){mockClock.install();var counter=3,innerResolved=0,outerResolved=!1;promise.run(whileLoopIterator(function(){return 0<counter},function(){--counter;return Timer.promise(10).then(function(){++innerResolved})})).then(function(){outerResolved=!0});assertEquals(3,counter);assertEquals(0,innerResolved);assertFalse(outerResolved);mockClock.tick();assertEquals(2,counter);assertEquals(0,innerResolved);assertFalse(outerResolved);mockClock.tick(10);assertEquals(1,counter);assertEquals(1,innerResolved);assertFalse(outerResolved);mockClock.tick(10);assertEquals(0,counter);assertEquals(2,innerResolved);assertFalse(outerResolved);mockClock.tick(10);assertEquals(0,counter);assertEquals(3,innerResolved);assertTrue(outerResolved)},testRunWithRejection:function(){var counter=5;return promise.run(whileLoopIterator(function(){return 0<counter},function(){--counter;if(2==counter){return Promise.reject(sentinel)}return Promise.resolve()})).then(shouldNotCall,function(error){assertEquals(2,counter);assertEquals(sentinel,error)})},testRunWithException:function(){var counter=5;return promise.run(whileLoopIterator(function(){return 0<counter},function(){--counter;if(2==counter){throw sentinel}return Promise.resolve()})).then(shouldNotCall,function(error){assertEquals(2,counter);assertEquals(sentinel,error)})},testRunWithImmediateException:function(){return promise.run(whileLoopIterator(function(){throw sentinel},function(){})).then(shouldNotCall,function(error){assertEquals(sentinel,error)})},testRunWithImmediateRejection:function(){return promise.run(whileLoopIterator(function(){return!0},function(){return Promise.reject(sentinel)})).then(shouldNotCall,function(error){assertEquals(sentinel,error)})},testRunWithoutYield:function(){return promise.run(whileLoopIterator(function(){return!1},goog.nullFunction)).then(function(result){assertFalse(goog.isDef(result))})},testRunYieldWithValue:function(){return promise.run(function(){var step=0,x,y;return{next:function(nextArg){switch(++step){case 1:return{done:!1,value:Promise.resolve(1)};case 2:x=nextArg;return{done:!1,value:Promise.resolve(2)};case 3:y=nextArg;return{done:!0,value:x+y};default:return{done:!0};}}}}).then(function(result){assertEquals(3,result)})},testRunYieldWithThrow:function(){return promise.run(function(){var step=0,x,y;return{next:function(nextArg){switch(++step){case 1:return{done:!1,value:Promise.reject("error")};case 2:x=nextArg;return{done:!1,value:Promise.resolve(2)};case 3:y=nextArg;return{done:!0,value:x+y};default:return{done:!0};}},throw:function(error){return{done:!1,value:Promise.resolve(1)}}}}).then(function(result){assertEquals(3,result)})}});