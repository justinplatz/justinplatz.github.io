goog.provide("goog.structs.AvlTreeTest");goog.setTestOnly("goog.structs.AvlTreeTest");goog.require("goog.array");goog.require("goog.structs.AvlTree");goog.require("goog.testing.jsunit");function testInsertsWithDefaultComparator(){var tree=new goog.structs.AvlTree,values=["bill","blake","elliot","jacob","john","myles","ted"];tree.add(values[4]);tree.add(values[3]);tree.add(values[0]);tree.add(values[6]);tree.add(values[5]);tree.add(values[1]);tree.add(values[2]);var i=0;tree.inOrderTraverse(function(value){assertEquals(values[i],value);i+=1});assertEquals(i,values.length);tree.inOrderTraverse(function(value){fail()},"zed");i=values.length;tree.reverseOrderTraverse(function(value){i--;assertEquals(values[i],value)});assertEquals(i,0);tree.reverseOrderTraverse(function(value){fail()},"aardvark")}function testRemovesWithDefaultComparator(){var tree=new goog.structs.AvlTree,values=["bill","blake","elliot","jacob","john","myles","ted"];tree.add("frodo");tree.add(values[4]);tree.add(values[3]);tree.add(values[0]);tree.add(values[6]);tree.add("samwise");tree.add(values[5]);tree.add(values[1]);tree.add(values[2]);tree.add("pippin");assertEquals(tree.remove("samwise"),"samwise");assertEquals(tree.remove("pippin"),"pippin");assertEquals(tree.remove("frodo"),"frodo");assertEquals(tree.remove("merry"),null);var i=0;tree.inOrderTraverse(function(value){assertEquals(values[i],value);i+=1});assertEquals(i,values.length)}function testInsertsAndRemovesWithCustomComparator(){for(var tree=new goog.structs.AvlTree(function(a,b){return a-b}),NUM_TO_INSERT=37,valuesToRemove=[1,0,6,7,36],values=[],i=0;i<NUM_TO_INSERT;i+=1){tree.add(i);values.push(i)}for(var i=0;i<valuesToRemove.length;i+=1){assertEquals(tree.remove(valuesToRemove[i]),valuesToRemove[i]);goog.array.remove(values,valuesToRemove[i])}assertEquals(tree.remove(-1),null);assertEquals(tree.remove(37),null);var i=0;tree.inOrderTraverse(function(value){assertEquals(values[i],value);i+=1});assertEquals(i,values.length)}function testAvlTreeHeight(){for(var tree=new goog.structs.AvlTree(function(a,b){return a-b}),NUM_TO_INSERT=2e3,NUM_TO_REMOVE=500,i=0;i<NUM_TO_INSERT;i+=1){tree.add(i)}for(var i=0;i<NUM_TO_REMOVE;i+=1){tree.remove(i)}assertTrue(tree.getHeight()<=1.4405*(7.31455283232408/0.6931471805599453)-1.3277)}function testAvlTreeContains(){var tree=new goog.structs.AvlTree,values=["bill","blake","elliot","jacob","john","myles","ted"];tree.add("frodo");tree.add(values[4]);tree.add(values[3]);tree.add(values[0]);tree.add(values[6]);tree.add("samwise");tree.add(values[5]);tree.add(values[1]);tree.add(values[2]);tree.add("pippin");assertEquals(tree.remove("samwise"),"samwise");assertEquals(tree.remove("pippin"),"pippin");assertEquals(tree.remove("frodo"),"frodo");for(var i=0;i<values.length;i+=1){assertTrue(tree.contains(values[i]))}assertFalse(tree.contains("samwise"));assertFalse(tree.contains("pippin"));assertFalse(tree.contains("frodo"))}function testAvlTreeIndexOf(){var tree=new goog.structs.AvlTree,values=["bill","blake","elliot","jacob","john","myles","ted"];tree.add("frodo");tree.add(values[4]);tree.add(values[3]);tree.add(values[0]);tree.add(values[6]);tree.add("samwise");tree.add(values[5]);tree.add(values[1]);tree.add(values[2]);tree.add("pippin");assertEquals("samwise",tree.remove("samwise"));assertEquals("pippin",tree.remove("pippin"));assertEquals("frodo",tree.remove("frodo"));for(var i=0;i<values.length;i+=1){assertEquals(i,tree.indexOf(values[i]))}assertEquals(-1,tree.indexOf("samwise"));assertEquals(-1,tree.indexOf("pippin"));assertEquals(-1,tree.indexOf("frodo"))}function testMinAndMaxValues(){for(var tree=new goog.structs.AvlTree(function(a,b){return a-b}),NUM_TO_INSERT=2e3,NUM_TO_REMOVE=500,i=0;i<NUM_TO_INSERT;i+=1){tree.add(i)}for(var i=0;i<NUM_TO_REMOVE;i+=1){tree.remove(i)}assertEquals(tree.getMinimum(),NUM_TO_REMOVE);assertEquals(tree.getMaximum(),NUM_TO_INSERT-1)}function testReverseOrderTraverse(){for(var tree=new goog.structs.AvlTree(function(a,b){return a-b}),NUM_TO_INSERT=2e3,NUM_TO_REMOVE=500,i=0;i<NUM_TO_INSERT;i+=1){tree.add(i)}for(var i=0;i<NUM_TO_REMOVE;i+=1){tree.remove(i)}var i=NUM_TO_INSERT-1;tree.reverseOrderTraverse(function(value){assertEquals(value,i);i-=1});assertEquals(i,NUM_TO_REMOVE-1)}function testGetCountBehavior(){var tree=new goog.structs.AvlTree;tree.add(1);tree.remove(1);assertEquals(0,tree.getCount());var values=["bill","blake","elliot","jacob","john","myles","ted"];tree.add("frodo");tree.add(values[4]);tree.add(values[3]);tree.add(values[0]);tree.add(values[6]);tree.add("samwise");tree.add(values[5]);tree.add(values[1]);tree.add(values[2]);tree.add("pippin");assertEquals(10,tree.getCount());assertEquals(tree.root_.left.count+tree.root_.right.count+1,tree.getCount());assertEquals("samwise",tree.remove("samwise"));assertEquals("pippin",tree.remove("pippin"));assertEquals("frodo",tree.remove("frodo"));assertEquals(null,tree.remove("merry"));assertEquals(7,tree.getCount());assertEquals(tree.root_.left.count+tree.root_.right.count+1,tree.getCount())}function testGetKthOrder(){for(var tree=new goog.structs.AvlTree(function(a,b){return a-b}),NUM_TO_INSERT=2e3,NUM_TO_REMOVE=500,i=0;i<NUM_TO_INSERT;i+=1){tree.add(i)}for(var i=0;i<NUM_TO_REMOVE;i+=1){tree.remove(i)}for(var k=0;k<tree.getCount();++k){assertEquals(NUM_TO_REMOVE+k,tree.getKthValue(k))}}