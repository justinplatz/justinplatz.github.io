goog.provide("goog.structs.Map");goog.require("goog.iter.Iterator");goog.require("goog.iter.StopIteration");goog.require("goog.object");goog.structs.Map=function(opt_map,var_args){this.map_={};this.keys_=[];this.count_=0;this.version_=0;var argLength=arguments.length;if(1<argLength){if(argLength%2){throw Error("Uneven number of arguments")}for(var i=0;i<argLength;i+=2){this.set(arguments[i],arguments[i+1])}}else if(opt_map){this.addAll(opt_map)}};goog.structs.Map.prototype.getCount=function(){return this.count_};goog.structs.Map.prototype.getValues=function(){this.cleanupKeysArray_();for(var rv=[],i=0,key;i<this.keys_.length;i++){key=this.keys_[i];rv.push(this.map_[key])}return rv};goog.structs.Map.prototype.getKeys=function(){this.cleanupKeysArray_();return this.keys_.concat()};goog.structs.Map.prototype.containsKey=function(key){return goog.structs.Map.hasKey_(this.map_,key)};goog.structs.Map.prototype.containsValue=function(val){for(var i=0,key;i<this.keys_.length;i++){key=this.keys_[i];if(goog.structs.Map.hasKey_(this.map_,key)&&this.map_[key]==val){return!0}}return!1};goog.structs.Map.prototype.equals=function(otherMap,opt_equalityFn){if(this===otherMap){return!0}if(this.count_!=otherMap.getCount()){return!1}var equalityFn=opt_equalityFn||goog.structs.Map.defaultEquals;this.cleanupKeysArray_();for(var key,i=0;key=this.keys_[i];i++){if(!equalityFn(this.get(key),otherMap.get(key))){return!1}}return!0};goog.structs.Map.defaultEquals=function(a,b){return a===b};goog.structs.Map.prototype.isEmpty=function(){return 0==this.count_};goog.structs.Map.prototype.clear=function(){this.map_={};this.keys_.length=0;this.count_=0;this.version_=0};goog.structs.Map.prototype.remove=function(key){if(goog.structs.Map.hasKey_(this.map_,key)){delete this.map_[key];this.count_--;this.version_++;if(this.keys_.length>2*this.count_){this.cleanupKeysArray_()}return!0}return!1};goog.structs.Map.prototype.cleanupKeysArray_=function(){if(this.count_!=this.keys_.length){var srcIndex=0,destIndex=0;while(srcIndex<this.keys_.length){var key=this.keys_[srcIndex];if(goog.structs.Map.hasKey_(this.map_,key)){this.keys_[destIndex++]=key}srcIndex++}this.keys_.length=destIndex}if(this.count_!=this.keys_.length){var seen={},srcIndex=0,destIndex=0;while(srcIndex<this.keys_.length){var key=this.keys_[srcIndex];if(!goog.structs.Map.hasKey_(seen,key)){this.keys_[destIndex++]=key;seen[key]=1}srcIndex++}this.keys_.length=destIndex}};goog.structs.Map.prototype.get=function(key,opt_val){if(goog.structs.Map.hasKey_(this.map_,key)){return this.map_[key]}return opt_val};goog.structs.Map.prototype.set=function(key,value){if(!goog.structs.Map.hasKey_(this.map_,key)){this.count_++;this.keys_.push(key);this.version_++}this.map_[key]=value};goog.structs.Map.prototype.addAll=function(map){var keys,values;if(map instanceof goog.structs.Map){keys=map.getKeys();values=map.getValues()}else{keys=goog.object.getKeys(map);values=goog.object.getValues(map)}for(var i=0;i<keys.length;i++){this.set(keys[i],values[i])}};goog.structs.Map.prototype.forEach=function(f,opt_obj){for(var keys=this.getKeys(),i=0;i<keys.length;i++){var key=keys[i],value=this.get(key);f.call(opt_obj,value,key,this)}};goog.structs.Map.prototype.clone=function(){return new goog.structs.Map(this)};goog.structs.Map.prototype.transpose=function(){for(var transposed=new goog.structs.Map,i=0;i<this.keys_.length;i++){var key=this.keys_[i],value=this.map_[key];transposed.set(value,key)}return transposed};goog.structs.Map.prototype.toObject=function(){this.cleanupKeysArray_();for(var obj={},i=0,key;i<this.keys_.length;i++){key=this.keys_[i];obj[key]=this.map_[key]}return obj};goog.structs.Map.prototype.getKeyIterator=function(){return this.__iterator__(!0)};goog.structs.Map.prototype.getValueIterator=function(){return this.__iterator__(!1)};goog.structs.Map.prototype.__iterator__=function(opt_keys){this.cleanupKeysArray_();var i=0,version=this.version_,selfObj=this,newIter=new goog.iter.Iterator;newIter.next=function(){if(version!=selfObj.version_){throw Error("The map has changed since the iterator was created")}if(i>=selfObj.keys_.length){throw goog.iter.StopIteration}var key=selfObj.keys_[i++];return opt_keys?key:selfObj.map_[key]};return newIter};goog.structs.Map.hasKey_=function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)};