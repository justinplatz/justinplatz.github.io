goog.provide("goog.format.HtmlPrettyPrinterTest");goog.setTestOnly("goog.format.HtmlPrettyPrinterTest");goog.require("goog.format.HtmlPrettyPrinter");goog.require("goog.testing.MockClock");goog.require("goog.testing.jsunit");var COMPLEX_HTML="<!DOCTYPE root-element [SYSTEM OR PUBLIC FPI] \"uri\" ["+"<!-- internal declarations -->]>"+"<html><head><title>My HTML</title><!-- my comment --></head>"+"<script> if(i<0)\nfoo; </script>"+"<body><h1>My Header</h1>My text.<br><b>My bold text.</b><hr>"+"<pre>My\npreformatted <br> HTML.</pre>5 < 10</body>"+"</html>",mockClock,mockClockTicks;function setUp(){mockClockTicks=0;mockClock=new goog.testing.MockClock;mockClock.getCurrentTime=function(){return mockClockTicks++};mockClock.install()}function tearDown(){if(mockClock){mockClock.uninstall()}}function testSimpleHtml(){var actual=goog.format.HtmlPrettyPrinter.format("<br><b>bold</b>");assertEquals("<br>\n<b>bold</b>\n",actual);assertEquals(actual,goog.format.HtmlPrettyPrinter.format(actual))}function testSimpleHtmlMixedCase(){var actual=goog.format.HtmlPrettyPrinter.format("<BR><b>bold</b>");assertEquals("<BR>\n<b>bold</b>\n",actual);assertEquals(actual,goog.format.HtmlPrettyPrinter.format(actual))}function testComplexHtml(){var actual=goog.format.HtmlPrettyPrinter.format(COMPLEX_HTML),expected="<!DOCTYPE root-element [SYSTEM OR PUBLIC FPI] \"uri\" ["+"<!-- internal declarations -->]>\n"+"<html>\n"+"<head>\n"+"<title>My HTML</title>\n"+"<!-- my comment -->"+"</head>\n"+"<script> if(i<0)\nfoo; </script>\n"+"<body>\n"+"<h1>My Header</h1>\n"+"My text.<br>\n"+"<b>My bold text.</b>\n"+"<hr>\n"+"<pre>My\npreformatted <br> HTML.</pre>\n"+"5 < 10"+"</body>\n"+"</html>\n";assertEquals(expected,actual);assertEquals(actual,goog.format.HtmlPrettyPrinter.format(actual))}function testTimeout(){var pp=new goog.format.HtmlPrettyPrinter(3),actual=pp.format(COMPLEX_HTML),expected="<!DOCTYPE root-element [SYSTEM OR PUBLIC FPI] \"uri\" ["+"<!-- internal declarations -->]>\n"+"<html>\n"+"<head><title>My HTML</title><!-- my comment --></head>"+"<script> if(i<0)\nfoo; </script>"+"<body><h1>My Header</h1>My text.<br><b>My bold text.</b><hr>"+"<pre>My\npreformatted <br> HTML.</pre>5 < 10</body>"+"</html>\n";assertEquals(expected,actual)}function testKeepLeadingIndent(){var original=" <b>Bold</b> <i>Ital</i> ",expected=" <b>Bold</b> <i>Ital</i>\n";assertEquals(expected,goog.format.HtmlPrettyPrinter.format(original))}function testTrimLeadingLineBreaks(){var original="\n \t\r\n  \n <b>Bold</b> <i>Ital</i> ",expected=" <b>Bold</b> <i>Ital</i>\n";assertEquals(expected,goog.format.HtmlPrettyPrinter.format(original))}function testExtraLines(){var original="<br>\ntombrat";assertEquals(original+"\n",goog.format.HtmlPrettyPrinter.format(original))}function testCrlf(){var original="<br>\r\none\r\ntwo<br>";assertEquals(original+"\n",goog.format.HtmlPrettyPrinter.format(original))}function testEndInLineBreak(){assertEquals("foo\n",goog.format.HtmlPrettyPrinter.format("foo"));assertEquals("foo\n",goog.format.HtmlPrettyPrinter.format("foo\n"));assertEquals("foo\n",goog.format.HtmlPrettyPrinter.format("foo\n\n"));assertEquals("foo<br>\n",goog.format.HtmlPrettyPrinter.format("foo<br>"));assertEquals("foo<br>\n",goog.format.HtmlPrettyPrinter.format("foo<br>\n"))}function testTable(){var original="<table>"+"<tr><td>one.one</td><td>one.two</td></tr>"+"<tr><td>two.one</td><td>two.two</td></tr>"+"</table>",expected="<table>\n"+"<tr>\n<td>one.one</td>\n<td>one.two</td>\n</tr>\n"+"<tr>\n<td>two.one</td>\n<td>two.two</td>\n</tr>\n"+"</table>\n";assertEquals(expected,goog.format.HtmlPrettyPrinter.format(original))}function testRegexMakesProgress(){var original=goog.format.HtmlPrettyPrinter.TOKEN_REGEX_;try{goog.format.HtmlPrettyPrinter.TOKEN_REGEX_=/(?:\B|<!--.*?-->|<!.*?>|<(\/?)(\w+)[^>]*>|[^<]+|<)/g;assertEquals("f o o\n",goog.format.HtmlPrettyPrinter.format("f o o"));var ex=assertThrows("should have failed for invalid regex - endless loop",goog.partial(goog.format.HtmlPrettyPrinter.format,COMPLEX_HTML));assertEquals("Regex failed to make progress through source html.",ex.message)}finally{goog.format.HtmlPrettyPrinter.TOKEN_REGEX_=original}}function testLists(){var original="<ul><li>one</li><ul><li>two</li></UL><li>three</li></ul>",expected="<ul><li>one</li>\n<ul><li>two</li></UL>\n<li>three</li></ul>\n";assertEquals(expected,goog.format.HtmlPrettyPrinter.format(original))}function testAvoidDataLoss(){var original=goog.format.HtmlPrettyPrinter.TOKEN_REGEX_;try{goog.format.HtmlPrettyPrinter.TOKEN_REGEX_=/(?:<!--.*?-->|<!.*?>|<(\/?)(\w+)[^>]*>|[^<]+)/g;assertEquals("foo\n",goog.format.HtmlPrettyPrinter.format("foo"));var ex=assertThrows("should have failed for invalid regex - data loss",goog.partial(goog.format.HtmlPrettyPrinter.format,COMPLEX_HTML));assertEquals("Lost data pretty printing html.",ex.message)}finally{goog.format.HtmlPrettyPrinter.TOKEN_REGEX_=original}}