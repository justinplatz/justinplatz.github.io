goog.provide("goog.testing.PerformanceTimerTest");goog.setTestOnly("goog.testing.PerformanceTimerTest");goog.require("goog.async.Deferred");goog.require("goog.dom");goog.require("goog.math");goog.require("goog.testing.MockClock");goog.require("goog.testing.PerformanceTimer");goog.require("goog.testing.jsunit");var mockClock,sandbox,timer;function setUpPage(){sandbox=document.getElementById("sandbox")}function setUp(){mockClock=new goog.testing.MockClock(!0);timer=new goog.testing.PerformanceTimer}function tearDown(){mockClock.dispose();timer=null;goog.dom.removeChildren(sandbox)}function testConstructor(){assertTrue("Timer must be an instance of goog.testing.PerformanceTimer",timer instanceof goog.testing.PerformanceTimer);assertEquals("Timer must collect the default number of samples",10,timer.getNumSamples());assertEquals("Timer must have the default timeout interval",5e3,timer.getTimeoutInterval())}function testRun_noSetUpOrTearDown(){runAndAssert(!1,!1,!1)}function testRun_withSetup(){runAndAssert(!0,!1,!1)}function testRun_withTearDown(){runAndAssert(!1,!0,!1)}function testRun_withSetUpAndTearDown(){runAndAssert(!0,!0,!1)}function testRunAsync_noSetUpOrTearDown(){runAndAssert(!1,!1,!0)}function testRunAsync_withSetup(){runAndAssert(!0,!1,!0)}function testRunAsync_withTearDown(){runAndAssert(!1,!0,!0)}function testRunAsync_withSetUpAndTearDown(){runAndAssert(!0,!0,!0)}function runAndAssert(useSetUp,useTearDown,runAsync){var fakeExecutionTime=[100,95,98,104,130,101,96,98,90,103],count=0,testFunction=function(){mockClock.tick(fakeExecutionTime[count++]);if(runAsync){var deferred=new goog.async.Deferred;deferred.callback();return deferred}},setUpCount=0,setUpFunction=function(){mockClock.tick(7);setUpCount++;if(runAsync){var deferred=new goog.async.Deferred;deferred.callback();return deferred}},tearDownCount=0,tearDownFunction=function(){mockClock.tick(11);tearDownCount++;if(runAsync){var deferred=new goog.async.Deferred;deferred.callback();return deferred}},task=new goog.testing.PerformanceTimer.Task(testFunction);if(useSetUp){task.withSetUp(setUpFunction)}if(useTearDown){task.withTearDown(tearDownFunction)}if(runAsync){var assertsRan=!1,deferred=timer.runAsyncTask(task);deferred.addCallback(function(results){assertsRan=assertResults(results,useSetUp,useTearDown,setUpCount,tearDownCount,fakeExecutionTime)});assertTrue(assertsRan)}else{var results=timer.runTask(task);assertResults(results,useSetUp,useTearDown,setUpCount,tearDownCount,fakeExecutionTime)}}function assertResults(results,useSetUp,useTearDown,setUpCount,tearDownCount,fakeExecutionTime){assertNotNull("Results must be available.",results);assertEquals("Average is wrong.",goog.math.average.apply(null,fakeExecutionTime),results.average);assertEquals("Standard deviation is wrong.",goog.math.standardDeviation.apply(null,fakeExecutionTime),results.standardDeviation);assertEquals("Count must be as expected.",10,results.count);assertEquals("Maximum is wrong.",130,results.maximum);assertEquals("Mimimum is wrong.",90,results.minimum);assertEquals("Total must be a nonnegative number.",goog.math.sum.apply(null,fakeExecutionTime),results.total);assertEquals("Set up count must be as expected.",useSetUp?10:0,setUpCount);assertEquals("Tear down count must be as expected.",useTearDown?10:0,tearDownCount);return!0}function testTimeout(){var count=0,testFunction=function(){mockClock.tick(100);++count};timer.setNumSamples(200);timer.setTimeoutInterval(2500);var results=timer.run(testFunction);assertNotNull("Results must be available",results);assertEquals("Count is wrong",count,results.count);assertTrue("Count must less than expected",results.count<timer.getNumSamples())}function testCreateResults(){var samples=[53,0,103],expectedResults={average:52,count:3,maximum:103,minimum:0,standardDeviation:goog.math.standardDeviation.apply(null,samples),total:156};assertObjectEquals(expectedResults,goog.testing.PerformanceTimer.createResults(samples))}