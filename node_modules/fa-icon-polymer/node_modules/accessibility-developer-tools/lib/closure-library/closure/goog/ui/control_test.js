goog.provide("goog.ui.ControlTest");goog.setTestOnly("goog.ui.ControlTest");goog.require("goog.a11y.aria");goog.require("goog.a11y.aria.State");goog.require("goog.array");goog.require("goog.dom");goog.require("goog.dom.TagName");goog.require("goog.dom.classlist");goog.require("goog.events");goog.require("goog.events.BrowserEvent");goog.require("goog.events.KeyCodes");goog.require("goog.html.testing");goog.require("goog.object");goog.require("goog.string");goog.require("goog.style");goog.require("goog.testing.ExpectedFailures");goog.require("goog.testing.events");goog.require("goog.testing.events.Event");goog.require("goog.testing.jsunit");goog.require("goog.ui.Component");goog.require("goog.ui.Control");goog.require("goog.ui.ControlRenderer");goog.require("goog.ui.registry");goog.require("goog.userAgent");var testFocus=!1,control,ALL_EVENTS=goog.object.getValues(goog.ui.Component.EventType),events={},expectedFailures,sandbox,aria=goog.a11y.aria,State=goog.a11y.aria.State;function setUpPage(){expectedFailures=new goog.testing.ExpectedFailures;sandbox=document.getElementById("sandbox")}function TestRenderer(){goog.ui.ControlRenderer.call(this)}goog.inherits(TestRenderer,goog.ui.ControlRenderer);function setUp(){control=new goog.ui.Control("Hello");control.setDispatchTransitionEvents(goog.ui.Component.State.ALL,!0);goog.events.listen(control,ALL_EVENTS,countEvent)}function tearDown(){control.dispose();expectedFailures.handleTearDown();goog.dom.removeChildren(sandbox);resetEventCount()}function resetEventCount(){goog.object.clear(events)}function countEvent(e){var type=e.type,target=e.target;if(!events[target]){events[target]={}}if(events[target][type]){events[target][type]++}else{events[target][type]=1}}function getEventCount(target,type){return events[target]&&events[target][type]||0}function noEventsDispatched(){return!events||goog.object.isEmpty(events)}function getListenerCount(control){return control.googUiComponentHandler_?goog.object.getCount(control.getHandler().keys_):0}function fireMouseDownAndFocus(element,opt_button){var result=goog.testing.events.fireMouseDownEvent(element,opt_button);if(result){element.focus()}return result}function isMacSafari3(){return goog.userAgent.WEBKIT&&goog.userAgent.MAC&&!goog.userAgent.isVersionOrHigher("527")}function testConstructor(){assertNotNull("Constructed control must not be null",control);assertEquals("Content must have expected value","Hello",control.getContent());assertEquals("Renderer must default to the registered renderer",goog.ui.registry.getDefaultRenderer(goog.ui.Control),control.getRenderer());var content=goog.dom.createDom(goog.dom.TagName.DIV,null,"Hello",goog.dom.createDom(goog.dom.TagName.B,null,"World")),testRenderer=new TestRenderer,fakeDomHelper={},foo=new goog.ui.Control(content,testRenderer,fakeDomHelper);assertNotNull("Constructed object must not be null",foo);assertEquals("Content must have expected value",content,foo.getContent());assertEquals("Renderer must have expected value",testRenderer,foo.getRenderer());assertEquals("DOM helper must have expected value",fakeDomHelper,foo.getDomHelper());foo.dispose()}function testGetHandler(){assertUndefined("Event handler must be undefined before getHandler() "+"is called",control.googUiComponentHandler_);var handler=control.getHandler();assertNotNull("Event handler must not be null",handler);assertEquals("getHandler() must return the same instance if called again",handler,control.getHandler())}function testIsHandleMouseEvents(){assertTrue("Controls must handle their own mouse events by default",control.isHandleMouseEvents())}function testSetHandleMouseEvents(){assertTrue("Control must handle its own mouse events by default",control.isHandleMouseEvents());control.setHandleMouseEvents(!1);assertFalse("Control must no longer handle its own mouse events",control.isHandleMouseEvents());control.setHandleMouseEvents(!0);assertTrue("Control must once again handle its own mouse events",control.isHandleMouseEvents());control.render(sandbox);assertTrue("Rendered control must handle its own mouse events",control.isHandleMouseEvents());control.setHandleMouseEvents(!1);assertFalse("Rendered control must no longer handle its own mouse events",control.isHandleMouseEvents());control.setHandleMouseEvents(!0);assertTrue("Rendered control must once again handle its own mouse events",control.isHandleMouseEvents())}function testGetKeyEventTarget(){assertNull("Key event target of control without DOM must be null",control.getKeyEventTarget());control.createDom();assertEquals("Key event target of control with DOM must be its element",control.getElement(),control.getKeyEventTarget())}function testGetKeyHandler(){assertUndefined("Key handler must be undefined before getKeyHandler() "+"is called",control.keyHandler_);var keyHandler=control.getKeyHandler();assertNotNull("Key handler must not be null",keyHandler);assertEquals("getKeyHandler() must return the same instance if called "+"again",keyHandler,control.getKeyHandler())}function testGetRenderer(){assertEquals("Renderer must be the default registered renderer",goog.ui.registry.getDefaultRenderer(goog.ui.Control),control.getRenderer())}function testSetRenderer(){control.createDom();assertNotNull("Control must have a DOM",control.getElement());assertFalse("Control must not be in the document",control.isInDocument());assertEquals("Renderer must be the default registered renderer",goog.ui.registry.getDefaultRenderer(goog.ui.Control),control.getRenderer());var testRenderer=new TestRenderer;control.setRenderer(testRenderer);assertNull("Control must not have a DOM after its renderer is reset",control.getElement());assertFalse("Control still must not be in the document",control.isInDocument());assertEquals("Renderer must have expected value",testRenderer,control.getRenderer());control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());assertThrows("Resetting the renderer after the control has entered "+"the document must throw error",function(){control.setRenderer({})})}function testGetExtraClassNames(){assertNull("Control must not have any extra class names by default",control.getExtraClassNames())}function testAddRemoveClassName(){assertNull("Control must not have any extra class names by default",control.getExtraClassNames());control.addClassName("foo");assertArrayEquals("Control must have expected extra class names",["foo"],control.getExtraClassNames());assertNull("Control must not have a DOM",control.getElement());control.createDom();assertSameElements("Control's element must have expected class names",["goog-control","foo"],goog.dom.classlist.get(control.getElement()));control.addClassName("bar");assertArrayEquals("Control must have expected extra class names",["foo","bar"],control.getExtraClassNames());assertSameElements("Control's element must have expected class names",["goog-control","foo","bar"],goog.dom.classlist.get(control.getElement()));control.addClassName("bar");assertArrayEquals("Adding the same class name again must be a no-op",["foo","bar"],control.getExtraClassNames());assertSameElements("Adding the same class name again must be a no-op",["goog-control","foo","bar"],goog.dom.classlist.get(control.getElement()));control.addClassName(null);assertArrayEquals("Adding null class name must be a no-op",["foo","bar"],control.getExtraClassNames());assertSameElements("Adding null class name must be a no-op",["goog-control","foo","bar"],goog.dom.classlist.get(control.getElement()));control.removeClassName(null);assertArrayEquals("Removing null class name must be a no-op",["foo","bar"],control.getExtraClassNames());assertSameElements("Removing null class name must be a no-op",["goog-control","foo","bar"],goog.dom.classlist.get(control.getElement()));control.removeClassName("foo");assertArrayEquals("Control must have expected extra class names",["bar"],control.getExtraClassNames());assertSameElements("Control's element must have expected class names",["goog-control","bar"],goog.dom.classlist.get(control.getElement()));control.removeClassName("bar");assertNull("Control must not have any extra class names",control.getExtraClassNames());assertSameElements("Control's element must have expected class names",["goog-control"],goog.dom.classlist.get(control.getElement()))}function testEnableClassName(){assertNull("Control must not have any extra class names by default",control.getExtraClassNames());control.enableClassName("foo",!0);assertArrayEquals("Control must have expected extra class names",["foo"],control.getExtraClassNames());control.enableClassName("bar",!0);assertArrayEquals("Control must have expected extra class names",["foo","bar"],control.getExtraClassNames());control.enableClassName("bar",!0);assertArrayEquals("Enabling the same class name again must be a no-op",["foo","bar"],control.getExtraClassNames());control.enableClassName(null);assertArrayEquals("Enabling null class name must be a no-op",["foo","bar"],control.getExtraClassNames());control.enableClassName("foo",!1);assertArrayEquals("Control must have expected extra class names",["bar"],control.getExtraClassNames());control.enableClassName("bar",!1);assertNull("Control must not have any extra class names",control.getExtraClassNames())}function testCreateDom(){assertNull("Control must not have a DOM by default",control.getElement());assertFalse("Control must not allow text selection by default",control.isAllowTextSelection());assertTrue("Control must be visible by default",control.isVisible());control.createDom();assertNotNull("Control must have a DOM",control.getElement());assertTrue("Control's element must be unselectable",goog.style.isUnselectable(control.getElement()));assertTrue("Control's element must be visible","none"!=control.getElement().style.display);control.setAllowTextSelection(!0);control.createDom();assertFalse("Control's element must be selectable",goog.style.isUnselectable(control.getElement()));control.setVisible(!1);control.createDom();assertTrue("Control's element must be hidden","none"==control.getElement().style.display)}function testGetContentElement(){assertNull("Unrendered control must not have a content element",control.getContentElement());control.createDom();assertEquals("Control's content element must equal its root element",control.getElement(),control.getContentElement())}function testCanDecorate(){assertTrue(control.canDecorate(goog.dom.createElement(goog.dom.TagName.DIV)))}function testDecorateInternal(){sandbox.innerHTML="<div id=\"foo\">Hello, <b>World</b>!</div>";var foo=goog.dom.getElement("foo");control.decorate(foo);assertEquals("Decorated control's element must have expected value",foo,control.getElement());assertTrue("Element must be unselectable",goog.style.isUnselectable(control.getElement()));assertTrue("Element must be visible","none"!=control.getElement().style.display)}function testDecorateInternalForSelectableControl(){sandbox.innerHTML="<div id=\"foo\">Hello, <b>World</b>!</div>";var foo=goog.dom.getElement("foo");control.setAllowTextSelection(!0);control.decorate(foo);assertEquals("Decorated control's element must have expected value",foo,control.getElement());assertFalse("Element must be selectable",goog.style.isUnselectable(control.getElement()));assertTrue("Control must be visible",control.isVisible())}function testDecorateInternalForHiddenElement(){sandbox.innerHTML="<div id=\"foo\" style=\"display:none\">Hello!</div>";var foo=goog.dom.getElement("foo");control.decorate(foo);assertEquals("Decorated control's element must have expected value",foo,control.getElement());assertTrue("Element must be unselectable",goog.style.isUnselectable(control.getElement()));assertFalse("Control must be hidden",control.isVisible())}function testEnterDocument(){control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());if(goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher(9)){assertEquals("Control must have 5 mouse & 3 key event listeners on IE8",8,getListenerCount(control))}else{assertEquals("Control must have 4 mouse and 3 key event listeners",7,getListenerCount(control))}assertEquals("Control's key event handler must be attached to its "+"key event target",control.getKeyEventTarget(),control.getKeyHandler().element_)}function testEnterDocumentForControlWithoutMouseHandling(){control.setHandleMouseEvents(!1);control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());assertEquals("Control must have 3 key event listeners",3,getListenerCount(control));assertEquals("Control's key event handler must be attached to its "+"key event target",control.getKeyEventTarget(),control.getKeyHandler().element_)}function testEnterDocumentForNonFocusableControl(){control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());if(goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher(9)){assertEquals("Control must have 5 mouse event listeners on IE8",5,getListenerCount(control))}else{assertEquals("Control must have 4 mouse event listeners",4,getListenerCount(control))}assertUndefined("Control must not have a key event handler",control.keyHandler_)}function testEnterDocumentForControlWithoutEventHandlers(){control.setHandleMouseEvents(!1);control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());assertEquals("Control must have 0 event listeners",0,getListenerCount(control));assertUndefined("Control must not have an event handler",control.googUiComponentHandler_);assertUndefined("Control must not have a key event handler",control.keyHandler_)}function testExitDocument(){control.render(sandbox);assertTrue("Control must be in the document",control.isInDocument());if(goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher(9)){assertEquals("Control must have 5 mouse & 3 key event listeners on IE8",8,getListenerCount(control))}else{assertEquals("Control must have 4 mouse and 3 key event listeners",7,getListenerCount(control))}assertEquals("Control's key event handler must be attached to its "+"key event target",control.getKeyEventTarget(),control.getKeyHandler().element_);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control's element must support keyboard focus",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()))}catch(e){expectedFailures.handleException(e)}control.exitDocument();assertFalse("Control must no longer be in the document",control.isInDocument());assertEquals("Control must have no event listeners",0,getListenerCount(control));assertNull("Control's key event handler must be unattached",control.getKeyHandler().element_);assertFalse("Control's element must no longer support keyboard focus",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()))}function testDispose(){control.render(sandbox);var handler=control.getHandler(),keyHandler=control.getKeyHandler();control.dispose();assertFalse("Control must no longer be in the document",control.isInDocument());assertTrue("Control must have been disposed of",control.isDisposed());assertUndefined("Renderer must have been deleted",control.getRenderer());assertNull("Content must be nulled out",control.getContent());assertTrue("Event handler must have been disposed of",handler.isDisposed());assertUndefined("Event handler must have been deleted",control.googUiComponentHandler_);assertTrue("Key handler must have been disposed of",keyHandler.isDisposed());assertUndefined("Key handler must have been deleted",control.keyHandler_);assertNull("Extra class names must have been nulled out",control.getExtraClassNames())}function testGetContent(){assertNull("Empty control must have null content",new goog.ui.Control(null).getContent());assertEquals("Control must have expected content","Hello",control.getContent());control.render(sandbox);assertEquals("Control must have expected content after rendering","Hello",control.getContent())}function testGetContentForDecoratedControl(){sandbox.innerHTML="<div id=\"empty\"></div>\n"+"<div id=\"text\">Hello, world!</div>\n"+"<div id=\"element\"><span>Foo</span></div>\n"+"<div id=\"nodelist\">Hello, <b>world</b>!</div>\n";var empty=new goog.ui.Control(null);empty.decorate(goog.dom.getElement("empty"));assertNull("Content of control decorating empty DIV must be null",empty.getContent());empty.dispose();var text=new goog.ui.Control(null);text.decorate(goog.dom.getElement("text"));assertEquals("Content of control decorating DIV with text contents "+"must be as expected","Hello, world!",text.getContent().nodeValue);text.dispose();var element=new goog.ui.Control(null);element.decorate(goog.dom.getElement("element"));assertEquals("Content of control decorating DIV with element child "+"must be as expected",goog.dom.getElement("element").firstChild,element.getContent());element.dispose();var nodelist=new goog.ui.Control(null);nodelist.decorate(goog.dom.getElement("nodelist"));assertSameElements("Content of control decorating DIV with mixed "+"contents must be as expected",goog.dom.getElement("nodelist").childNodes,nodelist.getContent());nodelist.dispose()}function testSetAriaLabel_render(){assertNull("Controls must not have any aria label by default",control.getAriaLabel());control.setAriaLabel("label");assertEquals("Control must have aria label","label",control.getAriaLabel());control.render(sandbox);var elem=control.getElementStrict();assertEquals("Element must have control's aria label after rendering","label",goog.a11y.aria.getLabel(elem));control.setAriaLabel("new label");assertEquals("Element must have the new aria label","new label",goog.a11y.aria.getLabel(elem))}function testSetAriaLabel_decorate(){assertNull("Controls must not have any aria label by default",control.getAriaLabel());control.setAriaLabel("label");assertEquals("Control must have aria label","label",control.getAriaLabel());sandbox.innerHTML="<div id=\"nodelist\" role=\"button\">"+"Hello, <b>world</b>!</div>";control.decorate(goog.dom.getElement("nodelist"));var elem=control.getElementStrict();assertEquals("Element must have control's aria label after rendering","label",goog.a11y.aria.getLabel(elem));assertEquals("Element must have the correct role","button",elem.getAttribute("role"));control.setAriaLabel("new label");assertEquals("Element must have the new aria label","new label",goog.a11y.aria.getLabel(elem))}function testSetContent(){control.setContent("Bye");assertEquals("Unrendered control control must have expected contents","Bye",control.getContent());assertNull("No DOM must be created by setContent",control.getElement());control.createDom();assertEquals("Rendered control's DOM must have expected contents","Bye",control.getElement().innerHTML);control.setContent(null);assertNull("Rendered control must have expected contents",control.getContent());assertEquals("Rendered control's DOM must have expected contents","",control.getElement().innerHTML);control.setContent([goog.dom.createDom(goog.dom.TagName.DIV,null,goog.dom.createDom(goog.dom.TagName.SPAN,null,"Hello")),"World"]);assertHTMLEquals("Control's DOM must be updated","<div><span>Hello</span></div>World",control.getElement().innerHTML)}function testSetContentInternal(){control.render(sandbox);assertEquals("Control must have expected content after rendering","Hello",control.getContent());control.setContentInternal("Bye");assertEquals("Control must have expected contents","Bye",control.getContent());assertEquals("Control's DOM must be unchanged","Hello",control.getElement().innerHTML)}function testGetCaption(){assertEquals("Empty control's caption must be empty string","",new goog.ui.Control(null).getCaption());assertEquals("Caption must have expected value","Hello",control.getCaption());sandbox.innerHTML="<div id=\"nodelist\">Hello, <b>world</b>!</div>";control.decorate(goog.dom.getElement("nodelist"));assertEquals("Caption must have expected value","Hello, world!",control.getCaption());var arrayContent=goog.array.clone(goog.dom.safeHtmlToNode(goog.html.testing.newSafeHtmlForTest(" <b> foo</b><i>  bar</i> ")).childNodes);control.setContent(arrayContent);assertEquals("whitespaces must be normalized in the caption","foo bar",control.getCaption());control.setContent("\xA0foo");assertEquals("indenting spaces must be kept","\xA0foo",control.getCaption())}function testSetCaption(){control.setCaption("Hello, world!");assertEquals("Control must have a string caption \"Hello, world!\"","Hello, world!",control.getCaption())}function testSetRightToLeft(){control.createDom();assertFalse("Control's element must not have right-to-left class",goog.dom.classlist.contains(control.getElement(),"goog-control-rtl"));control.setRightToLeft(!0);assertTrue("Control's element must have right-to-left class",goog.dom.classlist.contains(control.getElement(),"goog-control-rtl"));control.render(sandbox);assertThrows("Changing the render direction of a control already in "+"the document is an error",function(){control.setRightToLeft(!1)})}function testIsAllowTextSelection(){assertFalse("Controls must not allow text selection by default",control.isAllowTextSelection())}function testSetAllowTextSelection(){assertFalse("Controls must not allow text selection by default",control.isAllowTextSelection());control.setAllowTextSelection(!0);assertTrue("Control must allow text selection",control.isAllowTextSelection());control.setAllowTextSelection(!1);assertFalse("Control must no longer allow text selection",control.isAllowTextSelection());control.render(sandbox);assertFalse("Control must not allow text selection even after rendered",control.isAllowTextSelection());control.setAllowTextSelection(!0);assertTrue("Control must once again allow text selection",control.isAllowTextSelection())}function testIsVisible(){assertTrue("Controls must be visible by default",control.isVisible())}function testSetVisible(){assertFalse("setVisible(true) must return false if already visible",control.setVisible(!0));assertTrue("No events must have been dispatched",noEventsDispatched());assertTrue("setVisible(false) must return true if previously visible",control.setVisible(!1));assertEquals("One HIDE event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.HIDE));assertFalse("Control must no longer be visible",control.isVisible());assertTrue("setVisible(true) must return true if previously hidden",control.setVisible(!0));assertEquals("One SHOW event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.SHOW));assertTrue("Control must be visible",control.isVisible())}function testSetVisibleForRenderedControl(){control.render(sandbox);assertTrue("No events must have been dispatched during rendering",noEventsDispatched());assertFalse("setVisible(true) must return false if already visible",control.setVisible(!0));assertTrue("No events must have been dispatched",noEventsDispatched());assertTrue("Control's element must be visible","none"!=control.getElement().style.display);assertTrue("setVisible(false) must return true if previously visible",control.setVisible(!1));assertEquals("One HIDE event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.HIDE));assertFalse("Control must no longer be visible",control.isVisible());assertTrue("Control's element must be hidden","none"==control.getElement().style.display);assertTrue("setVisible(true) must return true if previously hidden",control.setVisible(!0));assertEquals("One SHOW event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.SHOW));assertTrue("Control must be visible",control.isVisible());assertTrue("Control's element must be visible","none"!=control.getElement().style.display)}function testSetVisibleForDisabledNonFocusableControl(){control.setEnabled(!1);control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.render(sandbox);assertTrue("Control must be visible",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));control.getKeyEventTarget().focus();assertEquals("Control must not have dispatched FOCUS",0,getEventCount(control,goog.ui.Component.EventType.FOCUS));assertFalse("Control must not have keyboard focus",control.isFocused());control.setVisible(!1);assertFalse("Control must be hidden",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));assertEquals("Control must have dispatched HIDE",1,getEventCount(control,goog.ui.Component.EventType.HIDE));assertEquals("Control must not have dispatched BLUR",0,getEventCount(control,goog.ui.Component.EventType.BLUR))}function testSetVisibleForDisabledFocusableControl(){control.setEnabled(!1);control.setSupportedState(goog.ui.Component.State.FOCUSED,!0);control.render(sandbox);assertTrue("Control must be visible",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));control.getKeyEventTarget().focus();assertEquals("Control must not have dispatched FOCUS",0,getEventCount(control,goog.ui.Component.EventType.FOCUS));assertFalse("Control must not have keyboard focus",control.isFocused());control.setVisible(!1);assertFalse("Control must be hidden",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));assertEquals("Control must have dispatched HIDE",1,getEventCount(control,goog.ui.Component.EventType.HIDE));assertEquals("Control must not have dispatched BLUR",0,getEventCount(control,goog.ui.Component.EventType.BLUR))}function testSetVisibleForEnabledNonFocusableControl(){control.setEnabled(!0);control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.render(sandbox);assertTrue("Control must be visible",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));if(testFocus){control.getKeyEventTarget().focus();assertEquals("Control must not have dispatched FOCUS",0,getEventCount(control,goog.ui.Component.EventType.FOCUS));assertFalse("Control must not have keyboard focus",control.isFocused());control.setVisible(!1);assertFalse("Control must be hidden",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));assertEquals("Control must have dispatched HIDE",1,getEventCount(control,goog.ui.Component.EventType.HIDE));assertEquals("Control must not have dispatched BLUR",0,getEventCount(control,goog.ui.Component.EventType.BLUR))}}function testSetVisibleForEnabledFocusableControl(){control.setEnabled(!0);control.setSupportedState(goog.ui.Component.State.FOCUSED,!0);control.render(sandbox);assertTrue("Control must be visible",control.isVisible());if(testFocus){expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()))}catch(e){expectedFailures.handleException(e)}control.getKeyEventTarget().focus();expectedFailures.expectFailureFor(goog.userAgent.IE);try{assertEquals("Control must have dispatched FOCUS",1,getEventCount(control,goog.ui.Component.EventType.FOCUS));assertTrue("Control must have keyboard focus",control.isFocused())}catch(e){expectedFailures.handleException(e)}control.setVisible(!1);assertFalse("Control must be hidden",control.isVisible());assertFalse("Control must not have a tab index",goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));assertEquals("Control must have dispatched HIDE",1,getEventCount(control,goog.ui.Component.EventType.HIDE));expectedFailures.expectFailureFor(goog.userAgent.IE);try{assertEquals("Control must have dispatched BLUR",1,getEventCount(control,goog.ui.Component.EventType.BLUR));assertFalse("Control must no longer have keyboard focus",control.isFocused())}catch(e){expectedFailures.handleException(e)}}}function testIsEnabled(){assertTrue("Controls must be enabled by default",control.isEnabled())}function testSetEnabled(){control.render(sandbox);control.setHighlighted(!0);control.setActive(!0);control.getKeyEventTarget().focus();resetEventCount();control.setEnabled(!0);assertTrue("No events must have been dispatched",noEventsDispatched());assertTrue("Control must be enabled",control.isEnabled());assertTrue("Control must be highlighted",control.isHighlighted());assertTrue("Control must be active",control.isActive());var elem=control.getElementStrict();assertTrue("Control element must not have aria-disabled",goog.string.isEmptyOrWhitespace(aria.getState(elem,State.DISABLED)));assertEquals("Control element must have a tabIndex of 0",0,goog.string.toNumber(elem.getAttribute("tabIndex")||""));if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}resetEventCount();control.setEnabled(!1);assertEquals("One DISABLE event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.DISABLE));assertFalse("Control must be disabled",control.isEnabled());assertFalse("Control must not be highlighted",control.isHighlighted());assertFalse("Control must not be active",control.isActive());assertFalse("Control must not be focused",control.isFocused());assertEquals("Control element must have aria-disabled true","true",aria.getState(control.getElementStrict(),State.DISABLED));assertNull("Control element must not have a tabIndex",control.getElement().getAttribute("tabIndex"));control.setEnabled(!0);control.exitDocument();var cssClass=goog.getCssName(goog.ui.ControlRenderer.CSS_CLASS,"disabled"),element=goog.dom.createDom(goog.dom.TagName.DIV,{tabIndex:0});element.className=cssClass;goog.dom.appendChild(sandbox,element);control.decorate(element);assertEquals("Control element must have aria-disabled true","true",aria.getState(control.getElementStrict(),State.DISABLED));assertNull("Control element must not have a tabIndex",control.getElement().getAttribute("tabIndex"));control.setEnabled(!0);elem=control.getElementStrict();assertEquals("Control element must have aria-disabled false","false",aria.getState(elem,State.DISABLED));assertEquals("Control element must have tabIndex 0",0,goog.string.toNumber(elem.getAttribute("tabIndex")||""))}function testSetStateWithDisabled(){control.render(sandbox);control.setHighlighted(!0);control.setActive(!0);control.getKeyEventTarget().focus();resetEventCount();control.setState(goog.ui.Component.State.DISABLED,!1);assertTrue("No events must have been dispatched",noEventsDispatched());assertTrue("Control must be enabled",control.isEnabled());assertTrue("Control must be highlighted",control.isHighlighted());assertTrue("Control must be active",control.isActive());assertTrue("Control element must not have aria-disabled",goog.string.isEmptyOrWhitespace(aria.getState(control.getElementStrict(),State.DISABLED)));assertEquals("Control element must have a tabIndex of 0",0,goog.string.toNumber(control.getElement().getAttribute("tabIndex")||""));if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}resetEventCount();control.setState(goog.ui.Component.State.DISABLED,!0);assertEquals("One DISABLE event must have been dispatched",1,getEventCount(control,goog.ui.Component.EventType.DISABLE));assertFalse("Control must be disabled",control.isEnabled());assertFalse("Control must not be highlighted",control.isHighlighted());assertFalse("Control must not be active",control.isActive());assertFalse("Control must not be focused",control.isFocused());assertEquals("Control element must have aria-disabled true","true",aria.getState(control.getElementStrict(),State.DISABLED));assertNull("Control element must not have a tabIndex",control.getElement().getAttribute("tabIndex"));control.setState(goog.ui.Component.State.DISABLED,!1);control.exitDocument();var cssClass=goog.getCssName(goog.ui.ControlRenderer.CSS_CLASS,"disabled"),element=goog.dom.createDom(goog.dom.TagName.DIV,{tabIndex:0});element.className=cssClass;goog.dom.appendChild(sandbox,element);control.decorate(element);assertEquals("Control element must have aria-disabled true","true",aria.getState(control.getElementStrict(),State.DISABLED));assertNull("Control element must not have a tabIndex",control.getElement().getAttribute("tabIndex"));control.setState(goog.ui.Component.State.DISABLED,!1);elem=control.getElementStrict();assertEquals("Control element must have aria-disabled false","false",aria.getState(elem,State.DISABLED));assertEquals("Control element must have tabIndex 0",0,goog.string.toNumber(elem.getAttribute("tabIndex")||""))}function testSetEnabledWithParent(){var child=new goog.ui.Control(null);child.setDispatchTransitionEvents(goog.ui.Component.State.ALL,!0);control.addChild(child,!0);control.setEnabled(!1);resetEventCount();assertFalse("Parent must be disabled",control.isEnabled());assertTrue("Child must be enabled",child.isEnabled());child.setEnabled(!1);assertTrue("No events must have been dispatched when child is disabled",noEventsDispatched());assertTrue("Child must still be enabled",child.isEnabled());resetEventCount();control.setEnabled(!0);assertEquals("One ENABLE event must have been dispatched by the parent",1,getEventCount(control,goog.ui.Component.EventType.ENABLE));assertTrue("Parent must be enabled",control.isEnabled());assertTrue("Child must still be enabled",child.isEnabled());resetEventCount();child.setEnabled(!1);assertEquals("One DISABLE event must have been dispatched by the child",1,getEventCount(child,goog.ui.Component.EventType.DISABLE));assertTrue("Parent must still be enabled",control.isEnabled());assertFalse("Child must now be disabled",child.isEnabled());resetEventCount();control.setEnabled(!1);assertEquals("One DISABLE event must have been dispatched by the parent",1,getEventCount(control,goog.ui.Component.EventType.DISABLE));assertFalse("Parent must now be disabled",control.isEnabled());assertFalse("Child must still be disabled",child.isEnabled());child.dispose()}function testIsHighlighted(){assertFalse("Controls must not be highlighted by default",control.isHighlighted())}function testSetHighlighted(){control.setSupportedState(goog.ui.Component.State.HOVER,!1);control.setHighlighted(!0);assertFalse("Control must not be highlighted, because it isn't "+"highlightable",control.isHighlighted());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.HOVER,!0);control.setHighlighted(!0);assertTrue("Control must be highlighted",control.isHighlighted());assertEquals("Control must have dispatched a HIGHLIGHT event",1,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT));control.setHighlighted(!0);assertTrue("Control must still be highlighted",control.isHighlighted());assertEquals("Control must not dispatch more HIGHLIGHT events",1,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT));control.setHighlighted(!1);assertFalse("Control must not be highlighted",control.isHighlighted());assertEquals("Control must have dispatched an UNHIGHLIGHT event",1,getEventCount(control,goog.ui.Component.EventType.UNHIGHLIGHT));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());control.setHighlighted(!0);assertTrue("Control must be highlighted, even when disabled",control.isHighlighted());assertEquals("Control must have dispatched another HIGHLIGHT event",2,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT))}function testIsActive(){assertFalse("Controls must not be active by default",control.isActive())}function testSetActive(){control.setSupportedState(goog.ui.Component.State.ACTIVE,!1);control.setActive(!0);assertFalse("Control must not be active, because it isn't activateable",control.isActive());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.ACTIVE,!0);control.setActive(!0);assertTrue("Control must be active",control.isActive());assertEquals("Control must have dispatched an ACTIVATE event",1,getEventCount(control,goog.ui.Component.EventType.ACTIVATE));control.setActive(!0);assertTrue("Control must still be active",control.isActive());assertEquals("Control must not dispatch more ACTIVATE events",1,getEventCount(control,goog.ui.Component.EventType.ACTIVATE));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());assertFalse("Control must not be active",control.isActive());assertEquals("Control must have dispatched a DEACTIVATE event",1,getEventCount(control,goog.ui.Component.EventType.DEACTIVATE))}function testDisposeOnAction(){goog.events.listen(control,goog.ui.Component.EventType.ACTION,function(e){control.dispose()});control.performActionInternal();control.setActive(!0);assertTrue("Control should have been disposed of",control.isDisposed())}function testIsSelected(){assertFalse("Controls must not be selected by default",control.isSelected())}function testSetSelected(){control.setSupportedState(goog.ui.Component.State.SELECTED,!1);control.setSelected(!0);assertFalse("Control must not be selected, because it isn't selectable",control.isSelected());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.SELECTED,!0);control.setSelected(!0);assertTrue("Control must be selected",control.isSelected());assertEquals("Control must have dispatched a SELECT event",1,getEventCount(control,goog.ui.Component.EventType.SELECT));control.setSelected(!0);assertTrue("Control must still be selected",control.isSelected());assertEquals("Control must not dispatch more SELECT events",1,getEventCount(control,goog.ui.Component.EventType.SELECT));control.setSelected(!1);assertFalse("Control must not be selected",control.isSelected());assertEquals("Control must have dispatched an UNSELECT event",1,getEventCount(control,goog.ui.Component.EventType.UNSELECT));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());control.setSelected(!0);assertTrue("Control must be selected, even when disabled",control.isSelected());assertEquals("Control must have dispatched another SELECT event",2,getEventCount(control,goog.ui.Component.EventType.SELECT))}function testIsChecked(){assertFalse("Controls must not be checked by default",control.isChecked())}function testSetChecked(){control.setSupportedState(goog.ui.Component.State.CHECKED,!1);control.setChecked(!0);assertFalse("Control must not be checked, because it isn't checkable",control.isChecked());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.CHECKED,!0);control.setChecked(!0);assertTrue("Control must be checked",control.isChecked());assertEquals("Control must have dispatched a CHECK event",1,getEventCount(control,goog.ui.Component.EventType.CHECK));control.setChecked(!0);assertTrue("Control must still be checked",control.isChecked());assertEquals("Control must not dispatch more CHECK events",1,getEventCount(control,goog.ui.Component.EventType.CHECK));control.setChecked(!1);assertFalse("Control must not be checked",control.isChecked());assertEquals("Control must have dispatched an UNCHECK event",1,getEventCount(control,goog.ui.Component.EventType.UNCHECK));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());control.setChecked(!0);assertTrue("Control must be checked, even when disabled",control.isChecked());assertEquals("Control must have dispatched another CHECK event",2,getEventCount(control,goog.ui.Component.EventType.CHECK))}function testIsFocused(){assertFalse("Controls must not be focused by default",control.isFocused())}function testSetFocused(){control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.setFocused(!0);assertFalse("Control must not be focused, because it isn't focusable",control.isFocused());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.FOCUSED,!0);control.setFocused(!0);assertTrue("Control must be focused",control.isFocused());assertEquals("Control must have dispatched a FOCUS event",1,getEventCount(control,goog.ui.Component.EventType.FOCUS));control.setFocused(!0);assertTrue("Control must still be focused",control.isFocused());assertEquals("Control must not dispatch more FOCUS events",1,getEventCount(control,goog.ui.Component.EventType.FOCUS));control.setFocused(!1);assertFalse("Control must not be focused",control.isFocused());assertEquals("Control must have dispatched an BLUR event",1,getEventCount(control,goog.ui.Component.EventType.BLUR));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());control.setFocused(!0);assertTrue("Control must be focused, even when disabled",control.isFocused());assertEquals("Control must have dispatched another FOCUS event",2,getEventCount(control,goog.ui.Component.EventType.FOCUS))}function testIsOpen(){assertFalse("Controls must not be open by default",control.isOpen())}function testSetOpen(){control.setSupportedState(goog.ui.Component.State.OPENED,!1);control.setOpen(!0);assertFalse("Control must not be opened, because it isn't openable",control.isOpen());assertTrue("Control must not have dispatched any events",noEventsDispatched());control.setSupportedState(goog.ui.Component.State.OPENED,!0);control.setOpen(!0);assertTrue("Control must be opened",control.isOpen());assertEquals("Control must have dispatched a OPEN event",1,getEventCount(control,goog.ui.Component.EventType.OPEN));control.setOpen(!0);assertTrue("Control must still be opened",control.isOpen());assertEquals("Control must not dispatch more OPEN events",1,getEventCount(control,goog.ui.Component.EventType.OPEN));control.setOpen(!1);assertFalse("Control must not be opened",control.isOpen());assertEquals("Control must have dispatched an CLOSE event",1,getEventCount(control,goog.ui.Component.EventType.CLOSE));control.setEnabled(!1);assertFalse("Control must be disabled",control.isEnabled());control.setOpen(!0);assertTrue("Control must be opened, even when disabled",control.isOpen());assertEquals("Control must have dispatched another OPEN event",2,getEventCount(control,goog.ui.Component.EventType.OPEN))}function testGetState(){assertEquals("Controls must be in the default state",0,control.getState())}function testHasState(){assertFalse("Control must not be disabled",control.hasState(goog.ui.Component.State.DISABLED));assertFalse("Control must not be in the HOVER state",control.hasState(goog.ui.Component.State.HOVER));assertFalse("Control must not be active",control.hasState(goog.ui.Component.State.ACTIVE));assertFalse("Control must not be selected",control.hasState(goog.ui.Component.State.SELECTED));assertFalse("Control must not be checked",control.hasState(goog.ui.Component.State.CHECKED));assertFalse("Control must not be focused",control.hasState(goog.ui.Component.State.FOCUSED));assertFalse("Control must not be open",control.hasState(goog.ui.Component.State.OPEN))}function testSetState(){control.createDom();control.setSupportedState(goog.ui.Component.State.ACTIVE,!1);assertFalse("Control must not be active",control.hasState(goog.ui.Component.State.ACTIVE));control.setState(goog.ui.Component.State.ACTIVE,!0);assertFalse("Control must still be inactive (because it doesn't "+"support the ACTIVE state)",control.hasState(goog.ui.Component.State.ACTIVE));control.setSupportedState(goog.ui.Component.State.ACTIVE,!0);control.setState(goog.ui.Component.State.ACTIVE,!0);assertTrue("Control must be active",control.hasState(goog.ui.Component.State.ACTIVE));assertTrue("Control must have the active CSS style",goog.dom.classlist.contains(control.getElement(),"goog-control-active"));control.setState(goog.ui.Component.State.ACTIVE,!0);assertTrue("Control must still be active",control.hasState(goog.ui.Component.State.ACTIVE));assertTrue("Control must still have the active CSS style",goog.dom.classlist.contains(control.getElement(),"goog-control-active"));assertTrue("No events must have been dispatched",noEventsDispatched())}function testSetStateInternal(){control.setStateInternal(0);assertEquals("State should be 0x00",0,control.getState());control.setStateInternal(23);assertEquals("State should be 0x17",23,control.getState())}function testIsSupportedState(){assertTrue("Control must support DISABLED",control.isSupportedState(goog.ui.Component.State.DISABLED));assertTrue("Control must support HOVER",control.isSupportedState(goog.ui.Component.State.HOVER));assertTrue("Control must support ACTIVE",control.isSupportedState(goog.ui.Component.State.ACTIVE));assertTrue("Control must support FOCUSED",control.isSupportedState(goog.ui.Component.State.FOCUSED));assertFalse("Control must no support SELECTED",control.isSupportedState(goog.ui.Component.State.SELECTED));assertFalse("Control must no support CHECKED",control.isSupportedState(goog.ui.Component.State.CHECKED));assertFalse("Control must no support OPENED",control.isSupportedState(goog.ui.Component.State.OPENED))}function testSetSupportedState(){control.setSupportedState(goog.ui.Component.State.HOVER,!0);assertTrue("Control must still support HOVER",control.isSupportedState(goog.ui.Component.State.HOVER));control.setSupportedState(goog.ui.Component.State.HOVER,!1);assertFalse("Control must no longer support HOVER",control.isSupportedState(goog.ui.Component.State.HOVER));control.setState(goog.ui.Component.State.ACTIVE,!0);control.setSupportedState(goog.ui.Component.State.ACTIVE,!1);assertFalse("Control must no longer support ACTIVE",control.isSupportedState(goog.ui.Component.State.ACTIVE));assertFalse("Control must no longer be in the ACTIVE state",control.hasState(goog.ui.Component.State.ACTIVE));control.render(sandbox);control.setSupportedState(goog.ui.Component.State.FOCUSED,!0);control.setState(goog.ui.Component.State.FOCUSED,!0);assertThrows("Must not be able to disable support for the FOCUSED "+"state for a control that's already in the document and focused",function(){control.setSupportedState(goog.ui.Component.State.FOCUSED,!1)});assertTrue("No events must have been dispatched",noEventsDispatched())}function testIsAutoState(){assertTrue("Control must have DISABLED as an auto-state",control.isAutoState(goog.ui.Component.State.DISABLED));assertTrue("Control must have HOVER as an auto-state",control.isAutoState(goog.ui.Component.State.HOVER));assertTrue("Control must have ACTIVE as an auto-state",control.isAutoState(goog.ui.Component.State.ACTIVE));assertTrue("Control must have FOCUSED as an auto-state",control.isAutoState(goog.ui.Component.State.FOCUSED));assertFalse("Control must not have SELECTED as an auto-state",control.isAutoState(goog.ui.Component.State.SELECTED));assertFalse("Control must not have CHECKED as an auto-state",control.isAutoState(goog.ui.Component.State.CHECKED));assertFalse("Control must not have OPENED as an auto-state",control.isAutoState(goog.ui.Component.State.OPENED));assertTrue("No events must have been dispatched",noEventsDispatched())}function testSetAutoStates(){control.setAutoStates(goog.ui.Component.State.HOVER,!1);assertFalse("Control must not have HOVER as an auto-state",control.isAutoState(goog.ui.Component.State.HOVER));control.setAutoStates(goog.ui.Component.State.ACTIVE|goog.ui.Component.State.FOCUSED,!1);assertFalse("Control must not have ACTIVE as an auto-state",control.isAutoState(goog.ui.Component.State.ACTIVE));assertFalse("Control must not have FOCUSED as an auto-state",control.isAutoState(goog.ui.Component.State.FOCUSED));control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.setAutoStates(goog.ui.Component.State.FOCUSED,!0);assertFalse("Control must not have FOCUSED as an auto-state if it no "+"longer supports FOCUSED",control.isAutoState(goog.ui.Component.State.FOCUSED));assertTrue("No events must have been dispatched",noEventsDispatched())}function testIsDispatchTransitionEvents(){assertTrue("Control must dispatch DISABLED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.DISABLED));assertTrue("Control must dispatch HOVER transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.HOVER));assertTrue("Control must dispatch ACTIVE transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.ACTIVE));assertTrue("Control must dispatch FOCUSED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.FOCUSED));assertFalse("Control must not dispatch SELECTED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.SELECTED));assertFalse("Control must not dispatch CHECKED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.CHECKED));assertFalse("Control must not dispatch OPENED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.OPENED));assertTrue("No events must have been dispatched",noEventsDispatched())}function testSetDispatchTransitionEvents(){control.setDispatchTransitionEvents(goog.ui.Component.State.HOVER,!1);assertFalse("Control must not dispatch HOVER transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.HOVER));control.setSupportedState(goog.ui.Component.State.SELECTED,!0);control.setDispatchTransitionEvents(goog.ui.Component.State.SELECTED,!0);assertTrue("Control must dispatch SELECTED transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.SELECTED));assertTrue("No events must have been dispatched",noEventsDispatched())}function testIsTransitionAllowed(){assertTrue("Control must support the HOVER state",control.isSupportedState(goog.ui.Component.State.HOVER));assertFalse("Control must not be in the HOVER state",control.hasState(goog.ui.Component.State.HOVER));assertTrue("Control must dispatch HOVER transition events",control.isDispatchTransitionEvents(goog.ui.Component.State.HOVER));assertTrue("Control must be allowed to transition to the HOVER state",control.isTransitionAllowed(goog.ui.Component.State.HOVER,!0));assertEquals("Control must have dispatched one HIGHLIGHT event",1,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT));assertFalse("Control must not be highlighted",control.hasState(goog.ui.Component.State.HOVER));control.setState(goog.ui.Component.State.HOVER,!0);control.setDispatchTransitionEvents(goog.ui.Component.State.HOVER,!1);assertTrue("Control must be allowed to transition from the HOVER state",control.isTransitionAllowed(goog.ui.Component.State.HOVER,!1));assertEquals("Control must not have dispatched any UNHIGHLIGHT events",0,getEventCount(control,goog.ui.Component.EventType.UNHIGHLIGHT));assertTrue("Control must still be highlighted",control.hasState(goog.ui.Component.State.HOVER));control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);resetEventCount();assertFalse("Control doesn't support the FOCUSED state",control.isSupportedState(goog.ui.Component.State.FOCUSED));assertFalse("Control must not be FOCUSED",control.hasState(goog.ui.Component.State.FOCUSED));assertFalse("Control must not be allowed to transition to the FOCUSED "+"state",control.isTransitionAllowed(goog.ui.Component.State.FOCUSED,!0));assertEquals("Control must not have dispatched any FOCUS events",0,getEventCount(control,goog.ui.Component.EventType.FOCUS));control.setEnabled(!1);resetEventCount();assertTrue("Control must support the DISABLED state",control.isSupportedState(goog.ui.Component.State.DISABLED));assertTrue("Control must be DISABLED",control.hasState(goog.ui.Component.State.DISABLED));assertFalse("Control must not be allowed to transition to the DISABLED "+"state, because it is already there",control.isTransitionAllowed(goog.ui.Component.State.DISABLED,!0));assertEquals("Control must not have dispatched any ENABLE events",0,getEventCount(control,goog.ui.Component.EventType.ENABLE))}function testHandleKeyEvent(){control.render();control.isVisible=control.isEnabled=function(){return!0};goog.testing.events.fireKeySequence(control.getKeyEventTarget(),goog.events.KeyCodes.A);assertEquals("Control must not have dispatched an ACTION event",0,getEventCount(control,goog.ui.Component.EventType.ACTION));goog.testing.events.fireKeySequence(control.getKeyEventTarget(),goog.events.KeyCodes.ENTER);assertEquals("Control must have dispatched an ACTION event",1,getEventCount(control,goog.ui.Component.EventType.ACTION))}function testPerformActionInternal(){assertFalse("Control must not be checked",control.isChecked());assertFalse("Control must not be selected",control.isSelected());assertFalse("Control must not be open",control.isOpen());control.performActionInternal();assertFalse("Control must not be checked",control.isChecked());assertFalse("Control must not be selected",control.isSelected());assertFalse("Control must not be open",control.isOpen());assertEquals("Control must have dispatched an ACTION event",1,getEventCount(control,goog.ui.Component.EventType.ACTION));control.setSupportedState(goog.ui.Component.State.CHECKED,!0);control.setSupportedState(goog.ui.Component.State.SELECTED,!0);control.setSupportedState(goog.ui.Component.State.OPENED,!0);control.performActionInternal();assertTrue("Control must be checked",control.isChecked());assertTrue("Control must be selected",control.isSelected());assertTrue("Control must be open",control.isOpen());assertEquals("Control must have dispatched a CHECK event",1,getEventCount(control,goog.ui.Component.EventType.CHECK));assertEquals("Control must have dispatched a SELECT event",1,getEventCount(control,goog.ui.Component.EventType.SELECT));assertEquals("Control must have dispatched a OPEN event",1,getEventCount(control,goog.ui.Component.EventType.OPEN));assertEquals("Control must have dispatched another ACTION event",2,getEventCount(control,goog.ui.Component.EventType.ACTION));control.performActionInternal();assertFalse("Control must not be checked",control.isChecked());assertTrue("Control must be selected",control.isSelected());assertFalse("Control must not be open",control.isOpen());assertEquals("Control must have dispatched an UNCHECK event",1,getEventCount(control,goog.ui.Component.EventType.UNCHECK));assertEquals("Control must not have dispatched an UNSELECT event",0,getEventCount(control,goog.ui.Component.EventType.UNSELECT));assertEquals("Control must have dispatched a CLOSE event",1,getEventCount(control,goog.ui.Component.EventType.CLOSE));assertEquals("Control must have dispatched another ACTION event",3,getEventCount(control,goog.ui.Component.EventType.ACTION))}function testHandleMouseOver(){control.setContent(goog.dom.createDom(goog.dom.TagName.SPAN,{id:"caption"},"Hello"));control.render(sandbox);var element=control.getElement(),caption=goog.dom.getElement("caption");assertTrue("Caption must be contained within the control",goog.dom.contains(element,caption));assertTrue("Control must be enabled",control.isEnabled());assertTrue("HOVER must be an auto-state",control.isAutoState(goog.ui.Component.State.HOVER));assertFalse("Control must not start out highlighted",control.isHighlighted());goog.testing.events.fireMouseOverEvent(element,caption);assertTrue("No events must have been dispatched for internal mouse move",noEventsDispatched());assertFalse("Control must not be highlighted for internal mouse move",control.isHighlighted());resetEventCount();var key=goog.events.listen(control,goog.ui.Component.EventType.ENTER,function(e){e.preventDefault()});goog.testing.events.fireMouseOverEvent(element,sandbox);assertEquals("Control must have dispatched 1 ENTER event",1,getEventCount(control,goog.ui.Component.EventType.ENTER));assertFalse("Control must not be highlighted if ENTER is canceled",control.isHighlighted());goog.events.unlistenByKey(key);resetEventCount();control.setEnabled(!1);goog.testing.events.fireMouseOverEvent(element,sandbox);assertEquals("Control must dispatch ENTER event on mouseover even if "+"disabled",1,getEventCount(control,goog.ui.Component.EventType.ENTER));assertFalse("Control must not be highlighted if it is disabled",control.isHighlighted());control.setEnabled(!0);resetEventCount();control.setAutoStates(goog.ui.Component.State.HOVER,!1);goog.testing.events.fireMouseOverEvent(element,sandbox);assertEquals("Control must dispatch ENTER event on mouseover even if "+"HOVER is not an auto-state",1,getEventCount(control,goog.ui.Component.EventType.ENTER));assertFalse("Control must not be highlighted if HOVER isn't an auto-"+"state",control.isHighlighted());control.setAutoStates(goog.ui.Component.State.HOVER,!0);resetEventCount();goog.testing.events.fireMouseOverEvent(element,sandbox);assertEquals("Control must dispatch ENTER event on mouseover",1,getEventCount(control,goog.ui.Component.EventType.ENTER));assertEquals("Control must dispatch HIGHLIGHT event on mouseover",1,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT));assertTrue("Control must be highlighted",control.isHighlighted());resetEventCount();control.setHighlighted(!1);goog.testing.events.fireMouseOverEvent(element,null);assertEquals("Control must dispatch ENTER event on mouseover",1,getEventCount(control,goog.ui.Component.EventType.ENTER));assertEquals("Control must dispatch HIGHLIGHT event on mouseover",1,getEventCount(control,goog.ui.Component.EventType.HIGHLIGHT));assertTrue("Control must be highlighted",control.isHighlighted());resetEventCount()}function testHandleMouseOut(){control.setContent(goog.dom.createDom(goog.dom.TagName.SPAN,{id:"caption"},"Hello"));control.setHighlighted(!0);control.setActive(!0);resetEventCount();control.render(sandbox);var element=control.getElement(),caption=goog.dom.getElement("caption");assertTrue("Caption must be contained within the control",goog.dom.contains(element,caption));assertTrue("Control must be enabled",control.isEnabled());assertTrue("HOVER must be an auto-state",control.isAutoState(goog.ui.Component.State.HOVER));assertTrue("ACTIVE must be an auto-state",control.isAutoState(goog.ui.Component.State.ACTIVE));assertTrue("Control must start out highlighted",control.isHighlighted());assertTrue("Control must start out active",control.isActive());goog.testing.events.fireMouseOutEvent(element,caption);assertTrue("No events must have been dispatched for internal mouse move",noEventsDispatched());assertTrue("Control must not be un-highlighted for internal mouse move",control.isHighlighted());assertTrue("Control must not be deactivated for internal mouse move",control.isActive());resetEventCount();var key=goog.events.listen(control,goog.ui.Component.EventType.LEAVE,function(e){e.preventDefault()});goog.testing.events.fireMouseOutEvent(element,sandbox);assertEquals("Control must have dispatched 1 LEAVE event",1,getEventCount(control,goog.ui.Component.EventType.LEAVE));assertTrue("Control must not be un-highlighted if LEAVE is canceled",control.isHighlighted());assertTrue("Control must not be deactivated if LEAVE is canceled",control.isActive());goog.events.unlistenByKey(key);resetEventCount();control.setAutoStates(goog.ui.Component.State.ACTIVE,!1);goog.testing.events.fireMouseOutEvent(element,sandbox);assertEquals("Control must dispatch LEAVE event on mouseout even if "+"ACTIVE is not an auto-state",1,getEventCount(control,goog.ui.Component.EventType.LEAVE));assertTrue("Control must not be deactivated if ACTIVE isn't an auto-"+"state",control.isActive());assertFalse("Control must be un-highlighted even if ACTIVE isn't an "+"auto-state",control.isHighlighted());control.setAutoStates(goog.ui.Component.State.ACTIVE,!0);control.setHighlighted(!0);resetEventCount();control.setAutoStates(goog.ui.Component.State.HOVER,!1);goog.testing.events.fireMouseOutEvent(element,sandbox);assertEquals("Control must dispatch LEAVE event on mouseout even if "+"HOVER is not an auto-state",1,getEventCount(control,goog.ui.Component.EventType.LEAVE));assertFalse("Control must be deactivated even if HOVER isn't an auto-"+"state",control.isActive());assertTrue("Control must not be un-highlighted if HOVER isn't an auto-"+"state",control.isHighlighted());control.setAutoStates(goog.ui.Component.State.HOVER,!0);control.setActive(!0);resetEventCount();goog.testing.events.fireMouseOutEvent(element,sandbox);assertEquals("Control must dispatch LEAVE event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.LEAVE));assertEquals("Control must dispatch DEACTIVATE event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.DEACTIVATE));assertEquals("Control must dispatch UNHIGHLIGHT event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.UNHIGHLIGHT));assertFalse("Control must be deactivated",control.isActive());assertFalse("Control must be unhighlighted",control.isHighlighted());resetEventCount();control.setActive(!0);control.setHighlighted(!0);goog.testing.events.fireMouseOutEvent(element,null);assertEquals("Control must dispatch LEAVE event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.LEAVE));assertEquals("Control must dispatch DEACTIVATE event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.DEACTIVATE));assertEquals("Control must dispatch UNHIGHLIGHT event on mouseout",1,getEventCount(control,goog.ui.Component.EventType.UNHIGHLIGHT));assertFalse("Control must be deactivated",control.isActive());assertFalse("Control must be unhighlighted",control.isHighlighted());resetEventCount()}function testIsMouseEventWithinElement(){var child=goog.dom.createElement(goog.dom.TagName.DIV),parent=goog.dom.createDom(goog.dom.TagName.DIV,null,child),notChild=goog.dom.createElement(goog.dom.TagName.DIV),event=new goog.testing.events.Event("mouseout");event.relatedTarget=child;assertTrue("Event is within element",goog.ui.Control.isMouseEventWithinElement_(event,parent));var event=new goog.testing.events.Event("mouseout");event.relatedTarget=notChild;assertFalse("Event is not within element",goog.ui.Control.isMouseEventWithinElement_(event,parent))}function testHandleMouseDown(){control.render(sandbox);assertFalse("preventDefault() must have been called for control that "+"doesn't support text selection",fireMouseDownAndFocus(control.getElement()));assertTrue("Control must be highlighted",control.isHighlighted());assertTrue("Control must be active",control.isActive());if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}}function testHandleMouseDownForDisabledControl(){control.setEnabled(!1);control.render(sandbox);assertFalse("preventDefault() must have been called for control that "+"doesn't support text selection",fireMouseDownAndFocus(control.getElement()));assertFalse("Control must not be highlighted",control.isHighlighted());assertFalse("Control must not be active",control.isActive());if(testFocus){assertFalse("Control must not be focused",control.isFocused())}}function testHandleMouseDownForNoHoverAutoState(){control.setAutoStates(goog.ui.Component.State.HOVER,!1);control.render(sandbox);assertFalse("preventDefault() must have been called for control that "+"doesn't support text selection",fireMouseDownAndFocus(control.getElement()));assertFalse("Control must not be highlighted",control.isHighlighted());assertTrue("Control must be active",control.isActive());if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}}function testHandleMouseDownForRightMouseButton(){control.render(sandbox);assertTrue("preventDefault() must not have been called for right "+"mouse button",fireMouseDownAndFocus(control.getElement(),goog.events.BrowserEvent.MouseButton.RIGHT));assertTrue("Control must be highlighted",control.isHighlighted());assertFalse("Control must not be active",control.isActive());if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}}function testHandleMouseDownForNoActiveAutoState(){control.setAutoStates(goog.ui.Component.State.ACTIVE,!1);control.render(sandbox);assertFalse("preventDefault() must have been called for control that "+"doesn't support text selection",fireMouseDownAndFocus(control.getElement()));assertTrue("Control must be highlighted",control.isHighlighted());assertFalse("Control must not be active",control.isActive());if(testFocus){expectedFailures.expectFailureFor(goog.userAgent.IE);expectedFailures.expectFailureFor(isMacSafari3());try{assertTrue("Control must be focused",control.isFocused())}catch(e){expectedFailures.handleException(e)}}}function testHandleMouseDownForNonFocusableControl(){control.setSupportedState(goog.ui.Component.State.FOCUSED,!1);control.render(sandbox);assertFalse("preventDefault() must have been called for control that "+"doesn't support text selection",fireMouseDownAndFocus(control.getElement()));assertTrue("Control must be highlighted",control.isHighlighted());assertTrue("Control must be active",control.isActive());assertFalse("Control must not be focused",control.isFocused())}function testHandleMouseUp(){control.setActive(!0);var actionPerformed=!1;control.performActionInternal=function(){actionPerformed=!0;return!0};resetEventCount();control.render(sandbox);var element=control.getElement();assertTrue("Control must be enabled",control.isEnabled());assertTrue("HOVER must be an auto-state",control.isAutoState(goog.ui.Component.State.HOVER));assertTrue("ACTIVE must be an auto-state",control.isAutoState(goog.ui.Component.State.ACTIVE));assertFalse("Control must not start out highlighted",control.isHighlighted());assertTrue("Control must start out active",control.isActive());control.setEnabled(!1);goog.testing.events.fireMouseUpEvent(element);assertFalse("Disabled control must not highlight on mouseup",control.isHighlighted());assertFalse("No action must have been performed",actionPerformed);control.setActive(!0);control.setEnabled(!0);control.setAutoStates(goog.ui.Component.State.HOVER,!1);goog.testing.events.fireMouseUpEvent(element);assertFalse("Control must not highlight on mouseup if HOVER isn't an "+"auto-state",control.isHighlighted());assertTrue("Action must have been performed even if HOVER isn't an "+"auto-state",actionPerformed);assertFalse("Control must have been deactivated on mouseup even if "+"HOVER isn't an auto-state",control.isActive());actionPerformed=!1;control.setActive(!0);control.setAutoStates(goog.ui.Component.State.HOVER,!0);control.setActive(!1);goog.testing.events.fireMouseUpEvent(element);assertTrue("Control must highlight on mouseup, even if inactive",control.isHighlighted());assertFalse("No action must have been performed if control is inactive",actionPerformed);assertFalse("Inactive control must remain inactive after mouseup",control.isActive());control.setHighlighted(!1);control.setActive(!0);control.performActionInternal=function(){actionPerformed=!0;return!1};goog.testing.events.fireMouseUpEvent(element);assertTrue("Control must highlight on mouseup, even if no action is "+"performed",control.isHighlighted());assertTrue("performActionInternal must have been called",actionPerformed);assertTrue("Control must not deactivate if performActionInternal "+"returns false",control.isActive());control.setHighlighted(!1);actionPerformed=!1;control.performActionInternal=function(){actionPerformed=!0;return!0};control.setAutoStates(goog.ui.Component.State.ACTIVE,!1);goog.testing.events.fireMouseUpEvent(element);assertTrue("Control must highlight on mouseup even if ACTIVE isn't an "+"auto-state",control.isHighlighted());assertTrue("Action must have been performed even if ACTIVE isn't an "+"auto-state",actionPerformed);assertTrue("Control must not have been deactivated on mouseup if "+"ACTIVE isn't an auto-state",control.isActive());actionPerformed=!1;control.setHighlighted(!1);control.setAutoStates(goog.ui.Component.State.ACTIVE,!0);goog.testing.events.fireMouseUpEvent(element);assertTrue("Control must highlight on mouseup",control.isHighlighted());assertTrue("Action must have been performed",actionPerformed);assertFalse("Control must have been deactivated",control.isActive())}function testDefaultConstructor(){var control=new goog.ui.Control;assertNull(control.getContent())}function assertClickSequenceFires(msg){var actionCount=getEventCount(control,goog.ui.Component.EventType.ACTION);goog.testing.events.fireClickSequence(control.getKeyEventTarget());assertEquals(msg,actionCount+1,getEventCount(control,goog.ui.Component.EventType.ACTION))}function assertIsolatedClickFires(msg){var actionCount=getEventCount(control,goog.ui.Component.EventType.ACTION);goog.testing.events.fireClickEvent(control.getKeyEventTarget());assertEquals(msg,actionCount+1,getEventCount(control,goog.ui.Component.EventType.ACTION))}function assertIsolatedClickDoesNotFire(msg){var actionCount=getEventCount(control,goog.ui.Component.EventType.ACTION);goog.testing.events.fireClickEvent(control.getKeyEventTarget());assertEquals(msg,actionCount,getEventCount(control,goog.ui.Component.EventType.ACTION))}function testIeMouseEventSequenceSimulator(){control.render(sandbox);assertClickSequenceFires("ACTION event expected after a click sequence");assertClickSequenceFires("ACTION event expected after a second consecutive click sequence");if(goog.userAgent.IE){if(goog.userAgent.isVersionOrHigher(9)){assertIsolatedClickFires("ACTION event expected after an isolated click immediately "+"following a click sequence");assertIsolatedClickFires("ACTION event expected after second consecutive isolated click")}else{goog.testing.events.fireClickEvent(control.getKeyEventTarget())}}else{assertIsolatedClickDoesNotFire("No ACTION event expected after an isolated click immediately "+"following a click sequence");assertIsolatedClickDoesNotFire("No ACTION event expected after second consecutive isolated click")}assertClickSequenceFires("ACTION event expected after click sequence immediately following "+"an isolated click ")}function testIeMouseEventSequenceSimulatorStrictMode(){if(!document.createEvent){return}control.render(sandbox);var actionCount=getEventCount(control,goog.ui.Component.EventType.ACTION),e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null);control.getElementStrict().dispatchEvent(e);if(goog.userAgent.IE){assertEquals("ACTION event expected after an isolated click",actionCount+1,getEventCount(control,goog.ui.Component.EventType.ACTION))}else{assertEquals("No ACTION event expected after an isolated click",actionCount,getEventCount(control,goog.ui.Component.EventType.ACTION))}}