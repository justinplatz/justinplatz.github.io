goog.provide("goog.crypt.Cbc");goog.require("goog.array");goog.require("goog.asserts");goog.require("goog.crypt");goog.crypt.Cbc=function(cipher){this.cipher_=cipher};goog.crypt.Cbc.prototype.encrypt=function(plainText,initialVector){goog.asserts.assert(0==plainText.length%this.cipher_.BLOCK_SIZE,"Data's length must be multiple of block size.");goog.asserts.assert(initialVector.length==this.cipher_.BLOCK_SIZE,"Initial vector must be size of one block.");for(var cipherText=[],vector=initialVector,blockStartIndex=0;blockStartIndex<plainText.length;blockStartIndex+=this.cipher_.BLOCK_SIZE){var plainTextBlock=goog.array.slice(plainText,blockStartIndex,blockStartIndex+this.cipher_.BLOCK_SIZE),input=goog.crypt.xorByteArray(plainTextBlock,vector),resultBlock=this.cipher_.encrypt(input);goog.array.extend(cipherText,resultBlock);vector=resultBlock}return cipherText};goog.crypt.Cbc.prototype.decrypt=function(cipherText,initialVector){goog.asserts.assert(0==cipherText.length%this.cipher_.BLOCK_SIZE,"Data's length must be multiple of block size.");goog.asserts.assert(initialVector.length==this.cipher_.BLOCK_SIZE,"Initial vector must be size of one block.");var plainText=[],blockStartIndex=0,vector=initialVector;while(blockStartIndex<cipherText.length){var cipherTextBlock=goog.array.slice(cipherText,blockStartIndex,blockStartIndex+this.cipher_.BLOCK_SIZE),resultBlock=this.cipher_.decrypt(cipherTextBlock),plainTextBlock=goog.crypt.xorByteArray(vector,resultBlock);goog.array.extend(plainText,plainTextBlock);vector=cipherTextBlock;blockStartIndex+=this.cipher_.BLOCK_SIZE}return plainText};