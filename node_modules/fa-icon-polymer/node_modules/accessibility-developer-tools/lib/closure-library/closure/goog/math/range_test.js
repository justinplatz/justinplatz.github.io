goog.provide("goog.math.RangeTest");goog.setTestOnly("goog.math.RangeTest");goog.require("goog.math.Range");goog.require("goog.testing.jsunit");function assertRangesEqual(expected,actual){if(!goog.math.Range.equals(expected,actual)){assertEquals(expected,actual)}}function createRange(a){return a?new goog.math.Range(a[0],a[1]):null}function testFromPair(){var range=goog.math.Range.fromPair([1,2]);assertEquals(1,range.start);assertEquals(2,range.end);range=goog.math.Range.fromPair([2,1]);assertEquals(1,range.start);assertEquals(2,range.end)}function testRangeIntersection(){for(var tests=[[[1,2],[3,4],null],[[1,3],[2,4],[2,3]],[[1,4],[2,3],[2,3]],[[-1,2],[-1,2],[-1,2]],[[1,2],[2,3],[2,2]],[[1,1],[1,1],[1,1]]],i=0;i<tests.length;++i){var t=tests[i],r0=createRange(t[0]),r1=createRange(t[1]),expected=createRange(t[2]);assertRangesEqual(expected,goog.math.Range.intersection(r0,r1));assertRangesEqual(expected,goog.math.Range.intersection(r1,r0));assertEquals(null!=expected,goog.math.Range.hasIntersection(r0,r1));assertEquals(null!=expected,goog.math.Range.hasIntersection(r1,r0))}}function testBoundingRange(){for(var tests=[[[1,2],[3,4],[1,4]],[[1,3],[2,4],[1,4]],[[1,4],[2,3],[1,4]],[[-1,2],[-1,2],[-1,2]],[[1,2],[2,3],[1,3]],[[1,1],[1,1],[1,1]]],i=0;i<tests.length;++i){var t=tests[i],r0=createRange(t[0]),r1=createRange(t[1]),expected=createRange(t[2]);assertRangesEqual(expected,goog.math.Range.boundingRange(r0,r1));assertRangesEqual(expected,goog.math.Range.boundingRange(r1,r0))}}function testRangeContains(){for(var tests=[[[0,4],[2,1],!0],[[-4,-1],[-2,-3],!0],[[1,3],[2,4],!1],[[-1,0],[0,1],!1],[[0,2],[3,5],!1]],i=0;i<tests.length;++i){var t=tests[i],r0=createRange(t[0]),r1=createRange(t[1]),expected=t[2];assertEquals(expected,goog.math.Range.contains(r0,r1))}}function testRangeClone(){var r=new goog.math.Range(5.6,-3.4);assertRangesEqual(r,r.clone())}function testGetLength(){assertEquals(2,new goog.math.Range(1,3).getLength());assertEquals(2,new goog.math.Range(3,1).getLength())}function testRangeContainsPoint(){var r=new goog.math.Range(0,1);assert(goog.math.Range.containsPoint(r,0));assert(goog.math.Range.containsPoint(r,1));assertFalse(goog.math.Range.containsPoint(r,-1));assertFalse(goog.math.Range.containsPoint(r,2))}function testIncludePoint(){var r=new goog.math.Range(0,2);r.includePoint(0);assertObjectEquals(new goog.math.Range(0,2),r);r.includePoint(1);assertObjectEquals(new goog.math.Range(0,2),r);r.includePoint(2);assertObjectEquals(new goog.math.Range(0,2),r);r.includePoint(-1);assertObjectEquals(new goog.math.Range(-1,2),r);r.includePoint(3);assertObjectEquals(new goog.math.Range(-1,3),r)}function testIncludeRange(){var r=new goog.math.Range(0,4);r.includeRange(r);assertObjectEquals(new goog.math.Range(0,4),r);r.includeRange(new goog.math.Range(1,3));assertObjectEquals(new goog.math.Range(0,4),r);r.includeRange(new goog.math.Range(-1,2));assertObjectEquals(new goog.math.Range(-1,4),r);r.includeRange(new goog.math.Range(2,5));assertObjectEquals(new goog.math.Range(-1,5),r);r.includeRange(new goog.math.Range(-2,6));assertObjectEquals(new goog.math.Range(-2,6),r)}