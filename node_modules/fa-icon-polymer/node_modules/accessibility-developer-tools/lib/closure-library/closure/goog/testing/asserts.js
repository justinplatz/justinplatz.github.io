goog.setTestOnly("goog.testing.JsUnitException");goog.provide("goog.testing.JsUnitException");goog.provide("goog.testing.asserts");goog.require("goog.testing.stacktrace");var DOUBLE_EQUALITY_PREDICATE=function(var1,var2){return var1==var2},JSUNIT_UNDEFINED_VALUE=void 0,TO_STRING_EQUALITY_PREDICATE=function(var1,var2){return var1.toString()===var2.toString()},PredicateFunctionType,PRIMITIVE_EQUALITY_PREDICATES={String:DOUBLE_EQUALITY_PREDICATE,Number:DOUBLE_EQUALITY_PREDICATE,Boolean:DOUBLE_EQUALITY_PREDICATE,Date:function(date1,date2){return date1.getTime()==date2.getTime()},RegExp:TO_STRING_EQUALITY_PREDICATE,Function:TO_STRING_EQUALITY_PREDICATE};goog.testing.asserts.numberRoughEqualityPredicate_=function(var1,var2,tolerance){return Math.abs(var1-var2)<=tolerance};goog.testing.asserts.primitiveRoughEqualityPredicates_={Number:goog.testing.asserts.numberRoughEqualityPredicate_};var _trueTypeOf=function(something){var result=typeof something;try{switch(result){case"string":break;case"boolean":break;case"number":break;case"object":if(null==something){result="null";break}case"function":switch(something.constructor){case new String("").constructor:result="String";break;case new Boolean(!0).constructor:result="Boolean";break;case new Number(0).constructor:result="Number";break;case[].constructor:result="Array";break;case /(?:)/.constructor:result="RegExp";break;case new Date().constructor:result="Date";break;case Function:result="Function";break;default:var m=something.constructor.toString().match(/function\s*([^( ]+)\(/);if(m){result=m[1]}else{break}}break;}}catch(e){}finally{result=result.substr(0,1).toUpperCase()+result.substr(1)}return result},_displayStringForValue=function(aVar){var result;try{result="<"+(aVar+"")+">"}catch(ex){result="<toString failed: "+ex.message+">"}if(!(null===aVar||aVar===JSUNIT_UNDEFINED_VALUE)){result+=" ("+_trueTypeOf(aVar)+")"}return result},fail=function(failureMessage){goog.testing.asserts.raiseException("Call to fail()",failureMessage)},argumentsIncludeComments=function(expectedNumberOfNonCommentArgs,args){return args.length==expectedNumberOfNonCommentArgs+1},commentArg=function(expectedNumberOfNonCommentArgs,args){if(argumentsIncludeComments(expectedNumberOfNonCommentArgs,args)){return args[0]}return null},nonCommentArg=function(desiredNonCommentArgIndex,expectedNumberOfNonCommentArgs,args){return argumentsIncludeComments(expectedNumberOfNonCommentArgs,args)?args[desiredNonCommentArgIndex]:args[desiredNonCommentArgIndex-1]},_validateArguments=function(expectedNumberOfNonCommentArgs,args){var valid=args.length==expectedNumberOfNonCommentArgs||args.length==expectedNumberOfNonCommentArgs+1&&goog.isString(args[0]);_assert(null,valid,"Incorrect arguments passed to assert function")},_getCurrentTestCase=function(){var testRunner=goog.global.G_testRunner;return testRunner?testRunner.testCase:null},_assert=function(comment,booleanValue,failureMessage){if(!booleanValue){goog.testing.asserts.raiseException(comment,failureMessage)}};goog.testing.asserts.getDefaultErrorMsg_=function(expected,actual){var _Mathmin=Math.min,msg="Expected "+_displayStringForValue(expected)+" but was "+_displayStringForValue(actual);if("string"==typeof expected&&"string"==typeof actual){var limit=_Mathmin(expected.length,actual.length),commonPrefix=0;while(commonPrefix<limit&&expected.charAt(commonPrefix)==actual.charAt(commonPrefix)){commonPrefix++}var commonSuffix=0;while(commonSuffix<limit&&expected.charAt(expected.length-commonSuffix-1)==actual.charAt(actual.length-commonSuffix-1)){commonSuffix++}if(commonPrefix+commonSuffix>limit){commonSuffix=0}if(2<commonPrefix||2<commonSuffix){var printString=function(str){var startIndex=Math.max(0,commonPrefix-2),endIndex=_Mathmin(str.length,str.length-(commonSuffix-2));return(0<startIndex?"...":"")+str.substring(startIndex,endIndex)+(endIndex<str.length?"...":"")};msg+="\nDifference was at position "+commonPrefix+". Expected ["+printString(expected)+"] vs. actual ["+printString(actual)+"]"}}return msg};var assert=function(a,opt_b){_validateArguments(1,arguments);var comment=commentArg(1,arguments),booleanValue=nonCommentArg(1,1,arguments);_assert(comment,goog.isBoolean(booleanValue),"Bad argument to assert(boolean)");_assert(comment,booleanValue,"Call to assert(boolean) with false")},assertThrows=function(a,opt_b){_validateArguments(1,arguments);var func=nonCommentArg(1,1,arguments),comment=commentArg(1,arguments);_assert(comment,"function"==typeof func,"Argument passed to assertThrows is not a function");try{func()}catch(e){if(e&&goog.isString(e.stacktrace)&&goog.isString(e.message)){var startIndex=e.message.length-e.stacktrace.length;if(e.message.indexOf(e.stacktrace,startIndex)==startIndex){e.message=e.message.substr(0,startIndex-14)}}var testCase=_getCurrentTestCase();if(e&&e.isJsUnitException&&testCase&&testCase.failOnUnreportedAsserts){goog.testing.asserts.raiseException(comment,"Function passed to assertThrows caught a JsUnitException (usually "+"from an assert or call to fail()). If this is expected, use "+"assertThrowsJsUnitException instead.")}return e}goog.testing.asserts.raiseException(comment,"No exception thrown from function passed to assertThrows")},assertNotThrows=function(a,opt_b){_validateArguments(1,arguments);var comment=commentArg(1,arguments),func=nonCommentArg(1,1,arguments);_assert(comment,"function"==typeof func,"Argument passed to assertNotThrows is not a function");try{return func()}catch(e){comment=comment?comment+"\n":"";comment+="A non expected exception was thrown from function passed to "+"assertNotThrows";var stackTrace=e.stack||e.stacktrace||e.toString();goog.testing.asserts.raiseException(comment,stackTrace)}},assertThrowsJsUnitException=function(callback,opt_expectedMessage){try{goog.testing.asserts.callWithoutLogging(callback)}catch(e){var testCase=_getCurrentTestCase();if(testCase){testCase.invalidateAssertionException(e)}else{goog.global.console.error("Failed to remove expected exception: no test case is installed.")}if(!e.isJsUnitException){fail("Expected a JsUnitException")}if("undefined"!=typeof opt_expectedMessage&&e.message!=opt_expectedMessage){fail("Expected message ["+opt_expectedMessage+"] but got ["+e.message+"]")}return e}var msg="Expected a failure";if("undefined"!=typeof opt_expectedMessage){msg+=": "+opt_expectedMessage}throw new goog.testing.JsUnitException(msg)},assertTrue=function(a,opt_b){_validateArguments(1,arguments);var comment=commentArg(1,arguments),booleanValue=nonCommentArg(1,1,arguments);_assert(comment,goog.isBoolean(booleanValue),"Bad argument to assertTrue(boolean)");_assert(comment,booleanValue,"Call to assertTrue(boolean) with false")},assertFalse=function(a,opt_b){_validateArguments(1,arguments);var comment=commentArg(1,arguments),booleanValue=nonCommentArg(1,1,arguments);_assert(comment,goog.isBoolean(booleanValue),"Bad argument to assertFalse(boolean)");_assert(comment,!booleanValue,"Call to assertFalse(boolean) with true")},assertEquals=function(a,b,opt_c){_validateArguments(2,arguments);var var1=nonCommentArg(1,2,arguments),var2=nonCommentArg(2,2,arguments);_assert(commentArg(2,arguments),var1===var2,goog.testing.asserts.getDefaultErrorMsg_(var1,var2))},assertNotEquals=function(a,b,opt_c){_validateArguments(2,arguments);var var1=nonCommentArg(1,2,arguments),var2=nonCommentArg(2,2,arguments);_assert(commentArg(2,arguments),var1!==var2,"Expected not to be "+_displayStringForValue(var2))},assertNull=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),null===aVar,goog.testing.asserts.getDefaultErrorMsg_(null,aVar))},assertNotNull=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),null!==aVar,"Expected not to be "+_displayStringForValue(null))},assertUndefined=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),aVar===JSUNIT_UNDEFINED_VALUE,goog.testing.asserts.getDefaultErrorMsg_(JSUNIT_UNDEFINED_VALUE,aVar))},assertNotUndefined=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),aVar!==JSUNIT_UNDEFINED_VALUE,"Expected not to be "+_displayStringForValue(JSUNIT_UNDEFINED_VALUE))},assertNotNullNorUndefined=function(a,opt_b){_validateArguments(1,arguments);assertNotNull.apply(null,arguments);assertNotUndefined.apply(null,arguments)},assertNonEmptyString=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),aVar!==JSUNIT_UNDEFINED_VALUE&&null!==aVar&&"string"==typeof aVar&&""!==aVar,"Expected non-empty string but was "+_displayStringForValue(aVar))},assertNaN=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),isNaN(aVar),"Expected NaN")},assertNotNaN=function(a,opt_b){_validateArguments(1,arguments);var aVar=nonCommentArg(1,1,arguments);_assert(commentArg(1,arguments),!isNaN(aVar),"Expected not NaN")};goog.testing.asserts.callWithoutLogging=function(fn){var testRunner=goog.global.G_testRunner,oldLogTestFailure=testRunner.logTestFailure;try{testRunner.logTestFailure=void 0;fn()}finally{testRunner.logTestFailure=oldLogTestFailure}};goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS=null;goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL="";goog.testing.asserts.findDifferences=function(expected,actual,opt_equalityPredicate){var failures=[],seen1=[],seen2=[];function innerAssertWithCycleCheck(var1,var2,path){for(var i=0;i<seen1.length;++i){var match1=seen1[i]===var1,match2=seen2[i]===var2;if(match1||match2){if(!match1||!match2){failures.push("Asymmetric cycle detected at "+path)}return}}seen1.push(var1);seen2.push(var2);innerAssertImplementation(var1,var2,path);seen1.pop();seen2.pop()}var equalityPredicate=opt_equalityPredicate||function(type,var1,var2){var typedPredicate=PRIMITIVE_EQUALITY_PREDICATES[type];if(!typedPredicate){return goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS}var equal=typedPredicate(var1,var2);return equal?goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL:goog.testing.asserts.getDefaultErrorMsg_(var1,var2)};function innerAssertImplementation(var1,var2,path){if(var1===var2){return}var typeOfVar1=_trueTypeOf(var1),typeOfVar2=_trueTypeOf(var2);if(typeOfVar1==typeOfVar2){var isArray="Array"==typeOfVar1,errorMessage=equalityPredicate(typeOfVar1,var1,var2);if(errorMessage!=goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS){if(errorMessage!=goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL){failures.push(path+": "+errorMessage)}}else if(isArray&&var1.length!=var2.length){failures.push(path+": Expected "+var1.length+"-element array "+"but got a "+var2.length+"-element array")}else{var childPath=path+(isArray?"[%s]":path?".%s":"%s");if(!var1.__iterator__){for(var prop in var1){if(isArray&&goog.testing.asserts.isArrayIndexProp_(prop)){continue}if(prop in var2){innerAssertWithCycleCheck(var1[prop],var2[prop],childPath.replace("%s",prop))}else{failures.push("property "+prop+" not present in actual "+(path||typeOfVar2))}}for(var prop in var2){if(isArray&&goog.testing.asserts.isArrayIndexProp_(prop)){continue}if(!(prop in var1)){failures.push("property "+prop+" not present in expected "+(path||typeOfVar1))}}if(isArray){for(prop=0;prop<var1.length;prop++){innerAssertWithCycleCheck(var1[prop],var2[prop],childPath.replace("%s",prop+""))}}}else{if(goog.isFunction(var1.equals)){if(!var1.equals(var2)){failures.push("equals() returned false for "+(path||typeOfVar1))}}else if(var1.map_){innerAssertWithCycleCheck(var1.map_,var2.map_,childPath.replace("%s","map_"))}else{failures.push("unable to check "+(path||typeOfVar1)+" for equality: it has an iterator we do not "+"know how to handle. please add an equals method")}}}}else{failures.push(path+" "+goog.testing.asserts.getDefaultErrorMsg_(var1,var2))}}innerAssertWithCycleCheck(expected,actual,"");return 0==failures.length?null:goog.testing.asserts.getDefaultErrorMsg_(expected,actual)+"\n   "+failures.join("\n   ")};var assertObjectEquals=function(a,b,opt_c){_validateArguments(2,arguments);var v1=nonCommentArg(1,2,arguments),v2=nonCommentArg(2,2,arguments),failureMessage=commentArg(2,arguments)?commentArg(2,arguments):"",differences=goog.testing.asserts.findDifferences(v1,v2);_assert(failureMessage,!differences,differences)},assertObjectRoughlyEquals=function(a,b,c,opt_d){_validateArguments(3,arguments);var v1=nonCommentArg(1,3,arguments),v2=nonCommentArg(2,3,arguments),tolerance=nonCommentArg(3,3,arguments),failureMessage=commentArg(3,arguments)?commentArg(3,arguments):"",equalityPredicate=function(type,var1,var2){var typedPredicate=goog.testing.asserts.primitiveRoughEqualityPredicates_[type];if(!typedPredicate){return goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS}var equal=typedPredicate(var1,var2,tolerance);return equal?goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL:goog.testing.asserts.getDefaultErrorMsg_(var1,var2)+" which was more than "+tolerance+" away"},differences=goog.testing.asserts.findDifferences(v1,v2,equalityPredicate);_assert(failureMessage,!differences,differences)},assertObjectNotEquals=function(a,b,opt_c){_validateArguments(2,arguments);var v1=nonCommentArg(1,2,arguments),v2=nonCommentArg(2,2,arguments),failureMessage=commentArg(2,arguments)?commentArg(2,arguments):"",differences=goog.testing.asserts.findDifferences(v1,v2);_assert(failureMessage,differences,"Objects should not be equal")},assertArrayEquals=function(a,b,opt_c){_validateArguments(2,arguments);var v1=nonCommentArg(1,2,arguments),v2=nonCommentArg(2,2,arguments),failureMessage=commentArg(2,arguments)?commentArg(2,arguments):"",typeOfVar1=_trueTypeOf(v1);_assert(failureMessage,"Array"==typeOfVar1,"Expected an array for assertArrayEquals but found a "+typeOfVar1);var typeOfVar2=_trueTypeOf(v2);_assert(failureMessage,"Array"==typeOfVar2,"Expected an array for assertArrayEquals but found a "+typeOfVar2);assertObjectEquals(failureMessage,Array.prototype.concat.call(v1),Array.prototype.concat.call(v2))},assertElementsEquals=function(a,b,opt_c){_validateArguments(2,arguments);var v1=nonCommentArg(1,2,arguments),v2=nonCommentArg(2,2,arguments),failureMessage=commentArg(2,arguments)?commentArg(2,arguments):"";if(!v1){assert(failureMessage,!v2)}else{assertEquals("length mismatch: "+failureMessage,v1.length,v2.length);for(var i=0;i<v1.length;++i){assertEquals("mismatch at index "+i+": "+failureMessage,v1[i],v2[i])}}},assertElementsRoughlyEqual=function(a,b,c,opt_d){_validateArguments(3,arguments);var v1=nonCommentArg(1,3,arguments),v2=nonCommentArg(2,3,arguments),tolerance=nonCommentArg(3,3,arguments),failureMessage=commentArg(3,arguments)?commentArg(3,arguments):"";if(!v1){assert(failureMessage,!v2)}else{assertEquals("length mismatch: "+failureMessage,v1.length,v2.length);for(var i=0;i<v1.length;++i){assertRoughlyEquals(failureMessage,v1[i],v2[i],tolerance)}}},assertSameElements=function(a,b,opt_c){_validateArguments(2,arguments);var expected=nonCommentArg(1,2,arguments),actual=nonCommentArg(2,2,arguments),message=commentArg(2,arguments);assertTrue("Bad arguments to assertSameElements(opt_message, expected: "+"ArrayLike, actual: ArrayLike)",goog.isArrayLike(expected)&&goog.isArrayLike(actual));expected=goog.testing.asserts.toArray_(expected);actual=goog.testing.asserts.toArray_(actual);_assert(message,expected.length==actual.length,"Expected "+expected.length+" elements: ["+expected+"], "+"got "+actual.length+" elements: ["+actual+"]");for(var toFind=goog.testing.asserts.toArray_(expected),i=0,index;i<actual.length;i++){index=goog.testing.asserts.indexOf_(toFind,actual[i]);_assert(message,-1!=index,"Expected ["+expected+"], got ["+actual+"]");toFind.splice(index,1)}},assertEvaluatesToTrue=function(a,opt_b){_validateArguments(1,arguments);var value=nonCommentArg(1,1,arguments);if(!value){_assert(commentArg(1,arguments),!1,"Expected to evaluate to true")}},assertEvaluatesToFalse=function(a,opt_b){_validateArguments(1,arguments);var value=nonCommentArg(1,1,arguments);if(value){_assert(commentArg(1,arguments),!1,"Expected to evaluate to false")}},assertHTMLEquals=function(a,b,opt_c){_validateArguments(2,arguments);var var1=nonCommentArg(1,2,arguments),var2=nonCommentArg(2,2,arguments),var1Standardized=standardizeHTML(var1),var2Standardized=standardizeHTML(var2);_assert(commentArg(2,arguments),var1Standardized===var2Standardized,goog.testing.asserts.getDefaultErrorMsg_(var1Standardized,var2Standardized))},assertCSSValueEquals=function(a,b,c,opt_d){_validateArguments(3,arguments);var propertyName=nonCommentArg(1,3,arguments),expectedValue=nonCommentArg(2,3,arguments),actualValue=nonCommentArg(3,3,arguments),expectedValueStandardized=standardizeCSSValue(propertyName,expectedValue),actualValueStandardized=standardizeCSSValue(propertyName,actualValue);_assert(commentArg(3,arguments),expectedValueStandardized==actualValueStandardized,goog.testing.asserts.getDefaultErrorMsg_(expectedValueStandardized,actualValueStandardized))},assertHashEquals=function(a,b,opt_c){_validateArguments(2,arguments);var var1=nonCommentArg(1,2,arguments),var2=nonCommentArg(2,2,arguments),message=commentArg(2,arguments);for(var key in var1){_assert(message,key in var2,"Expected hash had key "+key+" that was not found");_assert(message,var1[key]==var2[key],"Value for key "+key+" mismatch - expected = "+var1[key]+", actual = "+var2[key])}for(var key in var2){_assert(message,key in var1,"Actual hash had key "+key+" that was not expected")}},assertRoughlyEquals=function(a,b,c,opt_d){_validateArguments(3,arguments);var expected=nonCommentArg(1,3,arguments),actual=nonCommentArg(2,3,arguments),tolerance=nonCommentArg(3,3,arguments);_assert(commentArg(3,arguments),goog.testing.asserts.numberRoughEqualityPredicate_(expected,actual,tolerance),"Expected "+expected+", but got "+actual+" which was more than "+tolerance+" away")},assertContains=function(a,b,opt_c){_validateArguments(2,arguments);var contained=nonCommentArg(1,2,arguments),container=nonCommentArg(2,2,arguments);_assert(commentArg(2,arguments),goog.testing.asserts.contains_(container,contained),"Expected '"+container+"' to contain '"+contained+"'")},assertNotContains=function(a,b,opt_c){_validateArguments(2,arguments);var contained=nonCommentArg(1,2,arguments),container=nonCommentArg(2,2,arguments);_assert(commentArg(2,arguments),!goog.testing.asserts.contains_(container,contained),"Expected '"+container+"' not to contain '"+contained+"'")},assertRegExp=function(a,b,opt_c){_validateArguments(2,arguments);var regexp=nonCommentArg(1,2,arguments),string=nonCommentArg(2,2,arguments);if("string"==typeof regexp){regexp=new RegExp(regexp)}_assert(commentArg(2,arguments),regexp.test(string),"Expected '"+string+"' to match RegExp "+regexp.toString())};goog.testing.asserts.toArray_=function(arrayLike){for(var ret=[],i=0;i<arrayLike.length;i++){ret[i]=arrayLike[i]}return ret};goog.testing.asserts.indexOf_=function(container,contained){if(container.indexOf){return container.indexOf(contained)}else{for(var i=0;i<container.length;i++){if(container[i]===contained){return i}}return-1}};goog.testing.asserts.contains_=function(container,contained){return-1!=goog.testing.asserts.indexOf_(container,contained)};var standardizeHTML=function(html){var translator=document.createElement("DIV");translator.innerHTML=html;return translator.innerHTML.replace(/^\s+|\s+$/g,"")},standardizeCSSValue=function(propertyName,value){var styleDeclaration=document.createElement("DIV").style;styleDeclaration[propertyName]=value;return styleDeclaration[propertyName]};goog.testing.asserts.raiseException=function(comment,opt_message){var e=new goog.testing.JsUnitException(comment,opt_message),testCase=_getCurrentTestCase();if(testCase){testCase.raiseAssertionException(e)}else{goog.global.console.error("Failed to save thrown exception: no test case is installed.");throw e}};goog.testing.asserts.isArrayIndexProp_=function(prop){return(0|prop)==prop};goog.testing.JsUnitException=function(comment,opt_message){this.isJsUnitException=!0;this.message=(comment?comment:"")+(comment&&opt_message?"\n":"")+(opt_message?opt_message:"");this.stackTrace=goog.testing.stacktrace.get();this.comment=comment||null;this.jsUnitMessage=opt_message||"";if(Error.captureStackTrace){Error.captureStackTrace(this,goog.testing.JsUnitException)}else{this.stack=new Error().stack||""}};goog.inherits(goog.testing.JsUnitException,Error);goog.testing.JsUnitException.prototype.toString=function(){return this.message};goog.exportSymbol("fail",fail);goog.exportSymbol("assert",assert);goog.exportSymbol("assertThrows",assertThrows);goog.exportSymbol("assertNotThrows",assertNotThrows);goog.exportSymbol("assertThrowsJsUnitException",assertThrowsJsUnitException);goog.exportSymbol("assertTrue",assertTrue);goog.exportSymbol("assertFalse",assertFalse);goog.exportSymbol("assertEquals",assertEquals);goog.exportSymbol("assertNotEquals",assertNotEquals);goog.exportSymbol("assertNull",assertNull);goog.exportSymbol("assertNotNull",assertNotNull);goog.exportSymbol("assertUndefined",assertUndefined);goog.exportSymbol("assertNotUndefined",assertNotUndefined);goog.exportSymbol("assertNotNullNorUndefined",assertNotNullNorUndefined);goog.exportSymbol("assertNonEmptyString",assertNonEmptyString);goog.exportSymbol("assertNaN",assertNaN);goog.exportSymbol("assertNotNaN",assertNotNaN);goog.exportSymbol("assertObjectEquals",assertObjectEquals);goog.exportSymbol("assertObjectRoughlyEquals",assertObjectRoughlyEquals);goog.exportSymbol("assertObjectNotEquals",assertObjectNotEquals);goog.exportSymbol("assertArrayEquals",assertArrayEquals);goog.exportSymbol("assertElementsEquals",assertElementsEquals);goog.exportSymbol("assertElementsRoughlyEqual",assertElementsRoughlyEqual);goog.exportSymbol("assertSameElements",assertSameElements);goog.exportSymbol("assertEvaluatesToTrue",assertEvaluatesToTrue);goog.exportSymbol("assertEvaluatesToFalse",assertEvaluatesToFalse);goog.exportSymbol("assertHTMLEquals",assertHTMLEquals);goog.exportSymbol("assertHashEquals",assertHashEquals);goog.exportSymbol("assertRoughlyEquals",assertRoughlyEquals);goog.exportSymbol("assertContains",assertContains);goog.exportSymbol("assertNotContains",assertNotContains);goog.exportSymbol("assertRegExp",assertRegExp);