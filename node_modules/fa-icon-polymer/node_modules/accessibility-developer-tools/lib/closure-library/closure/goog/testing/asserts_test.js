goog.provide("goog.testing.assertsTest");goog.setTestOnly("goog.testing.assertsTest");goog.require("goog.array");goog.require("goog.dom");goog.require("goog.iter.Iterator");goog.require("goog.iter.StopIteration");goog.require("goog.labs.userAgent.browser");goog.require("goog.string");goog.require("goog.structs.Map");goog.require("goog.structs.Set");goog.require("goog.testing.TestCase");goog.require("goog.testing.asserts");goog.require("goog.testing.jsunit");goog.require("goog.userAgent");goog.require("goog.userAgent.product");function setUp(){goog.testing.TestCase.getActiveTestCase().failOnUnreportedAsserts=!1}function testAssertTrue(){assertTrue(!0);assertTrue("Good assertion",!0);assertThrowsJsUnitException(function(){assertTrue(!1)},"Call to assertTrue(boolean) with false");assertThrowsJsUnitException(function(){assertTrue("Should be true",!1)},"Should be true\nCall to assertTrue(boolean) with false");assertThrowsJsUnitException(function(){assertTrue(null)},"Bad argument to assertTrue(boolean)");assertThrowsJsUnitException(function(){assertTrue(void 0)},"Bad argument to assertTrue(boolean)")}function testAssertFalse(){assertFalse(!1);assertFalse("Good assertion",!1);assertThrowsJsUnitException(function(){assertFalse(!0)},"Call to assertFalse(boolean) with true");assertThrowsJsUnitException(function(){assertFalse("Should be false",!0)},"Should be false\nCall to assertFalse(boolean) with true");assertThrowsJsUnitException(function(){assertFalse(null)},"Bad argument to assertFalse(boolean)");assertThrowsJsUnitException(function(){assertFalse(void 0)},"Bad argument to assertFalse(boolean)")}function testAssertEqualsWithString(){assertEquals("a","a");assertEquals("Good assertion","a","a");assertThrowsJsUnitException(function(){assertEquals("a","b")},"Expected <a> (String) but was <b> (String)");assertThrowsJsUnitException(function(){assertEquals("Bad assertion","a","b")},"Bad assertion\nExpected <a> (String) but was <b> (String)")}function testAssertEqualsWithInteger(){assertEquals(1,1);assertEquals("Good assertion",1,1);assertThrowsJsUnitException(function(){assertEquals(1,2)},"Expected <1> (Number) but was <2> (Number)");assertThrowsJsUnitException(function(){assertEquals("Bad assertion",1,2)},"Bad assertion\nExpected <1> (Number) but was <2> (Number)")}function testAssertNotEquals(){assertNotEquals("a","b");assertNotEquals("a","a","b");assertThrowsJsUnitException(function(){assertNotEquals("a","a")},"Expected not to be <a> (String)");assertThrowsJsUnitException(function(){assertNotEquals("a","a","a")},"a\nExpected not to be <a> (String)")}function testAssertNull(){assertNull(null);assertNull("Good assertion",null);assertThrowsJsUnitException(function(){assertNull(!0)},"Expected <null> but was <true> (Boolean)");assertThrowsJsUnitException(function(){assertNull("Should be null",!1)},"Should be null\nExpected <null> but was <false> (Boolean)");assertThrowsJsUnitException(function(){assertNull(void 0)},"Expected <null> but was <undefined>");assertThrowsJsUnitException(function(){assertNull(1)},"Expected <null> but was <1> (Number)")}function testAssertNotNull(){assertNotNull(!0);assertNotNull("Good assertion",!0);assertNotNull(!1);assertNotNull(void 0);assertNotNull(1);assertNotNull("a");assertThrowsJsUnitException(function(){assertNotNull(null)},"Expected not to be <null>");assertThrowsJsUnitException(function(){assertNotNull("Should not be null",null)},"Should not be null\nExpected not to be <null>")}function testAssertUndefined(){assertUndefined(void 0);assertUndefined("Good assertion",void 0);assertThrowsJsUnitException(function(){assertUndefined(!0)},"Expected <undefined> but was <true> (Boolean)");assertThrowsJsUnitException(function(){assertUndefined("Should be undefined",!1)},"Should be undefined\nExpected <undefined> but was <false> (Boolean)");assertThrowsJsUnitException(function(){assertUndefined(null)},"Expected <undefined> but was <null>");assertThrowsJsUnitException(function(){assertUndefined(1)},"Expected <undefined> but was <1> (Number)")}function testAssertNotUndefined(){assertNotUndefined(!0);assertNotUndefined("Good assertion",!0);assertNotUndefined(!1);assertNotUndefined(null);assertNotUndefined(1);assertNotUndefined("a");assertThrowsJsUnitException(function(){assertNotUndefined(void 0)},"Expected not to be <undefined>");assertThrowsJsUnitException(function(){assertNotUndefined("Should not be undefined",void 0)},"Should not be undefined\nExpected not to be <undefined>")}function testAssertNotNullNorUndefined(){assertNotNullNorUndefined(!0);assertNotNullNorUndefined("Good assertion",!0);assertNotNullNorUndefined(!1);assertNotNullNorUndefined(1);assertNotNullNorUndefined(0);assertNotNullNorUndefined("a");assertThrowsJsUnitException(function(){assertNotNullNorUndefined(void 0)},"Expected not to be <undefined>");assertThrowsJsUnitException(function(){assertNotNullNorUndefined("Should not be undefined",void 0)},"Should not be undefined\nExpected not to be <undefined>");assertThrowsJsUnitException(function(){assertNotNullNorUndefined(null)},"Expected not to be <null>");assertThrowsJsUnitException(function(){assertNotNullNorUndefined("Should not be null",null)},"Should not be null\nExpected not to be <null>")}function testAssertNonEmptyString(){assertNonEmptyString("hello");assertNonEmptyString("Good assertion","hello");assertNonEmptyString("true");assertNonEmptyString("false");assertNonEmptyString("1");assertNonEmptyString("null");assertNonEmptyString("undefined");assertNonEmptyString("\n");assertNonEmptyString(" ");assertThrowsJsUnitException(function(){assertNonEmptyString("")},"Expected non-empty string but was <> (String)");assertThrowsJsUnitException(function(){assertNonEmptyString("Should be non-empty string","")},"Should be non-empty string\n"+"Expected non-empty string but was <> (String)");assertThrowsJsUnitException(function(){assertNonEmptyString(!0)},"Expected non-empty string but was <true> (Boolean)");assertThrowsJsUnitException(function(){assertNonEmptyString(!1)},"Expected non-empty string but was <false> (Boolean)");assertThrowsJsUnitException(function(){assertNonEmptyString(1)},"Expected non-empty string but was <1> (Number)");assertThrowsJsUnitException(function(){assertNonEmptyString(null)},"Expected non-empty string but was <null>");assertThrowsJsUnitException(function(){assertNonEmptyString(void 0)},"Expected non-empty string but was <undefined>");assertThrowsJsUnitException(function(){assertNonEmptyString(["hello"])},"Expected non-empty string but was <hello> (Array)");assertThrowsJsUnitException(function(){assertNonEmptyString(goog.dom.createTextNode("hello"))})}function testAssertNaN(){assertNaN(NaN);assertNaN("Good assertion",NaN);assertThrowsJsUnitException(function(){assertNaN(1)},"Expected NaN");assertThrowsJsUnitException(function(){assertNaN("Should be NaN",1)},"Should be NaN\nExpected NaN");assertThrowsJsUnitException(function(){assertNaN(!0)},"Expected NaN");assertThrowsJsUnitException(function(){assertNaN(!1)},"Expected NaN");assertThrowsJsUnitException(function(){assertNaN(null)},"Expected NaN");assertThrowsJsUnitException(function(){assertNaN("")},"Expected NaN")}function testAssertNotNaN(){assertNotNaN(1);assertNotNaN("Good assertion",1);assertNotNaN(!0);assertNotNaN(!1);assertNotNaN("");assertNotNaN(null);assertThrowsJsUnitException(function(){assertNotNaN(Number.NaN)},"Expected not NaN");assertThrowsJsUnitException(function(){assertNotNaN("Should not be NaN",Number.NaN)},"Should not be NaN\nExpected not NaN")}function testAssertObjectEquals(){var obj1=[{a:"hello",b:"world"}],obj2=[{a:"hello",c:"dear",b:"world"}];assertThrows("Objects should not be equal",function(){assertObjectEquals(obj1,obj2)});assertThrows("Objects should not be equal",function(){assertObjectEquals(obj2,obj1)});var obj3=[{b:"world",a:"hello"}];assertObjectEquals(obj1,obj3);assertObjectEquals(obj3,obj1);var obj4=[{a:"hello",b:void 0}],obj5=[{a:"hello"}];assertThrows("Objects should not be equal",function(){assertObjectEquals(obj4,obj5)});assertThrows("Objects should not be equal",function(){assertObjectEquals(obj5,obj4)})}function testAssertObjectNotEquals(){var obj1=[{a:"hello",b:"world"}],obj2=[{a:"hello",c:"dear",b:"world"}];assertObjectNotEquals(obj1,obj2);assertObjectNotEquals(obj2,obj1);var obj3=[{b:"world",a:"hello"}],error=assertThrows("Objects should be equal",function(){assertObjectNotEquals(obj1,obj3)});assertContains("Objects should not be equal",error.message);error=assertThrows("Objects should be equal",function(){assertObjectNotEquals(obj3,obj1)});assertContains("Objects should not be equal",error.message);var obj4=[{a:"hello",b:void 0}],obj5=[{a:"hello"}];assertObjectNotEquals(obj4,obj5);assertObjectNotEquals(obj5,obj4)}function testAssertObjectEquals2(){assertObjectEquals("arrays should be equal",[void 0],[void 0]);assertThrows("arrays should not be equal",function(){assertObjectEquals([void 0,void 0],[void 0])});assertThrows("arrays should not be equal",function(){assertObjectEquals([void 0],[void 0,void 0])})}function testAssertObjectEquals3(){var obj1=[{a:"hi",b:new goog.structs.Map("hola","amigo","como","estas?")},14,"yes",!0],obj2=[{a:"hi",b:new goog.structs.Map("hola","amigo","como","estas?")},14,"yes",!0];assertObjectEquals("Objects should be equal",obj1,obj2);var obj3={a:[1,2]},obj4={a:[1,2,3]};assertThrows("inner arrays should not be equal",function(){assertObjectEquals(obj3,obj4)});assertThrows("inner arrays should not be equal",function(){assertObjectEquals(obj4,obj3)})}function testAssertObjectEqualsSet(){var set1=new goog.structs.Set,set2=new goog.structs.Set;set1.add("a");set1.add("b");set1.add(13);set2.add("a");set2.add("b");set2.add(13);assertObjectEquals("sets should be equal",set1,set2);set2.add("hey");assertThrows("sets should not be equal",function(){assertObjectEquals(set1,set2)})}function testAssertObjectEqualsIterNoEquals(){function Thing(){this.what=[]}Thing.prototype.add=function(n,v){this.what.push(n+"@"+v)};Thing.prototype.get=function(n){for(var m=new RegExp("^"+n+"@(.*)$",""),i=0,match;i<this.what.length;++i){match=this.what[i].match(m);if(match){return match[1]}}return null};Thing.prototype.__iterator__=function(){var iter=new goog.iter.Iterator;iter.index=0;iter.thing=this;iter.next=function(){if(this.index<this.thing.what.length){return this.thing.what[this.index++].split("@")[0]}else{throw goog.iter.StopIteration}};return iter};var thing1=new Thing;thing1.name="thing1";var thing2=new Thing;thing2.name="thing2";thing1.add("red","fish");thing1.add("blue","fish");thing2.add("red","fish");thing2.add("blue","fish");assertThrows("things should not be equal",function(){assertObjectEquals(thing1,thing2)})}function testAssertObjectEqualsWithDates(){var date=new Date(2010,0,1),dateWithMilliseconds=new Date(2010,0,1,0,0,0,1);assertObjectEquals(new Date(2010,0,1),date);assertThrows(goog.partial(assertObjectEquals,date,dateWithMilliseconds))}function testAssertObjectEqualsSparseArrays(){var arr1=[,2,,4],arr2=[1,2,3,4,5];assertThrows("Sparse arrays should not be equal",function(){assertObjectEquals(arr1,arr2)});assertThrows("Sparse arrays should not be equal",function(){assertObjectEquals(arr2,arr1)})}function testAssertObjectEqualsSparseArrays2(){var arr1=[1,,3],arr2=[1,void 0,3],arr3=goog.array.clone(arr1),arr4=[];arr4.push(1,void 0,3);for(var arrays=[arr1,arr2,arr3,arr4],i=0;i<arrays.length;i++){for(var j=0;j<arrays.length;j++){assertArrayEquals(arrays[i],arrays[j])}}}function testAssertObjectEqualsArraysWithExtraProps(){var arr1=[1],arr2=[1];arr2.foo=3;assertThrows("Aarrays should not be equal",function(){assertObjectEquals(arr1,arr2)});assertThrows("Arrays should not be equal",function(){assertObjectEquals(arr2,arr1)})}function testAssertSameElementsOnArray(){assertSameElements([1,2],[2,1]);assertSameElements("Good assertion",[1,2],[2,1]);assertSameElements("Good assertion with duplicates",[1,1,2],[2,1,1]);assertThrowsJsUnitException(function(){assertSameElements([1,2],[1])},"Expected 2 elements: [1,2], got 1 elements: [1]");assertThrowsJsUnitException(function(){assertSameElements("Should match",[1,2],[1])},"Should match\nExpected 2 elements: [1,2], got 1 elements: [1]");assertThrowsJsUnitException(function(){assertSameElements([1,2],[1,3])},"Expected [1,2], got [1,3]");assertThrowsJsUnitException(function(){assertSameElements("Should match",[1,2],[1,3])},"Should match\nExpected [1,2], got [1,3]");assertThrowsJsUnitException(function(){assertSameElements([1,1,2],[2,2,1])},"Expected [1,1,2], got [2,2,1]")}function testAssertSameElementsOnArrayLike(){assertSameElements({0:0,1:1,length:2},{length:2,1:1,0:0});assertThrowsJsUnitException(function(){assertSameElements({0:0,1:1,length:2},{0:0,length:1})},"Expected 2 elements: [0,1], got 1 elements: [0]")}function testAssertSameElementsWithBadArguments(){assertThrowsJsUnitException(function(){assertSameElements([],new goog.structs.Set)},"Bad arguments to assertSameElements(opt_message, expected: "+"ArrayLike, actual: ArrayLike)\n"+"Call to assertTrue(boolean) with false")}var implicitlyTrue=[!0,1,-1," ","string",1/0,{}],implicitlyFalse=[!1,0,"",null,void 0,NaN];function testAssertEvaluatesToTrue(){assertEvaluatesToTrue(!0);assertEvaluatesToTrue("",!0);assertEvaluatesToTrue("Good assertion",!0);assertThrowsJsUnitException(function(){assertEvaluatesToTrue(!1)},"Expected to evaluate to true");assertThrowsJsUnitException(function(){assertEvaluatesToTrue("Should be true",!1)},"Should be true\nExpected to evaluate to true");for(var i=0;i<implicitlyTrue.length;i++){assertEvaluatesToTrue("Test "+implicitlyTrue[i]+" ["+i+"]"+"",implicitlyTrue[i])}for(var i=0;i<implicitlyFalse.length;i++){assertThrowsJsUnitException(function(){assertEvaluatesToTrue(implicitlyFalse[i])},"Expected to evaluate to true")}}function testAssertEvaluatesToFalse(){assertEvaluatesToFalse(!1);assertEvaluatesToFalse("Good assertion",!1);assertThrowsJsUnitException(function(){assertEvaluatesToFalse(!0)},"Expected to evaluate to false");assertThrowsJsUnitException(function(){assertEvaluatesToFalse("Should be false",!0)},"Should be false\nExpected to evaluate to false");for(var i=0;i<implicitlyFalse.length;i++){assertEvaluatesToFalse("Test "+implicitlyFalse[i]+" ["+i+"]"+"",implicitlyFalse[i])}for(var i=0;i<implicitlyTrue.length;i++){assertThrowsJsUnitException(function(){assertEvaluatesToFalse(implicitlyTrue[i])},"Expected to evaluate to false")}}function testAssertHTMLEquals(){}function testAssertHashEquals(){assertHashEquals({a:1,b:2},{b:2,a:1});assertHashEquals("Good assertion",{a:1,b:2},{b:2,a:1});assertHashEquals({a:void 0},{a:void 0});assertThrowsJsUnitException(function(){assertHashEquals({a:1,b:2},{a:1})},"Expected hash had key b that was not found");assertThrowsJsUnitException(function(){assertHashEquals("Should match",{a:1,b:2},{a:1})},"Should match\nExpected hash had key b that was not found");assertThrowsJsUnitException(function(){assertHashEquals({a:void 0},{})},"Expected hash had key a that was not found");assertThrowsJsUnitException(function(){assertHashEquals({a:1},{a:5})},"Value for key a mismatch - expected = 1, actual = 5");assertThrowsJsUnitException(function(){assertHashEquals("Should match",{a:1},{a:5})},"Should match\nValue for key a mismatch - expected = 1, actual = 5");assertThrowsJsUnitException(function(){assertHashEquals({a:void 0},{a:1})},"Value for key a mismatch - expected = undefined, actual = 1");assertThrowsJsUnitException(function(){assertHashEquals({a:1},{a:1,b:1})},"Actual hash had key b that was not expected");assertThrowsJsUnitException(function(){assertHashEquals("Should match",{a:1},{a:1,b:1})},"Should match\nActual hash had key b that was not expected")}function testAssertRoughlyEquals(){assertRoughlyEquals(1,1,0);assertRoughlyEquals("Good assertion",1,1,0);assertRoughlyEquals(1,1.1,.11);assertRoughlyEquals(1.1,1,.11);assertThrowsJsUnitException(function(){assertRoughlyEquals(1,1.1,.05)},"Expected 1, but got 1.1 which was more than 0.05 away");assertThrowsJsUnitException(function(){assertRoughlyEquals("Close enough",1,1.1,.05)},"Close enough\nExpected 1, but got 1.1 which was more than 0.05 away")}function testAssertContains(){var a=[1,2,3];assertContains(1,[1,2,3]);assertContains("Should contain",1,[1,2,3]);assertThrowsJsUnitException(function(){assertContains(4,[1,2,3])},"Expected '1,2,3' to contain '4'");assertThrowsJsUnitException(function(){assertContains("Should contain",4,[1,2,3])},"Should contain\nExpected '1,2,3' to contain '4'");var o={};assertContains(o,[o,2,3]);assertThrowsJsUnitException(function(){assertContains(o,[1,2,3])},"Expected '1,2,3' to contain '[object Object]'")}function testAssertNotContains(){var a=[1,2,3];assertNotContains(4,[1,2,3]);assertNotContains("Should not contain",4,[1,2,3]);assertThrowsJsUnitException(function(){assertNotContains(1,[1,2,3])},"Expected '1,2,3' not to contain '1'");assertThrowsJsUnitException(function(){assertNotContains("Should not contain",1,[1,2,3])},"Should not contain\nExpected '1,2,3' not to contain '1'");var o={};assertNotContains({},[o,2,3]);assertThrowsJsUnitException(function(){assertNotContains(o,[o,2,3])},"Expected '[object Object],2,3' not to contain '[object Object]'")}function testAssertRegExp(){var a="I like turtles";assertRegExp(/turtles$/,a);assertRegExp("turtles$",a);assertRegExp("Expected subject to be about turtles",/turtles$/,a);assertRegExp("Expected subject to be about turtles","turtles$",a);var b="Hello";assertThrowsJsUnitException(function(){assertRegExp(/turtles$/,b)},"Expected 'Hello' to match RegExp /turtles$/");assertThrowsJsUnitException(function(){assertRegExp("turtles$",b)},"Expected 'Hello' to match RegExp /turtles$/")}function testAssertThrows(){var failed=!1;try{assertThrows("assertThrows should not pass with null param",null);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertThrows("assertThrows should not pass with undefined param",void 0);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertThrows("assertThrows should not pass with number param",1);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertThrows("assertThrows should not pass with string param","string");failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertThrows("assertThrows should not pass with object param",{});failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{var error=assertThrows("valid function throws Error",function(){throw new Error("test")})}catch(e){fail("assertThrows incorrectly doesn't detect a thrown exception")}assertEquals("error message","test",error.message);try{var stringError=assertThrows("valid function throws string error",function(){throw"string error test"})}catch(e){fail("assertThrows doesn't detect a thrown string exception")}assertEquals("string error","string error test",stringError)}function testAssertThrowsThrowsIfJsUnitException(){goog.testing.TestCase.getActiveTestCase().failOnUnreportedAsserts=!0;var e=assertThrowsJsUnitException(function(){assertThrows(function(){try{assertTrue(!1)}catch(ex){goog.testing.TestCase.getActiveTestCase().invalidateAssertionException(ex);throw ex}})});assertContains("Function passed to assertThrows caught a JsUnitException",e.message);goog.testing.TestCase.getActiveTestCase().failOnUnreportedAsserts=!1}function testAssertThrowsJsUnitException(){var error=assertThrowsJsUnitException(function(){assertTrue(!1)});assertEquals("Call to assertTrue(boolean) with false",error.message);error=assertThrowsJsUnitException(function(){assertThrowsJsUnitException(function(){throw new Error("fail")})});assertEquals("Call to fail()\nExpected a JsUnitException",error.message);error=assertThrowsJsUnitException(function(){assertThrowsJsUnitException(goog.nullFunction)});assertEquals("Expected a failure",error.message)}function testAssertNotThrows(){if(goog.userAgent.product.SAFARI){return}var failed=!1;try{assertNotThrows("assertNotThrows should not pass with null param",null);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertNotThrows("assertNotThrows should not pass with undefined param",void 0);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertNotThrows("assertNotThrows should not pass with number param",1);failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertNotThrows("assertNotThrows should not pass with string param","string");failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);try{assertNotThrows("assertNotThrows should not pass with object param",{});failed=!0}catch(e){}assertFalse("Fail should not get set to true",failed);var result;try{result=assertNotThrows("valid function",function(){return"some value"})}catch(e){fail("assertNotThrows returned failure on a valid function")}assertEquals("assertNotThrows should return the result of the function.","some value",result);var errorDescription="a test error exception";try{assertNotThrows("non valid error throwing function",function(){throw new Error(errorDescription)});failed=!0}catch(e){if(!goog.userAgent.GECKO&&(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("8"))){assertContains(errorDescription,e.message)}}assertFalse("assertNotThrows did not fail on a thrown exception",failed)}function testAssertArrayEquals(){var a1=[0,1,2],a2=[0,1,2];assertArrayEquals("Arrays should be equal",a1,a2);assertThrows("Should have thrown because args are not arrays",function(){assertArrayEquals(!0,!0)});a1=[0,void 0,2];a2=[0,,2];assertArrayEquals("Bug: sparse arrays and undefined items are not distinguished",[0,void 0,2],[0,,2]);assertThrows("The array elements should be compared with ===",function(){assertArrayEquals([0],["0"])});assertThrows("Arrays with different length should be different",function(){assertArrayEquals([0,void 0],[0])});a1=[0];a2=[0];a2[-1]=-1;assertArrayEquals("Negative indexes are ignored",a1,a2);a1=[0];a2=[0];a2.extra=1;assertArrayEquals("Extra properties are ignored. Use assertObjectEquals to compare them.",a1,a2);assertArrayEquals("An example where assertObjectEquals would fail in IE.",["x"],"x".match(/x/g))}function testAssertObjectsEqualsDifferentArrays(){assertThrows("Should have thrown because args are different",function(){var a1=["className1"],a2=["className2"];assertObjectEquals(a1,a2)})}function testAssertObjectsEqualsNegativeArrayIndexes(){var a1=[0],a2=[0];a2[-1]=-1}function testAssertObjectsEqualsDifferentTypeSameToString(){assertThrows("Should have thrown because args are different",function(){var a1="className1",a2=["className1"];assertObjectEquals(a1,a2)});assertThrows("Should have thrown because args are different",function(){var a1=["className1"],a2={0:"className1"};assertObjectEquals(a1,a2)});assertThrows("Should have thrown because args are different",function(){var a1=["className1"],a2=[["className1"]];assertObjectEquals(a1,a2)})}function testAssertObjectsRoughlyEquals(){assertObjectRoughlyEquals({a:1},{a:1.2},.3);assertThrowsJsUnitException(function(){assertObjectRoughlyEquals({a:1},{a:1.2},.1)},"Expected <[object Object]> (Object) but was <[object Object]> "+"(Object)\n   a: Expected <1> (Number) but was <1.2> (Number) which "+"was more than 0.1 away")}function testFindDifferences_equal(){assertNull(goog.testing.asserts.findDifferences(!0,!0));assertNull(goog.testing.asserts.findDifferences(null,null));assertNull(goog.testing.asserts.findDifferences(void 0,void 0));assertNull(goog.testing.asserts.findDifferences(1,1));assertNull(goog.testing.asserts.findDifferences([1,"a"],[1,"a"]));assertNull(goog.testing.asserts.findDifferences([[1,2],[3,4]],[[1,2],[3,4]]));assertNull(goog.testing.asserts.findDifferences([{a:1,b:2}],[{b:2,a:1}]));assertNull(goog.testing.asserts.findDifferences(null,null));assertNull(goog.testing.asserts.findDifferences(void 0,void 0))}function testFindDifferences_unequal(){assertNotNull(goog.testing.asserts.findDifferences(!0,!1));assertNotNull(goog.testing.asserts.findDifferences([{a:1,b:2}],[{a:2,b:1}]));assertNotNull(goog.testing.asserts.findDifferences([{a:1}],[{a:1,b:[2]}]));assertNotNull(goog.testing.asserts.findDifferences([{a:1,b:[2]}],[{a:1}]))}function testFindDifferences_objectsAndNull(){assertNotNull(goog.testing.asserts.findDifferences({a:1},null));assertNotNull(goog.testing.asserts.findDifferences(null,{a:1}));assertNotNull(goog.testing.asserts.findDifferences(null,[]));assertNotNull(goog.testing.asserts.findDifferences([],null));assertNotNull(goog.testing.asserts.findDifferences([],void 0))}function testFindDifferences_basicCycle(){var a={},b={};a.self=a;b.self=b;assertNull(goog.testing.asserts.findDifferences(a,b));a.unique=1;assertNotNull(goog.testing.asserts.findDifferences(a,b))}function testFindDifferences_crossedCycle(){var a={},b={};a.self=b;b.self=a;assertNull(goog.testing.asserts.findDifferences(a,b));a.unique=1;assertNotNull(goog.testing.asserts.findDifferences(a,b))}function testFindDifferences_asymmetricCycle(){var a={},b={},c={},d={},e={};a.self=b;b.self=a;c.self=d;d.self=e;e.self=c;assertNotNull(goog.testing.asserts.findDifferences(a,c))}function testFindDifferences_basicCycleArray(){var a=[],b=[];a[0]=a;b[0]=b;assertNull(goog.testing.asserts.findDifferences(a,b));a[1]=1;assertNotNull(goog.testing.asserts.findDifferences(a,b))}function testFindDifferences_crossedCycleArray(){var a=[],b=[];a[0]=b;b[0]=a;assertNull(goog.testing.asserts.findDifferences(a,b));a[1]=1;assertNotNull(goog.testing.asserts.findDifferences(a,b))}function testFindDifferences_asymmetricCycleArray(){var a=[],b=[],c=[],d=[],e=[];a[0]=b;b[0]=a;c[0]=d;d[0]=e;e[0]=c;assertNotNull(goog.testing.asserts.findDifferences(a,c))}function testFindDifferences_multiCycles(){var a={};a.cycle1=a;a.test={cycle2:a};var b={};b.cycle1=b;b.test={cycle2:b};assertNull(goog.testing.asserts.findDifferences(a,b))}function testFindDifferences_binaryTree(){function createBinTree(depth,root){if(0==depth){return{root:root}}else{var node={};node.left=createBinTree(depth-1,root||node);node.right=createBinTree(depth-1,root||node);return node}}assertNotNull(goog.testing.asserts.findDifferences(createBinTree(4,null),createBinTree(5,null)))}function testStringForWindowIE(){if(goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("8")){window.execScript("stringForWindowIEHelper()","vbscript");assertEquals("<[object]> (Object)",window.stringForWindowIEResult)}}function testStringSamePrefix(){assertThrowsJsUnitException(function(){assertEquals("abcdefghi","abcdefghx")},"Expected <abcdefghi> (String) but was <abcdefghx> (String)\n"+"Difference was at position 8. Expected [...ghi] vs. actual [...ghx]")}function testStringSameSuffix(){assertThrowsJsUnitException(function(){assertEquals("xbcdefghi","abcdefghi")},"Expected <xbcdefghi> (String) but was <abcdefghi> (String)\n"+"Difference was at position 0. Expected [xbc...] vs. actual [abc...]")}function testStringDissimilarShort(){assertThrowsJsUnitException(function(){assertEquals("x","y")},"Expected <x> (String) but was <y> (String)")}function testStringDissimilarLong(){assertThrowsJsUnitException(function(){assertEquals("xxxxxxxxxx","yyyyyyyyyy")},"Expected <xxxxxxxxxx> (String) but was <yyyyyyyyyy> (String)")}function testAssertElementsEquals(){assertElementsEquals([1,2],[1,2]);assertElementsEquals([1,2],{0:1,1:2,length:2});assertElementsEquals("Good assertion",[1,2],[1,2]);assertThrowsJsUnitException(function(){assertElementsEquals("Message",[1,2],[1])},"length mismatch: Message\n"+"Expected <2> (Number) but was <1> (Number)")}function testStackTrace(){try{assertTrue(!1)}catch(e){if(Error.captureStackTrace){assertNotUndefined(e.stack)}if(e.stack){var stack=e.stack,stackTraceContainsTestName=goog.string.contains(stack,"testStackTrace");if(!stackTraceContainsTestName&&goog.labs.userAgent.browser.isChrome()){var expected="Call to assertTrue(boolean) with false";assertContains(expected,stack);return}assertTrue("Expected the stack trace to contain string \"testStackTrace\"",stackTraceContainsTestName)}}}function stringForWindowIEHelper(){window.stringForWindowIEResult=_displayStringForValue(window)}function testDisplayStringForValue(){assertEquals("<hello> (String)",_displayStringForValue("hello"));assertEquals("<1> (Number)",_displayStringForValue(1));assertEquals("<null>",_displayStringForValue(null));assertEquals("<undefined>",_displayStringForValue(void 0));assertEquals("<hello,,,,1> (Array)",_displayStringForValue(["hello",,void 0,null,1]))}function testDisplayStringForValue_exception(){assertEquals("<toString failed: foo message> (Object)",_displayStringForValue({toString:function(){throw Error("foo message")}}))}function testDisplayStringForValue_cycle(){var cycle=["cycle"];cycle.push(cycle);assertTrue("Computing string should terminate and result in a reasonable length",1e3>_displayStringForValue(cycle).length)}