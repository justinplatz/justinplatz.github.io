goog.provide("goog.dom.ViewportSizeMonitorTest");goog.setTestOnly("goog.dom.ViewportSizeMonitorTest");goog.require("goog.dom.ViewportSizeMonitor");goog.require("goog.events");goog.require("goog.events.Event");goog.require("goog.events.EventTarget");goog.require("goog.events.EventType");goog.require("goog.math.Size");goog.require("goog.testing.MockClock");goog.require("goog.testing.PropertyReplacer");goog.require("goog.testing.jsunit");var propertyReplacer,fakeWindow,viewportSizeMonitor,mockClock;function FakeWindow(){FakeWindow.base(this,"constructor")}goog.inherits(FakeWindow,goog.events.EventTarget);FakeWindow.prototype.fireResize=function(){return this.dispatchEvent(new FakeResizeEvent)};function FakeResizeEvent(obj){this.type=goog.events.EventType.RESIZE}goog.inherits(FakeResizeEvent,goog.events.Event);function getViewportSize(){return viewportSize}function setViewportSize(w,h,fireEvent){this.viewportSize=new goog.math.Size(w,h);if(fireEvent){fakeWindow.fireResize()}}var eventWasFired={};function getListenerFn(id){return function(){propertyReplacer.set(eventWasFired,id,!0)}}function listenerWasCalled(id){return!!eventWasFired[id]}function setUp(){propertyReplacer=new goog.testing.PropertyReplacer;propertyReplacer.set(goog.dom,"getViewportSize",getViewportSize);mockClock=new goog.testing.MockClock;mockClock.install();fakeWindow=new FakeWindow;setViewportSize(300,300);viewportSizeMonitor=new goog.dom.ViewportSizeMonitor(fakeWindow)}function tearDown(){propertyReplacer.reset();mockClock.uninstall()}function testResizeEvent(){goog.events.listen(viewportSizeMonitor,goog.events.EventType.RESIZE,getListenerFn(1));assertFalse("Listener should not be called if window was not resized",listenerWasCalled(1));setViewportSize(300,300,!0);assertFalse("Listener should not be called for bogus resize event",listenerWasCalled(1));setViewportSize(301,301,!0);assertTrue("Listener should be called for valid resize event",listenerWasCalled(1))}function testInstanceGetter(){var fakeWindow1=new FakeWindow,monitor1=goog.dom.ViewportSizeMonitor.getInstanceForWindow(fakeWindow1),monitor2=goog.dom.ViewportSizeMonitor.getInstanceForWindow(fakeWindow1);assertEquals("The same window should give us the same instance monitor",monitor1,monitor2);var fakeWindow2=new FakeWindow,monitor3=goog.dom.ViewportSizeMonitor.getInstanceForWindow(fakeWindow2);assertNotEquals("Different windows should give different instances",monitor1,monitor3);assertEquals("Monitors should match if opt_window is not provided",goog.dom.ViewportSizeMonitor.getInstanceForWindow(),goog.dom.ViewportSizeMonitor.getInstanceForWindow())}function testRemoveInstanceForWindow(){var fakeWindow1=new FakeWindow,monitor1=goog.dom.ViewportSizeMonitor.getInstanceForWindow(fakeWindow1);goog.dom.ViewportSizeMonitor.removeInstanceForWindow(fakeWindow1);assertTrue(monitor1.isDisposed());var monitor2=goog.dom.ViewportSizeMonitor.getInstanceForWindow(fakeWindow1);assertNotEquals(monitor1,monitor2)}