goog.provide("goog.structs.InversionMap");goog.require("goog.array");goog.require("goog.asserts");goog.structs.InversionMap=function(rangeArray,valueArray,opt_delta){this.rangeArray=null;goog.asserts.assert(rangeArray.length==valueArray.length,"rangeArray and valueArray must have the same length.");this.storeInversion_(rangeArray,opt_delta);this.values=valueArray};goog.structs.InversionMap.prototype.storeInversion_=function(rangeArray,opt_delta){this.rangeArray=rangeArray;for(var i=1;i<rangeArray.length;i++){if(null==rangeArray[i]){rangeArray[i]=rangeArray[i-1]+1}else if(opt_delta){rangeArray[i]+=rangeArray[i-1]}}};goog.structs.InversionMap.prototype.spliceInversion=function(rangeArray,valueArray,opt_delta){var otherMap=new goog.structs.InversionMap(rangeArray,valueArray,opt_delta),startRange=otherMap.rangeArray[0],endRange=goog.array.peek(otherMap.rangeArray),startSplice=this.getLeast(startRange),endSplice=this.getLeast(endRange);if(startRange!=this.rangeArray[startSplice]){startSplice++}this.rangeArray=this.rangeArray.slice(0,startSplice).concat(otherMap.rangeArray).concat(this.rangeArray.slice(endSplice+1));this.values=this.values.slice(0,startSplice).concat(otherMap.values).concat(this.values.slice(endSplice+1))};goog.structs.InversionMap.prototype.at=function(intKey){var index=this.getLeast(intKey);if(0>index){return null}return this.values[index]};goog.structs.InversionMap.prototype.getLeast=function(intKey){var arr=this.rangeArray,low=0,high=arr.length;while(8<high-low){var mid=high+low>>1;if(arr[mid]<=intKey){low=mid}else{high=mid}}for(;low<high;++low){if(intKey<arr[low]){break}}return low-1};