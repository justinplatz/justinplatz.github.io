goog.provide("goog.format.EmailAddressTest");goog.setTestOnly("goog.format.EmailAddressTest");goog.require("goog.array");goog.require("goog.format.EmailAddress");goog.require("goog.testing.jsunit");function testparseList(){assertParsedList("",[],"Failed to parse empty stringy");assertParsedList(",,",[],"Failed to parse string with commas only");assertParsedList("<foo@gmail.com>",["foo@gmail.com"]);assertParsedList("<foo@gmail.com>,",["foo@gmail.com"],"Failed to parse 1 address with trailing comma");assertParsedList("<foo@gmail.com>, ",["foo@gmail.com"],"Failed to parse 1 address with trailing whitespace and comma");assertParsedList(",<foo@gmail.com>",["foo@gmail.com"],"Failed to parse 1 address with leading comma");assertParsedList(" ,<foo@gmail.com>",["foo@gmail.com"],"Failed to parse 1 address with leading whitespace and comma");assertParsedList("<foo@gmail.com>, <bar@gmail.com>",["foo@gmail.com","bar@gmail.com"],"Failed to parse 2 email addresses");assertParsedList("<foo@gmail.com>, <bar@gmail.com>,",["foo@gmail.com","bar@gmail.com"],"Failed to parse 2 email addresses and trailing comma");assertParsedList("<foo@gmail.com>, <bar@gmail.com>, ",["foo@gmail.com","bar@gmail.com"],"Failed to parse 2 email addresses, trailing comma and whitespace");assertParsedList("John Doe <john@gmail.com>; Jane Doe <jane@gmail.com>, "+"<jerry@gmail.com>",["john@gmail.com","jane@gmail.com","jerry@gmail.com"],"Failed to parse addresses with semicolon separator")}function testparseListOpenersAndClosers(){assertParsedList("aaa@gmail.com, \"bbb@gmail.com\", <ccc@gmail.com>, "+"(ddd@gmail.com), [eee@gmail.com]",["aaa@gmail.com","\"bbb@gmail.com\"","ccc@gmail.com","(ddd@gmail.com)","[eee@gmail.com]"],"Failed to handle all 5 opener/closer characters")}function testparseListIdn(){var idnaddr="mailtest@\u4F8B\u3048.\u30C6\u30B9\u30C8";assertParsedList(idnaddr,[idnaddr])}function testparseListWithQuotedSpecialChars(){var res=assertParsedList("a\\\"b\\\"c <d@e.f>,\"g\\\"h\\\"i\\\\\" <j@k.l>",["d@e.f","j@k.l"]);assertEquals("Wrong name 0","a\"b\"c",res[0].getName());assertEquals("Wrong name 1","g\"h\"i\\",res[1].getName())}function testparseListWithCommaInLocalPart(){var res=assertParsedList("\"Doe, John\" <doe.john@gmail.com>, <someone@gmail.com>",["doe.john@gmail.com","someone@gmail.com"]);assertEquals("Doe, John",res[0].getName());assertEquals("",res[1].getName())}function testparseListWithWhitespaceSeparatedEmails(){var res=assertParsedList("a@b.com <c@d.com> e@f.com \"G H\" <g@h.com> i@j.com",["a@b.com","c@d.com","e@f.com","g@h.com","i@j.com"]);assertEquals("G H",res[3].getName())}function testparseListSystemNewlines(){assertParsedList("a@b.com\r\nc@d.com",["a@b.com","c@d.com"],"Failed to parse Windows newlines");assertParsedList("a@b.com\nc@d.com",["a@b.com","c@d.com"],"Failed to parse *nix newlines");assertParsedList("a@b.com\n\rc@d.com",["a@b.com","c@d.com"],"Failed to parse obsolete newlines");assertParsedList("a@b.com\rc@d.com",["a@b.com","c@d.com"],"Failed to parse pre-OS X Mac newlines")}function testToString(){var f=function(str){return goog.format.EmailAddress.parse(str).toString()};assertEquals("JOHN Doe <john@gmail.com>",f("JOHN Doe <john@gmail.com>"));assertEquals("JOHN Doe <john@gmail.com>",f(" JOHN  Doe  <john@gmail.com> "));assertEquals("john@gmail.com",f("<john@gmail.com>"));assertEquals("john@gmail.com",f("john@gmail.com"));assertEquals("JOHN Doe",f("JOHN Doe <>"));assertEquals("\"JOHN, Doe\" <john@gmail.com>",f("JOHN, Doe <john@gmail.com>"));assertEquals("\"JOHN(Johnny) Doe\" <john@gmail.com>",f("JOHN(Johnny) Doe <john@gmail.com>"));assertEquals("\"JOHN[Johnny] Doe\" <john@gmail.com>",f("JOHN[Johnny] Doe <john@gmail.com>"));assertEquals("\"JOHN@work Doe\" <john@gmail.com>",f("JOHN@work Doe <john@gmail.com>"));assertEquals("\"JOHN:theking Doe\" <john@gmail.com>",f("JOHN:theking Doe <john@gmail.com>"));assertEquals("\"JOHN\\\\ Doe\" <john@gmail.com>",f("JOHN\\ Doe <john@gmail.com>"));assertEquals("\"JOHN.com Doe\" <john@gmail.com>",f("JOHN.com Doe <john@gmail.com>"));assertEquals("\"JOHN, Doe\" <john@gmail.com>",f("\"JOHN, Doe\" <john@gmail.com>"));assertEquals("JOHN Doe <john@gmail.com>",f("\"JOHN Doe\" <john@gmail.com>"));assertEquals("\"JOHN, Doe\" <john@gmail.com>",f("JOHN, \"Doe\" <john@gmail.com>"));assertEquals("JOHN Doe <john@gmail.com>",f("JOHN \"Doe\" <john@gmail.com>"));assertEquals("\"JOHN, Doe\" <john@gmail.com>",f("JOHN, \\\"Doe\\\" <john@gmail.com>"))}function doIsValidTest(testFunc,valid,invalid){goog.array.forEach(valid,function(str){assertTrue("\""+str+"\" should be valid.",testFunc(str))});goog.array.forEach(invalid,function(str){assertFalse("\""+str+"\" should be invalid.",testFunc(str))})}function testIsValid(){var valid=["e@b.eu","<a.b+foo@c.com>","eric <e@b.com>","\"e\" <e@b.com>","a@FOO.MUSEUM","bla@b.co.ac.uk","bla@a.b.com","o'hara@gm.com","plus+is+allowed@gmail.com","!/#$%&'*+-=~|`{}?^_@expample.com","confirm-bhk=modulo.org@yahoogroups.com"],invalid=["e","","e @c.com","a@b","foo.com","foo@c..com","test@gma=il.com","aaa@gmail","has some spaces@gmail.com","has@three@at@signs.com","@no-local-part.com","\u307F.\u3093-\u3042@\u307F\u3093\u3042.\u307F\u3093\u3042","\u307F\u3093\u3042@test.com","test@test.\u307F\u3093\u3042","test@\u307F\u3093\u3042.com","fullwidthfullstop@sld"+"\uFF0E"+"tld","ideographicfullstop@sld"+"\u3002"+"tld","halfwidthideographicfullstop@sld"+"\uFF61"+"tld"];doIsValidTest(goog.format.EmailAddress.isValidAddress,valid,invalid)}function testIsValidLocalPart(){var valid=["e","a.b+foo","o'hara","user+someone","!/#$%&'*+-=~|`{}?^_","confirm-bhk=modulo.org"],invalid=["A@b@c","a\"b(c)d,e:f;g<h>i[j\\k]l","just\"not\"right","this is\"not\\allowed","this\\ still\"not\\\\allowed","has some spaces"];doIsValidTest(goog.format.EmailAddress.isValidLocalPartSpec,valid,invalid)}function testIsValidDomainPart(){var valid=["example.com","dept.example.org","long.domain.with.lots.of.dots"],invalid=["","@has.an.at.sign","..has.leading.dots","gma=il.com","DoesNotHaveADot","sld"+"\uFF0E"+"tld","sld"+"\u3002"+"tld","sld"+"\uFF61"+"tld"];doIsValidTest(goog.format.EmailAddress.isValidDomainPartSpec,valid,invalid)}function assertParsedList(inputString,expectedList,opt_message){var message=opt_message||"Should parse address correctly",result=goog.format.EmailAddress.parseList(inputString);assertEquals("Should have correct # of addresses",expectedList.length,result.length);for(var i=0;i<expectedList.length;++i){assertEquals(message,expectedList[i],result[i].getAddress())}return result}