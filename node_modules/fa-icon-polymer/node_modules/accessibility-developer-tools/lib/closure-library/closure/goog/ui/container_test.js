goog.provide("goog.ui.ContainerTest");goog.setTestOnly("goog.ui.ContainerTest");goog.require("goog.a11y.aria");goog.require("goog.dom");goog.require("goog.dom.TagName");goog.require("goog.dom.classlist");goog.require("goog.events");goog.require("goog.events.Event");goog.require("goog.events.KeyCodes");goog.require("goog.events.KeyEvent");goog.require("goog.testing.events");goog.require("goog.testing.jsunit");goog.require("goog.ui.Component");goog.require("goog.ui.Container");goog.require("goog.ui.Control");var sandbox,containerElement,container,keyContainer,listContainer;function setUpPage(){sandbox=goog.dom.getElement("sandbox")}function setUp(){container=new goog.ui.Container;keyContainer=null;listContainer=null;sandbox.innerHTML="<div id=\"containerElement\" class=\"goog-container\">\n"+"  <div class=\"goog-control\" id=\"hello\">Hello</div>\n"+"  <div class=\"goog-control\" id=\"world\">World</div>\n"+"</div>";containerElement=goog.dom.getElement("containerElement")}function tearDown(){goog.dom.removeChildren(sandbox);container.dispose();goog.dispose(keyContainer);goog.dispose(listContainer)}function testDecorateHidden(){containerElement.style.display="none";assertTrue("Container must be visible",container.isVisible());container.decorate(containerElement);assertFalse("Container must be hidden",container.isVisible());container.forEachChild(function(control){assertTrue("Child control "+control.getId()+" must report being "+"visible, even if in a hidden container",control.isVisible())})}function testDecorateDisabled(){goog.dom.classlist.add(containerElement,"goog-container-disabled");assertTrue("Container must be enabled",container.isEnabled());container.decorate(containerElement);assertFalse("Container must be disabled",container.isEnabled());container.forEachChild(function(control){assertFalse("Child control "+control.getId()+" must be disabled, "+"because the host container is disabled",control.isEnabled())})}function testDecorateFocusableContainer(){container.decorate(containerElement);assertTrue("Container must be focusable",container.isFocusable());container.forEachChild(function(control){assertFalse("Child control "+control.getId()+" must not be "+"focusable",control.isSupportedState(goog.ui.Component.State.FOCUSED))})}function testDecorateFocusableChildrenContainer(){container.setFocusable(!1);container.setFocusableChildrenAllowed(!0);container.decorate(containerElement);assertFalse("Container must not be focusable",container.isFocusable());container.forEachChild(function(control){assertTrue("Child control "+control.getId()+" must be "+"focusable",control.isSupportedState(goog.ui.Component.State.FOCUSED))})}function testHighlightOnEnter(){container.decorate(containerElement);assertFalse("Child 0 should initially not be highlighted",container.getChildAt(0).isHighlighted());goog.testing.events.fireMouseOverEvent(container.getChildAt(0).getElement(),sandbox);assertTrue("Child 0 should become highlighted after a mouse over",container.getChildAt(0).isHighlighted());assertEquals("Child 0 should be the active descendant",container.getChildAt(0).getElement(),goog.a11y.aria.getActiveDescendant(container.getElement()));goog.testing.events.fireMouseOverEvent(container.getChildAt(1).getElement(),container.getChildAt(0).getElement());assertFalse("Child 0 should lose highlight when child 1 is moused "+"over, even if no mouseout occurs.",container.getChildAt(0).isHighlighted());assertTrue("Child 1 should now be highlighted.",container.getChildAt(1).isHighlighted());assertEquals("Child 1 should be the active descendant",container.getChildAt(1).getElement(),goog.a11y.aria.getActiveDescendant(container.getElement()))}function testHighlightOnEnterPreventable(){container.decorate(containerElement);goog.events.listen(container,goog.ui.Component.EventType.ENTER,function(event){event.preventDefault()});goog.testing.events.fireMouseOverEvent(container.getChildAt(0).getElement(),sandbox);assertFalse("Child 0 should not be highlighted if preventDefault called",container.getChildAt(0).isHighlighted())}function testHighlightDisabled(){container.decorate(containerElement);container.getChildAt(0).setEnabled(!1);goog.testing.events.fireMouseOverEvent(container.getChildAt(0).getElement(),sandbox);assertFalse("Disabled children should not be highlighted",container.getChildAt(0).isHighlighted())}function testGetOwnerControl(){container.decorate(containerElement);assertEquals("Must return appropriate control given an element in the "+"control.",container.getChildAt(1),container.getOwnerControl(container.getChildAt(1).getElement()));assertNull("Must return null for element not associated with control.",container.getOwnerControl(document.body));assertNull("Must return null if given null node",container.getOwnerControl(null))}function testShowEvent(){container.decorate(containerElement);container.setVisible(!1);var eventFired=!1;goog.events.listen(container,goog.ui.Component.EventType.SHOW,function(){assertFalse("Container must not be visible when SHOW event is "+"fired",container.isVisible());eventFired=!0});container.setVisible(!0);assertTrue("SHOW event expected",eventFired)}function testAfterShowEvent(){container.decorate(containerElement);container.setVisible(!1);var eventFired=!1;goog.events.listen(container,goog.ui.Container.EventType.AFTER_SHOW,function(){assertTrue("Container must be visible when AFTER_SHOW event is "+"fired",container.isVisible());eventFired=!0});container.setVisible(!0);assertTrue("AFTER_SHOW event expected",eventFired)}function testHideEvents(){var events=[];container.decorate(containerElement);container.setVisible(!0);var eventFired=!1;goog.events.listen(container,goog.ui.Component.EventType.HIDE,function(e){assertTrue("Container must be visible when HIDE event is fired",container.isVisible());events.push(e.type)});goog.events.listen(container,goog.ui.Container.EventType.AFTER_HIDE,function(e){assertFalse("Container must not be visible when AFTER_HIDE event is fired",container.isVisible());events.push(e.type)});container.setVisible(!1);assertArrayEquals("HIDE event followed by AFTER_HIDE expected",[goog.ui.Component.EventType.HIDE,goog.ui.Container.EventType.AFTER_HIDE],events)}function ListContainer(){goog.ui.Container.call(this)}goog.inherits(ListContainer,goog.ui.Container);ListContainer.prototype.createDom=function(){ListContainer.superClass_.createDom.call(this);var ul=this.getDomHelper().createDom(goog.dom.TagName.UL);this.forEachChild(function(child){child.createDom();var childEl=child.getElement();ul.appendChild(this.getDomHelper().createDom(goog.dom.TagName.LI,{},childEl))},this);this.getContentElement().appendChild(ul)};function testGetOwnerControlWithNoRenderingInAddChild(){listContainer=new ListContainer;var control=new goog.ui.Control("item");listContainer.addChild(control);listContainer.render();var ownerControl=listContainer.getOwnerControl(control.getElement());assertEquals("Control was added with addChild(control, false)",control,ownerControl)}function KeyHandlingContainer(){goog.ui.Container.call(this);this.keyEventsHandled=0}goog.inherits(KeyHandlingContainer,goog.ui.Container);KeyHandlingContainer.prototype.handleKeyEventInternal=function(){this.keyEventsHandled++;return!1};function testHandleKeyEvent_onlyHandlesWhenVisible(){keyContainer=new KeyHandlingContainer;keyContainer.decorate(containerElement);keyContainer.setVisible(!1);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("No key events should be handled",0,keyContainer.keyEventsHandled);keyContainer.setVisible(!0);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("One key event should be handled",1,keyContainer.keyEventsHandled)}function testHandleKeyEvent_onlyHandlesWhenEnabled(){keyContainer=new KeyHandlingContainer;keyContainer.decorate(containerElement);keyContainer.setVisible(!0);keyContainer.setEnabled(!1);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("No key events should be handled",0,keyContainer.keyEventsHandled);keyContainer.setEnabled(!0);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("One key event should be handled",1,keyContainer.keyEventsHandled)}function testHandleKeyEvent_childlessContainersIgnoreKeyEvents(){keyContainer=new KeyHandlingContainer;keyContainer.render();keyContainer.setVisible(!0);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("No key events should be handled",0,keyContainer.keyEventsHandled);keyContainer.addChild(new goog.ui.Control);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("One key event should be handled",1,keyContainer.keyEventsHandled)}function testHandleKeyEvent_alwaysHandlesWithKeyEventTarget(){keyContainer=new KeyHandlingContainer;keyContainer.render();keyContainer.setKeyEventTarget(goog.dom.createDom(goog.dom.TagName.DIV));keyContainer.setVisible(!0);keyContainer.handleKeyEvent(new goog.events.Event);assertEquals("One key events should be handled",1,keyContainer.keyEventsHandled)}function testHandleKeyEventInternal_onlyHandlesUnmodified(){container.setKeyEventTarget(sandbox);for(var event=new goog.events.KeyEvent(goog.events.KeyCodes.ESC,0,!1,null),propertyNames=["shiftKey","altKey","ctrlKey","metaKey"],i=0,propertyName;propertyName=propertyNames[i];i++){assertTrue("Event should be handled when modifer key is not pressed.",container.handleKeyEventInternal(event));event[propertyName]=!0;assertFalse("Event should not be handled when modifer key is pressed.",container.handleKeyEventInternal(event));event[propertyName]=!1}}function testOpenFollowsHighlight(){container.decorate(containerElement);container.setOpenFollowsHighlight(!0);assertTrue("isOpenFollowsHighlight should return true",container.isOpenFollowsHighlight());container.forEachChild(function(child){child.setSupportedState(goog.ui.Component.State.OPENED,!0)});container.getChildAt(1).setOpen(!0);assertFalse("Child 0 should initially not be highlighted",container.getChildAt(0).isHighlighted());goog.testing.events.fireMouseOverEvent(container.getChildAt(0).getElement(),sandbox);assertTrue("Child 0 should become highlighted after a mouse over",container.getChildAt(0).isHighlighted());assertTrue("Child 0 should become open after higlighted",container.getChildAt(0).isOpen());assertFalse("Child 1 should become closed once 0 is open",container.getChildAt(1).isOpen());assertEquals("OpenItem should be child 0",container.getChildAt(0),container.getOpenItem())}function testOpenNotFollowsHighlight(){container.decorate(containerElement);container.setOpenFollowsHighlight(!1);assertFalse("isOpenFollowsHighlight should return false",container.isOpenFollowsHighlight());container.forEachChild(function(child){child.setSupportedState(goog.ui.Component.State.OPENED,!0)});container.getChildAt(1).setOpen(!0);assertFalse("Child 0 should initially not be highlighted",container.getChildAt(0).isHighlighted());goog.testing.events.fireMouseOverEvent(container.getChildAt(0).getElement(),sandbox);assertTrue("Child 0 should become highlighted after a mouse over",container.getChildAt(0).isHighlighted());assertFalse("Child 0 should remain closed after higlighted",container.getChildAt(0).isOpen());assertTrue("Child 1 should remain open",container.getChildAt(1).isOpen());assertEquals("OpenItem should be child 1",container.getChildAt(1),container.getOpenItem())}function testRemoveChild(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A"),b=new goog.ui.Control("B"),c=new goog.ui.Control("C");a.setId("a");b.setId("b");c.setId("c");container.addChild(a,!0);container.addChild(b,!0);container.addChild(c,!0);container.setHighlightedIndex(2);assertEquals("Parent must remove and return child by ID",b,container.removeChild("b"));assertNull("Parent must no longer contain this child",container.getChild("b"));assertEquals("Highlighted index must be decreased",1,container.getHighlightedIndex());assertTrue("The removed control must handle its own mouse events",b.isHandleMouseEvents());assertEquals("Parent must remove and return child",c,container.removeChild(c));assertNull("Parent must no longer contain this child",container.getChild("c"));assertFalse("This child must no longer be highlighted",c.isHighlighted());assertTrue("The removed control must handle its own mouse events",c.isHandleMouseEvents());assertEquals("Parent must remove and return child by index",a,container.removeChildAt(0));assertNull("Parent must no longer contain this child",container.getChild("a"));assertTrue("The removed control must handle its own mouse events",a.isHandleMouseEvents())}function testRemoveHighlightedDisposedChild(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A");container.addChild(a,!0);container.setHighlightedIndex(0);a.dispose();container.removeChild(a);container.dispose()}function assertHighlightedIndex(explanation,index){assertEquals(explanation,index,container.getHighlightedIndex());for(var i=0;i<container.getChildCount();i++){if(i==index){assertTrue("Child at highlighted index should be highlighted",container.getChildAt(i).isHighlighted())}else{assertFalse("Only child at highlighted index should be highlighted",container.getChildAt(i).isHighlighted())}}}function testUpdateHighlightedIndex_updatesWhenChildrenAreAdded(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A"),b=new goog.ui.Control("B"),c=new goog.ui.Control("C");container.addChild(a);container.setHighlightedIndex(0);assertHighlightedIndex("Highlighted index should match set value",0);container.addChildAt(b,0);assertHighlightedIndex("Highlighted index should be increased",1);container.addChildAt(c,2);assertHighlightedIndex("Highlighted index should not change",1);container.dispose()}function testUpdateHighlightedIndex_updatesWhenChildrenAreMoved(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A"),b=new goog.ui.Control("B"),c=new goog.ui.Control("C");container.addChild(a);container.addChild(b);container.addChild(c);container.setHighlightedIndex(2);container.addChildAt(a,1,!1);assertHighlightedIndex("Highlighted index should not change",2);container.addChildAt(c,1,!1);assertHighlightedIndex("Highlighted index must follow the moved child",1);container.addChildAt(b,2,!1);assertHighlightedIndex("Highlighted index must be decreased",0);container.addChildAt(b,0,!1);assertHighlightedIndex("Highlighted index must be increased",1);container.dispose()}function testUpdateHighlightedIndex_notChangedOnNoOp(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);container.addChild(new goog.ui.Control("A"));container.addChild(new goog.ui.Control("B"));container.setHighlightedIndex(1);container.addChildAt(container.getChildAt(0),0,!1);assertHighlightedIndex("Highlighted index must not change",1);container.dispose()}function testUpdateHighlightedIndex_notChangedWhenNoChildSelected(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A"),b=new goog.ui.Control("B"),c=new goog.ui.Control("C");container.addChild(a);container.addChild(b);container.addChild(c);container.addChildAt(a,2,!1);container.addChildAt(b,1,!1);container.addChildAt(c,2,!1);assertHighlightedIndex("Highlighted index must not change",-1);container.dispose()}function testUpdateHighlightedIndex_indexStaysInBoundsWhenMovedToMaxIndex(){goog.dom.removeChildren(containerElement);container.decorate(containerElement);var a=new goog.ui.Control("A"),b=new goog.ui.Control("B");container.addChild(a);container.addChild(b);container.setHighlightedIndex(0);container.addChildAt(a,2);assertEquals("Child should be moved to index 1",a,container.getChildAt(1));assertEquals("Child count should not change",2,container.getChildCount());assertHighlightedIndex("Highlighted index must point to new index",1);container.dispose()}