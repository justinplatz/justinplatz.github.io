goog.provide("goog.math.interpolator.Spline1");goog.require("goog.array");goog.require("goog.asserts");goog.require("goog.math");goog.require("goog.math.interpolator.Interpolator1");goog.require("goog.math.tdma");goog.math.interpolator.Spline1=function(){this.x_=[];this.coeffs_=[[0,0,0,Number.NaN]]};goog.math.interpolator.Spline1.prototype.setData=function(x,y){goog.asserts.assert(x.length==y.length,"input arrays to setData should have the same length");if(0<x.length){this.coeffs_=this.computeSplineCoeffs_(x,y);this.x_=x.slice()}else{this.coeffs_=[[0,0,0,Number.NaN]];this.x_=[]}};goog.math.interpolator.Spline1.prototype.interpolate=function(x){var pos=goog.array.binarySearch(this.x_,x);if(0>pos){pos=-pos-2}pos=goog.math.clamp(pos,0,this.coeffs_.length-1);var d=x-this.x_[pos],d2=d*d,d3=d2*d,coeffs=this.coeffs_[pos];return coeffs[0]*d3+coeffs[1]*d2+coeffs[2]*d+coeffs[3]};goog.math.interpolator.Spline1.prototype.computeSplineCoeffs_=function(x,y){for(var nIntervals=x.length-1,dx=Array(nIntervals),delta=Array(nIntervals),i=0;i<nIntervals;++i){dx[i]=x[i+1]-x[i];delta[i]=(y[i+1]-y[i])/dx[i]}var coeffs=[];if(0==nIntervals){coeffs[0]=[0,0,0,y[0]]}else if(1==nIntervals){coeffs[0]=[0,0,delta[0],y[0]]}else if(2==nIntervals){var c3=0,c2=(delta[1]-delta[0])/(dx[0]+dx[1]),c1=delta[0]-c2*dx[0],c0=y[0];coeffs[0]=[c3,c2,c1,c0]}else{for(var deriv=this.computeDerivatives(dx,delta),i=0;i<nIntervals;++i){var c3=(deriv[i]-2*delta[i]+deriv[i+1])/(dx[i]*dx[i]),c2=(3*delta[i]-2*deriv[i]-deriv[i+1])/dx[i],c1=deriv[i],c0=y[i];coeffs[i]=[c3,c2,c1,c0]}}return coeffs};goog.math.interpolator.Spline1.prototype.computeDerivatives=function(dx,slope){var nIntervals=dx.length,mainDiag=Array(nIntervals+1);mainDiag[0]=dx[1];for(var i=1;i<nIntervals;++i){mainDiag[i]=2*(dx[i]+dx[i-1])}mainDiag[nIntervals]=dx[nIntervals-2];for(var subDiag=Array(nIntervals),i=0;i<nIntervals;++i){subDiag[i]=dx[i+1]}subDiag[nIntervals-1]=dx[nIntervals-2]+dx[nIntervals-1];var supDiag=Array(nIntervals);supDiag[0]=dx[0]+dx[1];for(var i=1;i<nIntervals;++i){supDiag[i]=dx[i-1]}var vecRight=Array(nIntervals+1);vecRight[0]=((dx[0]+2*supDiag[0])*dx[1]*slope[0]+dx[0]*dx[0]*slope[1])/supDiag[0];for(var i=1;i<nIntervals;++i){vecRight[i]=3*(dx[i]*slope[i-1]+dx[i-1]*slope[i])}vecRight[nIntervals]=(dx[nIntervals-1]*dx[nIntervals-1]*slope[nIntervals-2]+(2*subDiag[nIntervals-1]+dx[nIntervals-1])*dx[nIntervals-2]*slope[nIntervals-1])/subDiag[nIntervals-1];var deriv=goog.math.tdma.solve(subDiag,mainDiag,supDiag,vecRight);return deriv};goog.math.interpolator.Spline1.prototype.getInverse=function(){for(var interpolator=new goog.math.interpolator.Spline1,y=[],i=0;i<this.x_.length;i++){y[i]=this.interpolate(this.x_[i])}interpolator.setData(y,this.x_);return interpolator};