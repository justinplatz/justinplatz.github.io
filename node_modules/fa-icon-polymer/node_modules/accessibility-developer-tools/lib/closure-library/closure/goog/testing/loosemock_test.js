goog.provide("goog.testing.LooseMockTest");goog.setTestOnly("goog.testing.LooseMockTest");goog.require("goog.testing.LooseMock");goog.require("goog.testing.PropertyReplacer");goog.require("goog.testing.jsunit");goog.require("goog.testing.mockmatchers");var RealObject=function(){};RealObject.prototype.a=function(){fail("real object should never be called")};RealObject.prototype.b=function(){fail("real object should never be called")};var mock,stubs;function setUp(){var obj=new RealObject;mock=new goog.testing.LooseMock(obj);stubs=new goog.testing.PropertyReplacer}function tearDown(){stubs.reset()}function silenceFailureLogging(){if(goog.global.G_testRunner){stubs.set(goog.global.G_testRunner,"logTestFailure",goog.nullFunction)}}function unsilenceFailureLogging(){stubs.reset()}function assertThrowsQuiet(var_args){silenceFailureLogging();assertThrowsJsUnitException.apply(null,arguments);unsilenceFailureLogging()}function testSimpleExpectations(){mock.a(5);mock.b();mock.$replay();mock.a(5);mock.b();mock.$verify();mock.$reset();mock.a();mock.b();mock.$replay();mock.b();mock.a();mock.$verify();mock.$reset();mock.a(5).$times(2);mock.a(5);mock.a(2);mock.$replay();mock.a(5);mock.a(5);mock.a(5);mock.a(2);mock.$verify()}function testMultipleExpectations(){mock.a().$returns(1);mock.a().$returns(2);mock.$replay();assertEquals(1,mock.a());assertEquals(2,mock.a());mock.$verify()}function testMultipleExpectationArgs(){mock.a("asdf").$anyTimes();mock.a("qwer").$anyTimes();mock.b().$times(3);mock.$replay();mock.a("asdf");mock.b();mock.a("asdf");mock.a("qwer");mock.b();mock.a("qwer");mock.b();mock.$verify();mock.$reset();mock.a("asdf").$anyTimes();mock.a("qwer").$anyTimes();mock.$replay();mock.a("asdf");mock.a("qwer");goog.bind(mock.a,mock,"asdf");goog.bind(mock.$verify,mock)}function testSameMethodOutOfOrder(){mock.a("foo").$returns(1);mock.a("bar").$returns(2);mock.$replay();assertEquals(2,mock.a("bar"));assertEquals(1,mock.a("foo"))}function testSameMethodDifferentReturnValues(){mock.a("foo").$returns(1).$times(2);mock.a("foo").$returns(3);mock.a("bar").$returns(2);mock.$replay();assertEquals(1,mock.a("foo"));assertEquals(2,mock.a("bar"));assertEquals(1,mock.a("foo"));assertEquals(3,mock.a("foo"));assertThrowsQuiet(function(){mock.a("foo");mock.$verify()})}function testSameMethodBrokenExpectations(){mock.a("foo").$returns(1).$anyTimes();mock.a("bar").$returns(2);mock.a("foo").$returns(3);assertThrowsQuiet(goog.bind(mock.$replay,mock));mock.$reset();mock.a(goog.testing.mockmatchers.isString).$returns(1).$anyTimes();mock.a("bar").$returns(2);mock.$replay();assertEquals(1,mock.a("foo"));assertEquals(1,mock.a("bar"));assertThrowsQuiet(goog.bind(mock.$verify,mock))}function testSameMethodMultipleAnyTimes(){mock.a("foo").$returns(1).$anyTimes();mock.a("foo").$returns(2).$anyTimes();mock.$replay();assertEquals(1,mock.a("foo"));assertEquals(1,mock.a("foo"));assertEquals(1,mock.a("foo"));mock.$verify()}function testFailingFast(){mock.a().$anyTimes();mock.$replay();mock.a();mock.a();assertThrowsQuiet(goog.bind(mock.b,mock));mock.$reset();mock.a();mock.b();mock.$replay();mock.a();mock.b();var message;silenceFailureLogging();try{mock.a()}catch(e){message=e.message}unsilenceFailureLogging();assertTrue("No exception thrown on unexpected call",goog.isDef(message));assertContains("Too many calls to a",message)}function testTimes(){mock.a().$times(3);mock.b().$times(2);mock.$replay();mock.a();mock.b();mock.b();mock.a();mock.a();mock.$verify()}function testFailingSlow(){mock.a().$times(3);mock.$replay();mock.a();mock.a();assertThrowsQuiet(goog.bind(mock.$verify,mock));mock.$reset();mock.a().$times(3);mock.b().$times(3);mock.$replay();mock.a();mock.b();mock.a();mock.b();assertThrowsQuiet(goog.bind(mock.$verify,mock));mock.$reset();mock.a("asdf").$anyTimes();mock.$replay();mock.a("asdf");assertThrowsQuiet(goog.bind(mock.a,mock,"qwert"));assertThrowsQuiet(goog.bind(mock.$verify,mock))}function testArgsAndReturns(){mock.a("asdf").$atLeastOnce().$returns(5);mock.b("qwer").$times(2).$returns(3);mock.$replay();assertEquals(5,mock.a("asdf"));assertEquals(3,mock.b("qwer"));assertEquals(5,mock.a("asdf"));assertEquals(5,mock.a("asdf"));assertEquals(3,mock.b("qwer"));mock.$verify()}function testThrows(){mock.a().$throws("exception!");mock.$replay();assertThrows(goog.bind(mock.a,mock));mock.$verify()}function testDoes(){mock.a(1,2).$does(function(a,b){return a+b});mock.$replay();assertEquals("Mock should call the function",3,mock.a(1,2));mock.$verify()}function testIgnoresExtraCalls(){mock=new goog.testing.LooseMock(RealObject,!0);mock.a();mock.$replay();mock.a();mock.b();mock.$verify()}function testSkipAnyTimes(){mock=new goog.testing.LooseMock(RealObject);mock.a(1).$anyTimes();mock.a(2).$anyTimes();mock.a(3).$anyTimes();mock.$replay();mock.a(1);mock.a(3);mock.$verify()}function testErrorMessageForBadArgs(){mock.a();mock.$anyTimes();mock.$replay();var message;silenceFailureLogging();try{mock.a("a")}catch(e){message=e.message}unsilenceFailureLogging();assertTrue("No exception thrown on verify",goog.isDef(message));assertContains("Bad arguments to a()",message)}