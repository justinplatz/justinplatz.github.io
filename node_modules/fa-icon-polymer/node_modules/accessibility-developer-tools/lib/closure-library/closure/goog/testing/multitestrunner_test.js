goog.module("goog.testing.MultiTestRunnerTest");goog.setTestOnly("goog.testing.MultiTestRunnerTest");var Promise=goog.require("goog.Promise"),events=goog.require("goog.events"),testingEvents=goog.require("goog.testing.events"),MockControl=goog.require("goog.testing.MockControl"),MultiTestRunner=goog.require("goog.testing.MultiTestRunner"),PropertyReplacer=goog.require("goog.testing.PropertyReplacer"),TestCase=goog.require("goog.testing.TestCase"),jsunit=goog.require("goog.testing.jsunit"),testSuite=goog.require("goog.testing.testSuite"),ALL_TESTS=["testdata/fake_passing_test.html","testdata/fake_failing_test.html","testdata/fake_failing_test2.html"],EMPTY_TEST="testdata/fake_failing_test3.html",SKIPPED_TEST="testdata/fake_failing_test4.html",testRunner,mocks=new MockControl,stubs=new PropertyReplacer;function assertArrayContainsString(string,array){var matcher=function(item){return string==item};assertArrayContainsMatcher(matcher,array)}function assertArrayContainsMatcher(matcher,array){for(var matching=0,i=0;i<array.length;i++){if(matcher(array[i])){matching++}}assertEquals("Matched "+matching+" items in array, but should be 1",1,matching)}function createEventPromise(target,eventType){return new Promise(function(resolve,reject){events.listen(target,eventType,resolve)})}var TestResults;function processTestResults(testResults){for(var failureReports=[],testNames=[],i=0;i<testResults.length;i++){for(var testName in testResults[i]){testNames.push(testName);failureReports=failureReports.concat(testResults[i][testName])}}return{failureReports:failureReports,testNames:testNames}}testSuite({setUpPage:function(){TestCase.getActiveTestCase().promiseTimeout=2e4},setUp:function(){testRunner=new MultiTestRunner().setPoolSize(3).addTests(ALL_TESTS)},tearDown:function(){testRunner.dispose();mocks.$tearDown();stubs.reset()},testStartButtonStartsTests:function(){testRunner.createDom();testRunner.render(document.getElementById("runner"));var el=testRunner.getElement(),startButton=el.querySelectorAll("button")[0];assertEquals("Start",startButton.innerHTML);var mockStart=mocks.createMethodMock(MultiTestRunner.prototype,"start");mockStart();mocks.$replayAll();testingEvents.fireClickSequence(startButton);mocks.$verifyAll()},testStopButtonStopsTests:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.createDom();testRunner.render(document.getElementById("runner"));var el=testRunner.getElement(),startButton=el.querySelectorAll("button")[0],stopButton=el.querySelectorAll("button")[1];assertEquals("Stop",stopButton.innerHTML);stubs.replace(MultiTestRunner.TestFrame.prototype,"runTest",function(){return});testingEvents.fireClickSequence(startButton);testingEvents.fireClickSequence(stopButton);return promise.then(function(results){assertContains("These tests did not finish:\n"+"testdata/fake_passing_test.html\n"+"testdata/fake_failing_test.html\n"+"testdata/fake_failing_test2.html",el.innerHTML)})},testDisposeInternal:function(){testRunner.dispose();assertTrue(testRunner.tableSorter_.isDisposed());assertTrue(testRunner.eh_.isDisposed());assertNull(testRunner.startButtonEl_);assertNull(testRunner.stopButtonEl_);assertNull(testRunner.logEl_);assertNull(testRunner.reportEl_);assertNull(testRunner.progressEl_);assertNull(testRunner.logTabEl_);assertNull(testRunner.reportTabEl_);assertNull(testRunner.statsTabEl_);assertNull(testRunner.statsEl_)},testRunsTestsAndReportsResults:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.render(document.getElementById("runner"));testRunner.start();return promise.then(function(results){var testResults=processTestResults(results.allTestResults),testNames=testResults.testNames;assertEquals(3,testNames.length);assertArrayContainsString("testdata/fake_failing_test2:testFail",testNames);assertArrayContainsString("testdata/fake_failing_test:testFail",testNames);assertArrayContainsString("testdata/fake_passing_test:testPass",testNames);var failureReports=testResults.failureReports,failedTests=testRunner.getTestsThatFailed();assertEquals(2,failureReports.length);assertEquals(2,failedTests.length);assertArrayContainsString("testdata/fake_failing_test.html",failedTests);assertArrayContainsString("testdata/fake_failing_test2.html",failedTests)})},testMissingTestResultsIsAFailure:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.addTests(EMPTY_TEST);testRunner.render(document.getElementById("runner"));testRunner.start();return promise.then(function(results){var testResults=processTestResults(results.allTestResults),testNames=testResults.testNames;assertEquals(4,testNames.length);assertArrayContainsString("testdata/fake_failing_test3",testNames);var failureReports=testResults.failureReports,failedTests=testRunner.getTestsThatFailed();assertEquals(3,failureReports.length);assertEquals(3,failedTests.length);assertArrayContainsString("testdata/fake_failing_test3.html",failedTests)})},testShouldRunTestsFalseIsSuccess:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.addTests(SKIPPED_TEST);testRunner.render(document.getElementById("runner"));testRunner.start();return promise.then(function(results){var testResults=processTestResults(results.allTestResults),testNames=testResults.testNames;assertEquals(4,testNames.length);assertArrayContainsString("testdata/fake_failing_test4",testNames);var failureReports=testResults.failureReports,failedTests=testRunner.getTestsThatFailed();assertNotContains("testdata/fake_failing_test4",failedTests)})},testRunTestsWithEmptyTestList:function(){var testRunner=new MultiTestRunner().setPoolSize(3).addTests([]),promise=createEventPromise(testRunner,"testsFinished");testRunner.render(document.getElementById("runner"));testRunner.start();return promise.then(function(results){var allTestResults=results.allTestResults;assertEquals(0,allTestResults.length);var failureReports=processTestResults(allTestResults).failureReports;assertEquals(0,failureReports.length);assertEquals(0,testRunner.getTestsThatFailed().length);testRunner.dispose()})},testFilterFunctionFiltersTest:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.render(document.getElementById("runner"));testRunner.setFilterFunction(function(test){return-1!=test.indexOf("fake_failing_test2")});testRunner.start();return promise.then(function(results){var allTestResults=results.allTestResults;assertEquals(1,allTestResults.length);var failureReports=processTestResults(allTestResults).failureReports,failedTests=testRunner.getTestsThatFailed();assertEquals(1,failureReports.length);assertEquals(1,failedTests.length);assertArrayContainsString("testdata/fake_failing_test2.html",failedTests)})},testTimeoutFailsAfterTimeout:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.render(document.getElementById("runner"));testRunner.setTimeout(0);testRunner.start();return promise.then(function(results){var testResults=processTestResults(results.allTestResults),testNames=testResults.testNames;assertEquals(3,testNames.length);assertArrayContainsString("testdata/fake_failing_test2",testNames);assertArrayContainsString("testdata/fake_failing_test",testNames);assertArrayContainsString("testdata/fake_passing_test",testNames);var failureReports=testResults.failureReports,failedTests=testRunner.getTestsThatFailed();assertEquals(3,failureReports.length);assertEquals(3,failedTests.length);assertContains("timed out",failureReports[0]);assertContains("timed out",failureReports[1]);assertContains("timed out",failureReports[2]);assertArrayContainsString("testdata/fake_passing_test.html",failedTests);assertArrayContainsString("testdata/fake_failing_test.html",failedTests);assertArrayContainsString("testdata/fake_failing_test2.html",failedTests)})},testRunsAllTestsWhenPoolSizeSmallerThanTotalTests:function(){var promise=createEventPromise(testRunner,"testsFinished");testRunner.render(document.getElementById("runner"));testRunner.setPoolSize(1);testRunner.start();return promise.then(function(results){assertEquals(3,results.allTestResults.length);var testResults=processTestResults(results.allTestResults),testNames=testResults.testNames;assertEquals(3,testNames.length);assertArrayContainsString("testdata/fake_failing_test2:testFail",testNames);assertArrayContainsString("testdata/fake_failing_test:testFail",testNames);assertArrayContainsString("testdata/fake_passing_test:testPass",testNames);var failureReports=testResults.failureReports,failedTests=testRunner.getTestsThatFailed();assertEquals(2,failureReports.length);assertEquals(2,failedTests.length);assertArrayContainsString("testdata/fake_failing_test.html",failedTests);assertArrayContainsString("testdata/fake_failing_test2.html",failedTests)})},testFrameGetStats:function(){var frame=new MultiTestRunner.TestFrame("/",2e3,!1);frame.testFile_="foo";frame.isSuccess_=!0;frame.runTime_=42;frame.totalTime_=9e3;frame.numFilesLoaded_=4;assertObjectEquals({testFile:"foo",success:!0,runTime:42,totalTime:9e3,numFilesLoaded:4},frame.getStats())},testFrameDisposeInternal:function(){var frame=new MultiTestRunner.TestFrame("",2e3,!1);frame.createDom();frame.render();stubs.replace(frame,"checkForCompletion_",function(){return});frame.runTest(ALL_TESTS[0]);assertEquals(1,frame.getDomHelper().getElementsByTagNameAndClass("iframe").length);frame.dispose();assertTrue(frame.eh_.isDisposed());assertEquals(0,frame.getDomHelper().getElementsByTagNameAndClass("iframe").length);assertNull(frame.iframeEl_)}});