goog.provide("goog.structs.MapTest");goog.setTestOnly("goog.structs.MapTest");goog.require("goog.iter");goog.require("goog.structs");goog.require("goog.structs.Map");goog.require("goog.testing.jsunit");function stringifyMap(m){for(var keys=goog.structs.getKeys(m),s="",i=0;i<keys.length;i++){s+=keys[i]+m[keys[i]]}return s}function getMap(){var m=new goog.structs.Map;m.set("a",0);m.set("b",1);m.set("c",2);m.set("d",3);return m}function testGetCount(){var m=getMap();assertEquals("count, should be 4",m.getCount(),4);m.remove("d");assertEquals("count, should be 3",m.getCount(),3)}function testKeys(){var m=getMap();assertEquals("getKeys, The keys should be a,b,c",m.getKeys().join(","),"a,b,c,d")}function testValues(){var m=getMap();assertEquals("getValues, The values should be 0,1,2",m.getValues().join(","),"0,1,2,3")}function testContainsKey(){var m=getMap();assertTrue("containsKey, Should contain the 'a' key",m.containsKey("a"));assertFalse("containsKey, Should not contain the 'e' key",m.containsKey("e"))}function testClear(){var m=getMap();m.clear();assertTrue("cleared so it should be empty",m.isEmpty());assertTrue("cleared so it should not contain 'a' key",!m.containsKey("a"))}function testAddAll(){var m=new goog.structs.Map;m.addAll({a:0,b:1,c:2,d:3});assertTrue("addAll so it should not be empty",!m.isEmpty());assertTrue("addAll so it should contain 'c' key",m.containsKey("c"));var m2=new goog.structs.Map;m2.addAll(m);assertTrue("addAll so it should not be empty",!m2.isEmpty());assertTrue("addAll so it should contain 'c' key",m2.containsKey("c"))}function testConstructor(){var m=getMap(),m2=new goog.structs.Map(m);assertTrue("constr with Map so it should not be empty",!m2.isEmpty());assertTrue("constr with Map so it should contain 'c' key",m2.containsKey("c"))}function testConstructorWithVarArgs(){var m=new goog.structs.Map("a",1);assertTrue("constr with var_args so it should not be empty",!m.isEmpty());assertEquals("constr with var_args",1,m.get("a"));m=new goog.structs.Map("a",1,"b",2);assertTrue("constr with var_args so it should not be empty",!m.isEmpty());assertEquals("constr with var_args",1,m.get("a"));assertEquals("constr with var_args",2,m.get("b"));assertThrows("Odd number of arguments is not allowed",function(){var m=new goog.structs.Map("a",1,"b")})}function testClone(){var m=getMap(),m2=m.clone();assertTrue("clone so it should not be empty",!m2.isEmpty());assertTrue("clone so it should contain 'c' key",m2.containsKey("c"))}function testRemove(){for(var m=new goog.structs.Map,i=0;1e3>i;i++){m.set(i,"foo")}for(var i=0;1e3>i;i++){assertTrue(m.keys_.length<=2*m.getCount());m.remove(i)}assertTrue(m.isEmpty());assertEquals("",m.getKeys().join(""))}function testForEach(){var m=getMap(),s="";goog.structs.forEach(m,function(val,key,m2){assertNotUndefined(key);assertEquals(m,m2);s+=key+val});assertEquals(s,"a0b1c2d3")}function testFilter(){var m=getMap(),m2=goog.structs.filter(m,function(val,key,m3){assertNotUndefined(key);assertEquals(m,m3);return 1<val});assertEquals(stringifyMap(m2),"c2d3")}function testMap(){var m=getMap(),m2=goog.structs.map(m,function(val,key,m3){assertNotUndefined(key);assertEquals(m,m3);return val*val});assertEquals(stringifyMap(m2),"a0b1c4d9")}function testSome(){var m=getMap(),b=goog.structs.some(m,function(val,key,m2){assertNotUndefined(key);assertEquals(m,m2);return 1<val});assertTrue(b);var b=goog.structs.some(m,function(val,key,m2){assertNotUndefined(key);assertEquals(m,m2);return 100<val});assertFalse(b)}function testEvery(){var m=getMap(),b=goog.structs.every(m,function(val,key,m2){assertNotUndefined(key);assertEquals(m,m2);return 0<=val});assertTrue(b);b=goog.structs.every(m,function(val,key,m2){assertNotUndefined(key);assertEquals(m,m2);return 1<val});assertFalse(b)}function testContainsValue(){var m=getMap();assertTrue(m.containsValue(3));assertFalse(m.containsValue(4))}function testObjectProperties(){var m=new goog.structs.Map;assertEquals(m.get("toString"),void 0);assertEquals(m.get("valueOf"),void 0);assertEquals(m.get("eval"),void 0);assertEquals(m.get("toSource"),void 0);assertEquals(m.get("prototype"),void 0);assertEquals(m.get(":foo"),void 0);m.set("toString","once");m.set("valueOf","upon");m.set("eval","a");m.set("toSource","midnight");m.set("prototype","dreary");m.set("hasOwnProperty","dark");m.set(":foo","happy");assertEquals(m.get("toString"),"once");assertEquals(m.get("valueOf"),"upon");assertEquals(m.get("eval"),"a");assertEquals(m.get("toSource"),"midnight");assertEquals(m.get("prototype"),"dreary");assertEquals(m.get("hasOwnProperty"),"dark");assertEquals(m.get(":foo"),"happy");var keys=m.getKeys().join(",");assertEquals(keys,"toString,valueOf,eval,toSource,prototype,hasOwnProperty,:foo");var values=m.getValues().join(",");assertEquals(values,"once,upon,a,midnight,dreary,dark,happy")}function testDuplicateKeys(){var m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);m.set("e",5);m.set("f",6);assertEquals(6,m.getKeys().length);m.set("foo",1);assertEquals(7,m.getKeys().length);m.remove("foo");assertEquals(6,m.getKeys().length);m.set("foo",2);assertEquals(7,m.getKeys().length);m.remove("foo");m.set("foo",3);m.remove("foo");m.set("foo",4);assertEquals(7,m.getKeys().length)}function testGetKeyIterator(){var m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);m.set("e",5);var iter=m.getKeyIterator();assertEquals("Should contain the keys","abcde",goog.iter.join(iter,""));m.remove("b");m.remove("d");iter=m.getKeyIterator();assertEquals("Should not contain the removed keys","ace",goog.iter.join(iter,""))}function testGetValueIterator(){var m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);m.set("e",5);var iter=m.getValueIterator();assertEquals("Should contain the values","12345",goog.iter.join(iter,""));m.remove("b");m.remove("d");iter=m.getValueIterator();assertEquals("Should not contain the removed keys","135",goog.iter.join(iter,""))}function testDefaultIterator(){var m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);m.set("e",5);assertEquals("Should contain the values","12345",goog.iter.join(m,""));m.remove("b");m.remove("d");assertEquals("Should not contain the removed keys","135",goog.iter.join(m,""))}function testMutatedIterator(){var message="The map has changed since the iterator was created",m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);var iter=m.getValueIterator();m.set("e",5);var ex=assertThrows("Expected an exception since the map has changed",function(){iter.next()});assertEquals(message,ex.message);m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);iter=m.getValueIterator();m.remove("d");var ex=assertThrows("Expected an exception since the map has changed",function(){iter.next()});assertEquals(message,ex.message);m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);iter=m.getValueIterator();m.set("d",5);iter.next();iter.next()}function testTranspose(){var m=new goog.structs.Map;m.set("a",1);m.set("b",2);m.set("c",3);m.set("d",4);m.set("e",5);var transposed=m.transpose();assertEquals("Should contain the keys","abcde",goog.iter.join(transposed,""))}function testToObject(){Object.prototype.b=0;try{var map=new goog.structs.Map;map.set("a",0);var obj=map.toObject();assertTrue("object representation has key \"a\"",obj.hasOwnProperty("a"));assertFalse("object representation does not have key \"b\"",obj.hasOwnProperty("b"));assertEquals("value for key \"a\"",0,obj.a)}finally{delete Object.prototype.b}}function testEqualsWithSameObject(){var map1=getMap();assertTrue("maps are the same object",map1.equals(map1))}function testEqualsWithDifferentSizeMaps(){var map1=getMap(),map2=new goog.structs.Map;assertFalse("maps are different sizes",map1.equals(map2))}function testEqualsWithDefaultEqualityFn(){var map1=new goog.structs.Map,map2=new goog.structs.Map;assertTrue("maps are both empty",map1.equals(map2));map1=getMap();map2=getMap();assertTrue("maps are the same",map1.equals(map2));map2.set("d","3");assertFalse("maps have 3 and '3'",map1.equals(map2))}function testEqualsWithCustomEqualityFn(){var map1=new goog.structs.Map,map2=new goog.structs.Map;map1.set("a",0);map1.set("b",1);map2.set("a","0");map2.set("b","1");var equalsFn=function(a,b){return a==b};assertTrue("maps are equal with ==",map1.equals(map2,equalsFn))}