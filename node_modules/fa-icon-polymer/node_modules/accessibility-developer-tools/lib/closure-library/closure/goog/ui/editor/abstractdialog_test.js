goog.provide("goog.ui.editor.AbstractDialogTest");goog.setTestOnly("goog.ui.editor.AbstractDialogTest");goog.require("goog.dom");goog.require("goog.dom.DomHelper");goog.require("goog.dom.TagName");goog.require("goog.dom.classlist");goog.require("goog.events.Event");goog.require("goog.events.EventHandler");goog.require("goog.events.KeyCodes");goog.require("goog.testing.MockControl");goog.require("goog.testing.events");goog.require("goog.testing.jsunit");goog.require("goog.testing.mockmatchers.ArgumentMatcher");goog.require("goog.ui.editor.AbstractDialog");goog.require("goog.userAgent");function shouldRunTests(){return!(goog.userAgent.IE&&goog.userAgent.isVersionOrHigher("7"))}var dialog,builder,mockCtrl,mockAfterHideHandler,mockOkHandler,mockCancelHandler,mockCustomButtonHandler,CUSTOM_EVENT="customEvent",CUSTOM_BUTTON_ID="customButton";function setUp(){mockCtrl=new goog.testing.MockControl;mockAfterHideHandler=mockCtrl.createLooseMock(goog.events.EventHandler);mockOkHandler=mockCtrl.createLooseMock(goog.events.EventHandler);mockCancelHandler=mockCtrl.createLooseMock(goog.events.EventHandler);mockCustomButtonHandler=mockCtrl.createLooseMock(goog.events.EventHandler)}function tearDown(){if(dialog){mockAfterHideHandler.$setIgnoreUnexpectedCalls(!0);dialog.dispose()}}function expectAfterHide(){mockAfterHideHandler.handleEvent(new goog.testing.mockmatchers.ArgumentMatcher(function(arg){return arg.type==goog.ui.editor.AbstractDialog.EventType.AFTER_HIDE}))}function expectOk(){mockOkHandler.handleEvent(new goog.testing.mockmatchers.ArgumentMatcher(function(arg){return arg.type==goog.ui.editor.AbstractDialog.EventType.OK}))}function expectOkPreventDefault(){expectOk();mockOkHandler.$does(function(e){e.preventDefault()})}function expectOkReturnFalse(){expectOk();mockOkHandler.$returns(!1)}function expectCancel(){mockCancelHandler.handleEvent(new goog.testing.mockmatchers.ArgumentMatcher(function(arg){return arg.type==goog.ui.editor.AbstractDialog.EventType.CANCEL}))}function expectCustomButton(){mockCustomButtonHandler.handleEvent(new goog.testing.mockmatchers.ArgumentMatcher(function(arg){return arg.type==CUSTOM_EVENT}))}function createTestDialog(){var dialog=new goog.ui.editor.AbstractDialog(new goog.dom.DomHelper());builder=new goog.ui.editor.AbstractDialog.Builder(dialog);dialog.createDialogControl=function(){return builder.build()};dialog.createOkEvent=function(e){return new goog.events.Event(goog.ui.editor.AbstractDialog.EventType.OK)};dialog.addEventListener(goog.ui.editor.AbstractDialog.EventType.AFTER_HIDE,mockAfterHideHandler);dialog.addEventListener(goog.ui.editor.AbstractDialog.EventType.OK,mockOkHandler);dialog.addEventListener(goog.ui.editor.AbstractDialog.EventType.CANCEL,mockCancelHandler);dialog.addEventListener(CUSTOM_EVENT,mockCustomButtonHandler);return dialog}function assertOpen(msg,dialog){assertTrue(msg+" [AbstractDialog.isOpen()]",dialog&&dialog.isOpen())}function assertNotOpen(msg,dialog){assertFalse(msg+" [AbstractDialog.isOpen()]",dialog&&dialog.isOpen())}function testCreateAndHide(){dialog=createTestDialog();mockCtrl.$replayAll();assertNotOpen("Dialog should not be open after creation",dialog);dialog.hide();assertNotOpen("Dialog should not be open after hide()",dialog);mockCtrl.$verifyAll()}function testShowAndHide(){dialog=createTestDialog();expectAfterHide(dialog);mockCtrl.$replayAll();assertNotOpen("Dialog should not be open before show()",dialog);dialog.show();assertOpen("Dialog should be open after show()",dialog);dialog.hide();assertNotOpen("Dialog should not be open after hide()",dialog);mockCtrl.$verifyAll()}function testShowAndDispose(){dialog=createTestDialog();expectAfterHide(dialog);mockCtrl.$replayAll();assertNotOpen("Dialog should not be open before show()",dialog);dialog.show();assertOpen("Dialog should be open after show()",dialog);dialog.dispose();assertNotOpen("Dialog should not be open after dispose()",dialog);mockCtrl.$verifyAll()}function testDisposeWithoutShow(){dialog=createTestDialog();mockCtrl.$replayAll();assertNotOpen("Dialog should not be open before dispose()",dialog);dialog.dispose();assertNotOpen("Dialog should not be open after dispose()",dialog);mockCtrl.$verifyAll()}function testBasicLayout(){dialog=createTestDialog();mockCtrl.$replayAll();var content=goog.dom.createDom(goog.dom.TagName.DIV,null,"The Content");builder.setTitle("The Title").setContent(content).addOkButton("The OK Button").addCancelButton().addButton("The Apply Button",goog.nullFunction).addClassName("myClassName");dialog.show();var dialogElem=dialog.dialogInternal_.getElement(),html=dialogElem.innerHTML;assertContains("Dialog html should contain title",">The Title<",html);assertContains("Dialog html should contain content",">The Content<",html);assertContains("Dialog html should contain custom OK button label",">The OK Button<",html);assertContains("Dialog html should contain default Cancel button label",">Cancel<",html);assertContains("Dialog html should contain custom button label",">The Apply Button<",html);assertTrue("Dialog should have default Closure class",goog.dom.classlist.contains(dialogElem,"modal-dialog"));assertTrue("Dialog should have our custom class",goog.dom.classlist.contains(dialogElem,"myClassName"));mockCtrl.$verifyAll()}function testOk(){dialog=createTestDialog();expectOk(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();dialog.show();goog.testing.events.fireClickSequence(dialog.getOkButtonElement());assertNotOpen("Dialog should not be open after clicking OK",dialog);mockCtrl.$verifyAll()}function testEnter(){dialog=createTestDialog();expectOk(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();dialog.show();goog.testing.events.fireKeySequence(dialog.dialogInternal_.getElement(),goog.events.KeyCodes.ENTER);assertNotOpen("Dialog should not be open after hitting enter",dialog);mockCtrl.$verifyAll()}function testCancel(){dialog=createTestDialog();expectCancel(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();builder.addCancelButton("My Cancel Button");dialog.show();goog.testing.events.fireClickSequence(dialog.getCancelButtonElement());assertNotOpen("Dialog should not be open after clicking Cancel",dialog);mockCtrl.$verifyAll()}function testEscape(){dialog=createTestDialog();expectCancel(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();dialog.show();goog.testing.events.fireKeySequence(dialog.dialogInternal_.getElement(),goog.events.KeyCodes.ESC);assertNotOpen("Dialog should not be open after hitting escape",dialog);mockCtrl.$verifyAll()}function testCustomButton(){dialog=createTestDialog();expectCustomButton(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();builder.addButton("My Custom Button",function(){dialog.dispatchEvent(CUSTOM_EVENT)},CUSTOM_BUTTON_ID);dialog.show();goog.testing.events.fireClickSequence(dialog.getButtonElement(CUSTOM_BUTTON_ID));assertNotOpen("Dialog should not be open after clicking custom button",dialog);mockCtrl.$verifyAll()}function testOkPreventDefault(){dialog=createTestDialog();expectOkPreventDefault(dialog);mockCtrl.$replayAll();dialog.show();goog.testing.events.fireClickSequence(dialog.getOkButtonElement());assertOpen("Dialog should not be closed because preventDefault was called",dialog);mockCtrl.$verifyAll()}function testOkReturnFalse(){dialog=createTestDialog();expectOkReturnFalse(dialog);mockCtrl.$replayAll();dialog.show();goog.testing.events.fireClickSequence(dialog.getOkButtonElement());assertOpen("Dialog should not be closed because handler returned false",dialog);mockCtrl.$verifyAll()}function testCreateOkEventFail(){dialog=createTestDialog();dialog.createOkEvent=function(){return null};mockCtrl.$replayAll();dialog.show();goog.testing.events.fireClickSequence(dialog.getOkButtonElement());assertOpen("Dialog should not be closed because OK event creation failed",dialog);mockCtrl.$verifyAll()}function testProcessOkAndClose(){dialog=createTestDialog();expectOk(dialog);expectAfterHide(dialog);mockCtrl.$replayAll();dialog.show();dialog.processOkAndClose();assertNotOpen("Dialog should not be open after processOkAndClose()",dialog);mockCtrl.$verifyAll()}function testProcessOkAndClosePreventDefault(){dialog=createTestDialog();expectOkPreventDefault(dialog);mockCtrl.$replayAll();dialog.show();dialog.processOkAndClose();assertOpen("Dialog should not be closed because preventDefault was called",dialog);mockCtrl.$verifyAll()}