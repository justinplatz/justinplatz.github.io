goog.provide("goog.labs.net.webChannel.webChannelBaseTest");goog.require("goog.Timer");goog.require("goog.array");goog.require("goog.dom");goog.require("goog.functions");goog.require("goog.json");goog.require("goog.labs.net.webChannel.ChannelRequest");goog.require("goog.labs.net.webChannel.ForwardChannelRequestPool");goog.require("goog.labs.net.webChannel.WebChannelBase");goog.require("goog.labs.net.webChannel.WebChannelBaseTransport");goog.require("goog.labs.net.webChannel.WebChannelDebug");goog.require("goog.labs.net.webChannel.Wire");goog.require("goog.labs.net.webChannel.netUtils");goog.require("goog.labs.net.webChannel.requestStats");goog.require("goog.labs.net.webChannel.requestStats.Stat");goog.require("goog.structs.Map");goog.require("goog.testing.MockClock");goog.require("goog.testing.PropertyReplacer");goog.require("goog.testing.asserts");goog.require("goog.testing.jsunit");goog.setTestOnly("goog.labs.net.webChannel.webChannelBaseTest");var RETRY_TIME=1e3,ALL_DAY_MS=24*(60*(60*1e3)),stubs=new goog.testing.PropertyReplacer,channel,deliveredMaps,handler,mockClock,gotError,numStatEvents,lastStatEvent,numTimingEvents,lastPostSize,lastPostRtt,lastPostRetryCount,debug=!1,debugMessage="";function debugToWindow(message){if(debug){debugMessage+=message+"<br>";goog.dom.getElement("debug").innerHTML=debugMessage}}function stubNetUtils(){stubs.set(goog.labs.net.webChannel.netUtils,"testLoadImage",function(url,timeout,callback){goog.Timer.callOnce(goog.partial(callback,!1),timeout)})}function stubSpdyCheck(spdyEnabled){stubs.set(goog.labs.net.webChannel.ForwardChannelRequestPool,"isSpdyEnabled_",function(){return spdyEnabled})}var MockChannelRequest=function(channel,channelDebug,opt_sessionId,opt_requestId,opt_retryId){this.channel_=channel;this.channelDebug_=channelDebug;this.sessionId_=opt_sessionId;this.requestId_=opt_requestId;this.successful_=!0;this.lastError_=null;this.lastStatusCode_=200;this.isBack=!!("rpc"==opt_requestId);this.isForward=!this.isBack};MockChannelRequest.prototype.postData_=null;MockChannelRequest.prototype.requestStartTime_=null;MockChannelRequest.prototype.setExtraHeaders=function(extraHeaders){};MockChannelRequest.prototype.setTimeout=function(timeout){};MockChannelRequest.prototype.setReadyStateChangeThrottle=function(throttle){};MockChannelRequest.prototype.xmlHttpPost=function(uri,postData,decodeChunks){this.channelDebug_.debug("---> POST: "+uri+", "+postData+", "+decodeChunks);this.postData_=postData;this.requestStartTime_=goog.now()};MockChannelRequest.prototype.xmlHttpGet=function(uri,decodeChunks,opt_noClose){this.channelDebug_.debug("<--- GET: "+uri+", "+decodeChunks+", "+opt_noClose);this.requestStartTime_=goog.now()};MockChannelRequest.prototype.sendCloseRequest=function(uri){this.requestStartTime_=goog.now()};MockChannelRequest.prototype.cancel=function(){this.successful_=!1};MockChannelRequest.prototype.getSuccess=function(){return this.successful_};MockChannelRequest.prototype.getLastError=function(){return this.lastError_};MockChannelRequest.prototype.getLastStatusCode=function(){return this.lastStatusCode_};MockChannelRequest.prototype.getSessionId=function(){return this.sessionId_};MockChannelRequest.prototype.getRequestId=function(){return this.requestId_};MockChannelRequest.prototype.getPostData=function(){return this.postData_};MockChannelRequest.prototype.getRequestStartTime=function(){return this.requestStartTime_};MockChannelRequest.prototype.getXhr=function(){return null};function shouldRunTests(){return goog.labs.net.webChannel.ChannelRequest.supportsXhrStreaming()}function setUpPage(){goog.labs.net.webChannel.ChannelRequest.createChannelRequest=function(channel,channelDebug,opt_sessionId,opt_requestId,opt_retryId){return new MockChannelRequest(channel,channelDebug,opt_sessionId,opt_requestId,opt_retryId)};goog.labs.net.webChannel.requestStats.notifyStatEvent=function(stat){numStatEvents++;lastStatEvent=stat};goog.labs.net.webChannel.requestStats.notifyTimingEvent=function(size,rtt,retries){numTimingEvents++;lastPostSize=size;lastPostRtt=rtt;lastPostRetryCount=retries}}function setUp(){numTimingEvents=0;lastPostSize=null;lastPostRtt=null;lastPostRetryCount=null;mockClock=new goog.testing.MockClock(!0);channel=new goog.labs.net.webChannel.WebChannelBase("1");gotError=!1;handler=new goog.labs.net.webChannel.WebChannelBase.Handler;handler.channelOpened=function(){};handler.channelError=function(channel,error){gotError=!0};handler.channelSuccess=function(channel,maps){deliveredMaps=goog.array.clone(maps)};handler.channelClosed=function(channel,opt_pendingMaps,opt_undeliveredMaps){if(opt_pendingMaps){handler.pendingMapsString=formatArrayOfMaps(opt_pendingMaps)}if(opt_undeliveredMaps){handler.undeliveredMapsString=formatArrayOfMaps(opt_undeliveredMaps)}};handler.channelHandleMultipleArrays=function(){};handler.channelHandleArray=function(){};channel.setHandler(handler);channel.getRetryTime_=function(retryCount){return RETRY_TIME};var channelDebug=new goog.labs.net.webChannel.WebChannelDebug;channelDebug.debug=function(message){debugToWindow(message)};channel.setChannelDebug(channelDebug);numStatEvents=0;lastStatEvent=null}function tearDown(){mockClock.dispose();stubs.reset();debugToWindow("<hr>")}function getSingleForwardRequest(){var pool=channel.forwardChannelRequestPool_;if(!pool.hasPendingRequest()){return null}return pool.request_||pool.requestPool_.getValues()[0]}function formatArrayOfMaps(arrayOfMaps){for(var result=[],i=0;i<arrayOfMaps.length;i++){for(var map=arrayOfMaps[i],keys=map.map.getKeys(),j=0,tmp;j<keys.length;j++){tmp=keys[j]+":"+map.map.get(keys[j])+(map.context?":"+map.context:"");result.push(tmp)}}return result.join(", ")}function testFormatArrayOfMaps(){var map1=new goog.structs.Map;map1.set("k1","v1");map1.set("k2","v2");var map2=new goog.structs.Map;map2.set("k3","v3");var map3=new goog.structs.Map;map3.set("k4","v4");map3.set("k5","v5");map3.set("k6","v6");var a=[new goog.labs.net.webChannel.Wire.QueuedMap(0,map1)];assertEquals("k1:v1, k2:v2",formatArrayOfMaps(a));var b=[new goog.labs.net.webChannel.Wire.QueuedMap(0,map1),new goog.labs.net.webChannel.Wire.QueuedMap(0,map2),new goog.labs.net.webChannel.Wire.QueuedMap(0,map3)];assertEquals("k1:v1, k2:v2, k3:v3, k4:v4, k5:v5, k6:v6",formatArrayOfMaps(b));var c=[new goog.labs.net.webChannel.Wire.QueuedMap(0,map1,new String("c1"))];assertEquals("k1:v1:c1, k2:v2:c1",formatArrayOfMaps(c))}function connectForwardChannel(opt_serverVersion,opt_hostPrefix,opt_uriPrefix,opt_spdyEnabled){stubSpdyCheck(!!opt_spdyEnabled);var uriPrefix=opt_uriPrefix||"";channel.connect(uriPrefix+"/test",uriPrefix+"/bind",null);mockClock.tick(0);completeTestConnection();completeForwardChannel(opt_serverVersion,opt_hostPrefix)}function connect(opt_serverVersion,opt_hostPrefix,opt_uriPrefix,opt_spdyEnabled){connectForwardChannel(opt_serverVersion,opt_hostPrefix,opt_uriPrefix,opt_spdyEnabled);completeBackChannel()}function disconnect(){channel.disconnect();mockClock.tick(0)}function completeTestConnection(){completeForwardTestConnection();completeBackTestConnection();assertEquals(goog.labs.net.webChannel.WebChannelBase.State.OPENING,channel.getState())}function completeForwardTestConnection(){channel.connectionTest_.onRequestData(channel.connectionTest_.request_,"[\"b\"]");channel.connectionTest_.onRequestComplete(channel.connectionTest_.request_);mockClock.tick(0)}function completeBackTestConnection(){channel.connectionTest_.onRequestData(channel.connectionTest_.request_,"11111");mockClock.tick(0)}function completeForwardChannel(opt_serverVersion,opt_hostPrefix){var responseData="[[0,[\"c\",\"1234567890ABCDEF\","+(opt_hostPrefix?"\""+opt_hostPrefix+"\"":"null")+(opt_serverVersion?","+opt_serverVersion:"")+"]]]";channel.onRequestData(getSingleForwardRequest(),responseData);channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function completeBackChannel(){channel.onRequestData(channel.backChannelRequest_,"[[1,[\"foo\"]]]");channel.onRequestComplete(channel.backChannelRequest_);mockClock.tick(0)}function responseDone(){channel.onRequestData(getSingleForwardRequest(),"[1,0,0]");channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function responseNoBackchannel(opt_lastArrayIdSentFromServer,opt_outstandingDataSize){var responseData=goog.json.serialize([0,opt_lastArrayIdSentFromServer,opt_outstandingDataSize]);channel.onRequestData(getSingleForwardRequest(),responseData);channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function response(lastArrayIdSentFromServer,outstandingDataSize){var responseData=goog.json.serialize([1,lastArrayIdSentFromServer,outstandingDataSize]);channel.onRequestData(getSingleForwardRequest(),responseData);channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function receive(data){channel.onRequestData(channel.backChannelRequest_,"[[1,"+data+"]]");channel.onRequestComplete(channel.backChannelRequest_);mockClock.tick(0)}function responseTimeout(){getSingleForwardRequest().lastError_=goog.labs.net.webChannel.ChannelRequest.Error.TIMEOUT;getSingleForwardRequest().successful_=!1;channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function responseRequestFailed(opt_statusCode){getSingleForwardRequest().lastError_=goog.labs.net.webChannel.ChannelRequest.Error.STATUS;getSingleForwardRequest().lastStatusCode_=opt_statusCode||503;getSingleForwardRequest().successful_=!1;channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function responseUnknownSessionId(){getSingleForwardRequest().lastError_=goog.labs.net.webChannel.ChannelRequest.Error.UNKNOWN_SESSION_ID;getSingleForwardRequest().successful_=!1;channel.onRequestComplete(getSingleForwardRequest());mockClock.tick(0)}function sendMap(key,value,opt_context){var map=new goog.structs.Map;map.set(key,value);channel.sendMap(map,opt_context);mockClock.tick(0)}function hasForwardChannel(){return!!getSingleForwardRequest()}function hasBackChannel(){return!!channel.backChannelRequest_}function hasDeadBackChannelTimer(){return goog.isDefAndNotNull(channel.deadBackChannelTimerId_)}function assertHasForwardChannel(){assertTrue("Forward channel missing.",hasForwardChannel())}function assertHasBackChannel(){assertTrue("Back channel missing.",hasBackChannel())}function testConnect(){connect();assertEquals(goog.labs.net.webChannel.WebChannelBase.State.OPENED,channel.getState());assertEquals(goog.labs.net.webChannel.Wire.LATEST_CHANNEL_VERSION,channel.channelVersion_);assertFalse(channel.isBuffered())}function testConnect_backChannelEstablished(){connect();assertHasBackChannel()}function testConnect_withServerHostPrefix(){connect(void 0,"serverHostPrefix");assertEquals("serverHostPrefix",channel.hostPrefix_)}function testConnect_withClientHostPrefix(){handler.correctHostPrefix=function(hostPrefix){return"clientHostPrefix"};connect();assertEquals("clientHostPrefix",channel.hostPrefix_)}function testConnect_overrideServerHostPrefix(){handler.correctHostPrefix=function(hostPrefix){return"clientHostPrefix"};connect(void 0,"serverHostPrefix");assertEquals("clientHostPrefix",channel.hostPrefix_)}function testConnect_withServerVersion(){connect(8);assertEquals(8,channel.channelVersion_)}function testConnect_notOkToMakeRequestForTest(){handler.okToMakeRequest=goog.functions.constant(goog.labs.net.webChannel.WebChannelBase.Error.NETWORK);channel.connect("/test","/bind",null);mockClock.tick(0);assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState())}function testConnect_notOkToMakeRequestForBind(){channel.connect("/test","/bind",null);mockClock.tick(0);completeTestConnection();handler.okToMakeRequest=goog.functions.constant(goog.labs.net.webChannel.WebChannelBase.Error.NETWORK);completeForwardChannel();assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState())}function testSendMap(){connect();sendMapOnce()}function testSendMapWithSpdyEnabled(){connect(void 0,void 0,void 0,!0);sendMapOnce()}function sendMapOnce(){assertEquals(1,numTimingEvents);sendMap("foo","bar");responseDone();assertEquals(2,numTimingEvents);assertEquals("foo:bar",formatArrayOfMaps(deliveredMaps))}function testSendMap_twice(){connect();sendMapTwice()}function testSendMap_twiceWithSpdyEnabled(){connect(void 0,void 0,void 0,!0);sendMapTwice()}function sendMapTwice(){sendMap("foo1","bar1");responseDone();assertEquals("foo1:bar1",formatArrayOfMaps(deliveredMaps));sendMap("foo2","bar2");responseDone();assertEquals("foo2:bar2",formatArrayOfMaps(deliveredMaps))}function testSendMap_andReceive(){connect();sendMap("foo","bar");responseDone();receive("[\"the server reply\"]")}function testReceive(){connect();receive("[\"message from server\"]");assertHasBackChannel()}function testReceive_twice(){connect();receive("[\"message one from server\"]");receive("[\"message two from server\"]");assertHasBackChannel()}function testReceive_andSendMap(){connect();receive("[\"the server reply\"]");sendMap("foo","bar");responseDone();assertHasBackChannel()}function testBackChannelRemainsEstablished_afterSingleSendMap(){connect();sendMap("foo","bar");responseDone();receive("[\"ack\"]");assertHasBackChannel()}function testBackChannelRemainsEstablished_afterDoubleSendMap(){connect();sendMap("foo1","bar1");sendMap("foo2","bar2");responseDone();receive("[\"ack\"]");assertHasBackChannel()}function testTimingEvent(){connect();assertEquals(1,numTimingEvents);sendMap("","");assertEquals(1,numTimingEvents);mockClock.tick(20);var expSize=getSingleForwardRequest().getPostData().length;responseDone();assertEquals(2,numTimingEvents);assertEquals(expSize,lastPostSize);assertEquals(20,lastPostRtt);assertEquals(0,lastPostRetryCount);sendMap("abcdefg","123456");expSize=getSingleForwardRequest().getPostData().length;responseTimeout();assertEquals(2,numTimingEvents);mockClock.tick(RETRY_TIME+1);responseDone();assertEquals(3,numTimingEvents);assertEquals(expSize,lastPostSize);assertEquals(1,lastPostRetryCount);assertEquals(1,lastPostRtt)}function testSetFailFastWhileWaitingForRetry(){stubNetUtils();connect();setFailFastWhileWaitingForRetry()}function testSetFailFastWhileWaitingForRetryWithSpdyEnabled(){stubNetUtils();connect(void 0,void 0,void 0,!0);setFailFastWhileWaitingForRetry()}function setFailFastWhileWaitingForRetry(){assertEquals(1,numTimingEvents);sendMap("foo","bar");assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);responseTimeout();assertNotNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);mockClock.tick(RETRY_TIME-1);assertNotNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);channel.setFailFast(!0);assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);assertTrue(gotError);assertEquals(0,deliveredMaps.length);gotError=!1;mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertTrue("No error after network ping timed out.",gotError);mockClock.tick(ALL_DAY_MS);assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);assertEquals(1,numTimingEvents)}function testSetFailFastWhileRetryXhrIsInFlight(){stubNetUtils();connect();setFailFastWhileRetryXhrIsInFlight()}function testSetFailFastWhileRetryXhrIsInFlightWithSpdyEnabled(){stubNetUtils();connect(void 0,void 0,void 0,!0);setFailFastWhileRetryXhrIsInFlight()}function setFailFastWhileRetryXhrIsInFlight(){assertEquals(1,numTimingEvents);sendMap("foo","bar");assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);responseTimeout();assertNotNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);mockClock.tick(RETRY_TIME);assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(1,channel.forwardChannelRetryCount_);responseTimeout();assertNotNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(2,channel.forwardChannelRetryCount_);mockClock.tick(RETRY_TIME);assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(2,channel.forwardChannelRetryCount_);channel.setFailFast(!0);assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(2,channel.forwardChannelRetryCount_);assertTrue(gotError);gotError=!1;mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertTrue("No error after network ping timed out.",gotError);mockClock.tick(ALL_DAY_MS);assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(2,channel.forwardChannelRetryCount_);assertEquals(1,numTimingEvents)}function testSetFailFastAtRetryCount(){stubNetUtils();connect();assertEquals(1,numTimingEvents);sendMap("foo","bar");assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);channel.setFailFast(!0);assertNull(channel.forwardChannelTimerId_);assertNotNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);responseTimeout();assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);assertTrue(gotError);gotError=!1;mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertTrue("No error after network ping timed out.",gotError);mockClock.tick(ALL_DAY_MS);assertNull(channel.forwardChannelTimerId_);assertNull(getSingleForwardRequest());assertEquals(0,channel.forwardChannelRetryCount_);assertEquals(1,numTimingEvents)}function testRequestFailedClosesChannel(){stubNetUtils();connect();requestFailedClosesChannel()}function testRequestFailedClosesChannelWithSpdyEnabled(){stubNetUtils();connect(void 0,void 0,void 0,!0);requestFailedClosesChannel()}function requestFailedClosesChannel(){assertEquals(1,numTimingEvents);sendMap("foo","bar");responseRequestFailed();assertEquals("Should be closed immediately after request failed.",goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState());mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertEquals("Should remain closed after the ping timeout.",goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState());assertEquals(1,numTimingEvents)}function testStatEventReportedOnlyOnce(){stubNetUtils();connect();sendMap("foo","bar");numStatEvents=0;lastStatEvent=null;responseUnknownSessionId();assertEquals(1,numStatEvents);assertEquals(goog.labs.net.webChannel.requestStats.Stat.ERROR_OTHER,lastStatEvent);numStatEvents=0;mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertEquals("No new stat events should be reported.",0,numStatEvents)}function testStatEventReportedOnlyOnce_onNetworkUp(){stubNetUtils();connect();sendMap("foo","bar");numStatEvents=0;lastStatEvent=null;responseRequestFailed();assertEquals("No stat event should be reported before we know the reason.",0,numStatEvents);mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertEquals(1,numStatEvents);assertEquals(goog.labs.net.webChannel.requestStats.Stat.ERROR_NETWORK,lastStatEvent)}function testStatEventReportedOnlyOnce_onNetworkDown(){stubNetUtils();connect();sendMap("foo","bar");numStatEvents=0;lastStatEvent=null;responseRequestFailed();assertEquals("No stat event should be reported before we know the reason.",0,numStatEvents);mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT/2);channel.testNetworkCallback_(!0);assertEquals(1,numStatEvents);assertEquals(goog.labs.net.webChannel.requestStats.Stat.ERROR_OTHER,lastStatEvent)}function testOutgoingMapsAwaitsResponse(){connect();outgoingMapsAwaitsResponse()}function testOutgoingMapsAwaitsResponseWithSpdyEnabled(){connect(void 0,void 0,void 0,!0);outgoingMapsAwaitsResponse()}function outgoingMapsAwaitsResponse(){assertEquals(0,channel.outgoingMaps_.length);sendMap("foo1","bar");assertEquals(0,channel.outgoingMaps_.length);sendMap("foo2","bar");assertEquals(1,channel.outgoingMaps_.length);sendMap("foo3","bar");assertEquals(2,channel.outgoingMaps_.length);sendMap("foo4","bar");assertEquals(3,channel.outgoingMaps_.length);responseDone();assertEquals(0,channel.outgoingMaps_.length)}function testUndeliveredMaps_doesNotNotifyWhenSuccessful(){handler.channelClosed=function(channel,opt_pendingMaps,opt_undeliveredMaps){if(opt_pendingMaps||opt_undeliveredMaps){fail("No pending or undelivered maps should be reported.")}};connect();sendMap("foo1","bar1");responseDone();sendMap("foo2","bar2");responseDone();disconnect()}function testUndeliveredMaps_doesNotNotifyIfNothingWasSent(){handler.channelClosed=function(channel,opt_pendingMaps,opt_undeliveredMaps){if(opt_pendingMaps||opt_undeliveredMaps){fail("No pending or undelivered maps should be reported.")}};connect();mockClock.tick(ALL_DAY_MS);disconnect()}function testUndeliveredMaps_clearsPendingMapsAfterNotifying(){connect();sendMap("foo1","bar1");sendMap("foo2","bar2");sendMap("foo3","bar3");assertEquals(1,channel.pendingMaps_.length);assertEquals(2,channel.outgoingMaps_.length);disconnect();assertEquals(0,channel.pendingMaps_.length);assertEquals(0,channel.outgoingMaps_.length)}function testUndeliveredMaps_notifiesWithContext(){connect();sendMap("foo1","bar1","context1");responseDone();sendMap("foo2","bar2","context2");responseDone();sendMap("foo3","bar3","context3");sendMap("foo4","bar4","context4");sendMap("foo5","bar5","context5");disconnect();assertEquals("foo3:bar3:context3",handler.pendingMapsString);assertEquals("foo4:bar4:context4, foo5:bar5:context5",handler.undeliveredMapsString)}function testUndeliveredMaps_serviceUnavailable(){connect();sendMap("foo1","bar1");responseDone();sendMap("foo2","bar2");responseRequestFailed();disconnect();assertEquals("foo2:bar2",handler.pendingMapsString);assertEquals("",handler.undeliveredMapsString)}function testUndeliveredMaps_onPingTimeout(){stubNetUtils();connect();sendMap("foo1","bar1");responseRequestFailed();mockClock.tick(goog.labs.net.webChannel.netUtils.NETWORK_TIMEOUT);assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState());assertEquals("foo1:bar1",handler.pendingMapsString);assertEquals("",handler.undeliveredMapsString)}function testResponseNoBackchannelPostNotBeforeBackchannel(){connect(8);sendMap("foo1","bar1");mockClock.tick(10);assertFalse(channel.backChannelRequest_.getRequestStartTime()<getSingleForwardRequest().getRequestStartTime());responseNoBackchannel();assertNotEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_MISSING,lastStatEvent)}function testResponseNoBackchannel(){connect(8);sendMap("foo1","bar1");response(-1,0);mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE+1);sendMap("foo2","bar2");assertTrue(channel.backChannelRequest_.getRequestStartTime()+goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE<getSingleForwardRequest().getRequestStartTime());responseNoBackchannel();assertEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_MISSING,lastStatEvent)}function testResponseNoBackchannelWithNoBackchannel(){connect(8);sendMap("foo1","bar1");assertNull(channel.backChannelTimerId_);channel.backChannelRequest_.cancel();channel.backChannelRequest_=null;responseNoBackchannel();assertEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_MISSING,lastStatEvent)}function testResponseNoBackchannelWithStartTimer(){connect(8);sendMap("foo1","bar1");channel.backChannelRequest_.cancel();channel.backChannelRequest_=null;channel.backChannelTimerId_=123;responseNoBackchannel();assertNotEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_MISSING,lastStatEvent)}function testResponseWithNoArraySent(){connect(8);sendMap("foo1","bar1");response(-1,0);assertEquals(1,channel.lastArrayId_);assertEquals(-1,channel.lastPostResponseArrayId_)}function testResponseWithArraysMissing(){connect(8);sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,111);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);mockClock.tick(2*goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent)}function testMultipleResponsesWithArraysMissing(){connect(8);sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,111);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);sendMap("foo2","bar2");mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);response(8,119);mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent)}function testOnlyRetryOnceBasedOnResponse(){connect(8);sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,111);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);assertTrue(hasDeadBackChannelTimer());mockClock.tick(2*goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent);assertEquals(1,channel.backChannelRetryCount_);mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);sendMap("foo2","bar2");assertFalse(hasDeadBackChannelTimer());response(8,119);assertFalse(hasDeadBackChannelTimer())}function testResponseWithArraysMissingAndLiveChannel(){connect(8);sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,111);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertTrue(hasDeadBackChannelTimer());receive("[\"ack\"]");assertFalse(hasDeadBackChannelTimer());mockClock.tick(goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertNotEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent)}function testResponseWithBigOutstandingData(){connect(8);sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,5e4);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);assertFalse(hasDeadBackChannelTimer());mockClock.tick(2*goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertNotEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent)}function testResponseInBufferedMode(){connect(8);channel.useChunked_=!1;sendMap("foo1","bar1");assertEquals(-1,channel.lastPostResponseArrayId_);response(7,111);assertEquals(1,channel.lastArrayId_);assertEquals(7,channel.lastPostResponseArrayId_);assertFalse(hasDeadBackChannelTimer());mockClock.tick(2*goog.labs.net.webChannel.WebChannelBase.RTT_ESTIMATE);assertNotEquals(goog.labs.net.webChannel.requestStats.Stat.BACKCHANNEL_DEAD,lastStatEvent)}function testResponseWithGarbage(){connect(8);sendMap("foo1","bar1");channel.onRequestData(getSingleForwardRequest(),"garbage");assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState())}function testResponseWithGarbageInArray(){connect(8);sendMap("foo1","bar1");channel.onRequestData(getSingleForwardRequest(),"[\"garbage\"]");assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState())}function testResponseWithEvilData(){connect(8);sendMap("foo1","bar1");channel.onRequestData(getSingleForwardRequest(),"foo=<script>evil()</script>&"+"bar=<script>moreEvil()</script>");assertEquals(goog.labs.net.webChannel.WebChannelBase.State.CLOSED,channel.getState())}function testPathAbsolute(){connect(8,void 0,"/talkgadget");assertEquals(channel.backChannelUri_.getDomain(),window.location.hostname);assertEquals(channel.forwardChannelUri_.getDomain(),window.location.hostname)}function testPathRelative(){connect(8,void 0,"talkgadget");assertEquals(channel.backChannelUri_.getDomain(),window.location.hostname);assertEquals(channel.forwardChannelUri_.getDomain(),window.location.hostname)}function testPathWithHost(){connect(8,void 0,"https://example.com");assertEquals(channel.backChannelUri_.getScheme(),"https");assertEquals(channel.backChannelUri_.getDomain(),"example.com");assertEquals(channel.forwardChannelUri_.getScheme(),"https");assertEquals(channel.forwardChannelUri_.getDomain(),"example.com")}function testCreateXhrIo(){var xhr=channel.createXhrIo(null);assertFalse(xhr.getWithCredentials());assertThrows("Error connection to different host without CORS",goog.bind(channel.createXhrIo,channel,"some_host"));channel.setSupportsCrossDomainXhrs(!0);xhr=channel.createXhrIo(null);assertTrue(xhr.getWithCredentials());xhr=channel.createXhrIo("some_host");assertTrue(xhr.getWithCredentials())}function testSpdyLimitOption(){var webChannelTransport=new goog.labs.net.webChannel.WebChannelBaseTransport;stubSpdyCheck(!0);var webChannelDefault=webChannelTransport.createWebChannel("/foo");assertEquals(10,webChannelDefault.getRuntimeProperties().getConcurrentRequestLimit());assertTrue(webChannelDefault.getRuntimeProperties().isSpdyEnabled());var options={concurrentRequestLimit:100};stubSpdyCheck(!1);var webChannelDisabled=webChannelTransport.createWebChannel("/foo",options);assertEquals(1,webChannelDisabled.getRuntimeProperties().getConcurrentRequestLimit());assertFalse(webChannelDisabled.getRuntimeProperties().isSpdyEnabled());stubSpdyCheck(!0);var webChannelEnabled=webChannelTransport.createWebChannel("/foo",options);assertEquals(100,webChannelEnabled.getRuntimeProperties().getConcurrentRequestLimit());assertTrue(webChannelEnabled.getRuntimeProperties().isSpdyEnabled())}