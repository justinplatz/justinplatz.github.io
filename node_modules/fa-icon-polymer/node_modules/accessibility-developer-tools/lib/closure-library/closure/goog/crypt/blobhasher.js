goog.provide("goog.crypt.BlobHasher");goog.provide("goog.crypt.BlobHasher.EventType");goog.require("goog.asserts");goog.require("goog.events.EventTarget");goog.require("goog.fs");goog.require("goog.log");goog.crypt.BlobHasher=function(hashFn,opt_blockSize){goog.crypt.BlobHasher.base(this,"constructor");this.hashFn_=hashFn;this.blob_=null;this.hashVal_=null;this.bytesProcessed_=0;this.hashingLimit_=1/0;this.blockSize_=opt_blockSize||5e6;this.fileReader_=null;this.logger_=goog.log.getLogger("goog.crypt.BlobHasher")};goog.inherits(goog.crypt.BlobHasher,goog.events.EventTarget);goog.crypt.BlobHasher.EventType={STARTED:"started",PROGRESS:"progress",THROTTLED:"throttled",COMPLETE:"complete",ABORT:"abort",ERROR:"error"};goog.crypt.BlobHasher.prototype.hash=function(blob){this.abort();this.hashFn_.reset();this.blob_=blob;this.hashVal_=null;this.bytesProcessed_=0;this.dispatchEvent(goog.crypt.BlobHasher.EventType.STARTED);this.processNextBlock_()};goog.crypt.BlobHasher.prototype.setHashingLimit=function(byteOffset){goog.asserts.assert(0<=byteOffset,"Hashing limit must be non-negative.");this.hashingLimit_=byteOffset;if(this.blob_&&!this.fileReader_){this.processNextBlock_()}};goog.crypt.BlobHasher.prototype.abort=function(){if(this.fileReader_){this.fileReader_.abort();this.fileReader_=null}if(this.blob_){this.blob_=null;this.dispatchEvent(goog.crypt.BlobHasher.EventType.ABORT)}};goog.crypt.BlobHasher.prototype.getBytesProcessed=function(){return this.bytesProcessed_};goog.crypt.BlobHasher.prototype.getHash=function(){return this.hashVal_};goog.crypt.BlobHasher.prototype.processNextBlock_=function(){var _Mathmin=Math.min;goog.asserts.assert(this.blob_,"A hash computation must be in progress.");if(this.bytesProcessed_<this.blob_.size){if(this.hashingLimit_<=this.bytesProcessed_){this.dispatchEvent(goog.crypt.BlobHasher.EventType.THROTTLED);return}this.fileReader_=new FileReader;this.fileReader_.onload=goog.bind(this.onLoad_,this);this.fileReader_.onerror=goog.bind(this.onError_,this);var endOffset=_Mathmin(this.hashingLimit_,this.blob_.size),size=_Mathmin(endOffset-this.bytesProcessed_,this.blockSize_),chunk=goog.fs.sliceBlob(this.blob_,this.bytesProcessed_,this.bytesProcessed_+size);if(!chunk||chunk.size!=size){goog.log.error(this.logger_,"Failed slicing the blob");this.onError_();return}if(this.fileReader_.readAsArrayBuffer){this.fileReader_.readAsArrayBuffer(chunk)}else if(this.fileReader_.readAsBinaryString){this.fileReader_.readAsBinaryString(chunk)}else{goog.log.error(this.logger_,"Failed calling the chunk reader");this.onError_()}}else{this.hashVal_=this.hashFn_.digest();this.blob_=null;this.dispatchEvent(goog.crypt.BlobHasher.EventType.COMPLETE)}};goog.crypt.BlobHasher.prototype.onLoad_=function(){goog.log.info(this.logger_,"Successfully loaded a chunk");var array=null;if(this.fileReader_.result instanceof Array||goog.isString(this.fileReader_.result)){array=this.fileReader_.result}else if(goog.global.ArrayBuffer&&goog.global.Uint8Array&&this.fileReader_.result instanceof ArrayBuffer){array=new Uint8Array(this.fileReader_.result)}if(!array){goog.log.error(this.logger_,"Failed reading the chunk");this.onError_();return}this.hashFn_.update(array);this.bytesProcessed_+=array.length;this.fileReader_=null;this.dispatchEvent(goog.crypt.BlobHasher.EventType.PROGRESS);this.processNextBlock_()};goog.crypt.BlobHasher.prototype.onError_=function(){this.fileReader_=null;this.blob_=null;this.dispatchEvent(goog.crypt.BlobHasher.EventType.ERROR)};