goog.provide("goog.crypt.hashTester");goog.require("goog.array");goog.require("goog.crypt");goog.require("goog.dom");goog.require("goog.dom.TagName");goog.require("goog.testing.PerformanceTable");goog.require("goog.testing.PseudoRandom");goog.require("goog.testing.asserts");goog.setTestOnly("hashTester");goog.crypt.hashTester.runBasicTests=function(hash){hash.update([97,158]);var golden1=hash.digest();hash.reset();hash.update("aB");var golden2=hash.digest();assertTrue("Two different inputs resulted in a hash collision",!!goog.testing.asserts.findDifferences(golden1,golden2));hash.reset();var empty=hash.digest();assertTrue("Empty hash collided with a non-trivial one",!!goog.testing.asserts.findDifferences(golden1,empty)&&!!goog.testing.asserts.findDifferences(golden2,empty));hash.reset();hash.update([]);assertArrayEquals("Updating with an empty array did not give an empty hash",empty,hash.digest());hash.reset();hash.update("");assertArrayEquals("Updating with an empty string did not give an empty hash",empty,hash.digest());hash.reset();hash.update([97,158]);assertArrayEquals("The reset did not produce the initial state",golden1,hash.digest());hash.reset();hash.update([158,97]);assertTrue("Swapping bytes resulted in a hash collision",!!goog.testing.asserts.findDifferences(golden1,hash.digest()));hash.reset();hash.update([97,66]);assertArrayEquals("String and array inputs should give the same result",golden2,hash.digest());hash.reset();hash.update("a");hash.update([158]);assertArrayEquals("Partial updates resulted in a different hash",golden1,hash.digest());hash.reset();hash.update("aB",0);hash.update([97,158,32],2);assertArrayEquals("Updating with an explicit buffer length did not work",golden1,hash.digest())};goog.crypt.hashTester.runBlockTests=function(hash,blockBytes){for(var chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",message="",i=0;i<blockBytes-1;i++){message+=chars.charAt(i%chars.length)}hash.update(message+"123");var golden1=hash.digest();hash.reset();hash.update(message+message+"123");var golden2=hash.digest();hash.reset();hash.update(message);hash.update("123");assertArrayEquals(golden1,hash.digest());hash.reset();hash.update(message+"1");hash.update("23");assertArrayEquals(golden1,hash.digest());hash.reset();hash.update(message+"12");hash.update("3");assertArrayEquals(golden1,hash.digest());hash.reset();hash.update(goog.crypt.stringToByteArray(message+"123"));assertArrayEquals(golden1,hash.digest());hash.reset();hash.update(message);hash.update(message+"123");assertArrayEquals(golden2,hash.digest());hash.reset();hash.update(message+message+"12");hash.update("3");assertArrayEquals(golden2,hash.digest());hash.reset();hash.update(goog.crypt.stringToByteArray(message));hash.update(goog.crypt.stringToByteArray(message+"123"));assertArrayEquals(golden2,hash.digest())};goog.crypt.hashTester.runPerfTests=function(hashFactory,hashName){var body=goog.dom.getDocument().body,perfTable=goog.dom.createElement(goog.dom.TagName.DIV);goog.dom.appendChild(body,perfTable);var table=new goog.testing.PerformanceTable(perfTable);function runPerfTest(byteLength,updateCount){var label=hashName+": "+updateCount+" update(s) of "+byteLength+" bytes";function run(data,dataType){table.run(function(){for(var hash=hashFactory(),i=0;i<updateCount;i++){hash.update(data,byteLength)}var digest=hash.digest()},label+" ("+dataType+")")}var byteArray=goog.crypt.hashTester.createRandomByteArray_(byteLength),byteString=goog.crypt.hashTester.createByteString_(byteArray);run(byteArray,"byte array");run(byteString,"byte string")}var MESSAGE_LENGTH_LONG=1e7,MESSAGE_LENGTH_SHORT=10,MESSAGE_COUNT_SHORT=MESSAGE_LENGTH_LONG/MESSAGE_LENGTH_SHORT;runPerfTest(MESSAGE_LENGTH_LONG,1);runPerfTest(MESSAGE_LENGTH_SHORT,MESSAGE_COUNT_SHORT)};goog.crypt.hashTester.createRandomByteArray_=function(length){for(var random=new goog.testing.PseudoRandom(0),bytes=[],i=0,b;i<length;++i){b=Math.floor(256*random.random());bytes.push(b)}return bytes};goog.crypt.hashTester.createByteString_=function(bytes){var str="";goog.array.forEach(bytes,function(b){str+=String.fromCharCode(b)});return str};