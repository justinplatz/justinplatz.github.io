goog.provide("goog.testing.AsyncTestCaseAsyncTest");goog.setTestOnly("goog.testing.AsyncTestCaseAsyncTest");goog.require("goog.testing.AsyncTestCase");goog.require("goog.testing.jsunit");var setUpCalled=!1,curTestIsDone=!0,asyncTestCase=goog.testing.AsyncTestCase.createAndInstall(document.title);function doAsyncStuff(numAsyncCalls,name){if(0<numAsyncCalls){curTestIsDone=!1;asyncTestCase.waitForAsync("doAsyncStuff-"+name+"("+numAsyncCalls+")");window.setTimeout(function(){doAsyncStuff(numAsyncCalls-1,name)},0)}else{curTestIsDone=!0;asyncTestCase.continueTesting()}}function setUpPage(){debug("setUpPage was called.");doAsyncStuff(3,"setUpPage")}function setUp(){assertTrue(curTestIsDone);doAsyncStuff(3,"setUp")}function tearDown(){assertTrue(curTestIsDone)}function test1(){assertTrue(curTestIsDone);doAsyncStuff(1,"test1")}function test2_asyncContinueThenWait(){var activeTest=asyncTestCase.activeTest_;function async1(){asyncTestCase.continueTesting();asyncTestCase.waitForAsync("2");window.setTimeout(async2,0)}function async2(){asyncTestCase.continueTesting();assertEquals("Did not wait for inner waitForAsync",activeTest,asyncTestCase.activeTest_)}asyncTestCase.waitForAsync("1");window.setTimeout(async1,0)}function test3(){assertTrue(curTestIsDone);doAsyncStuff(2,"test3")}function tearDownPage(){debug("tearDownPage was called.");assertTrue(curTestIsDone)}var callback=function(){curTestIsDone=!0;asyncTestCase.signal()},doAsyncSignals=function(){curTestIsDone=!1;window.setTimeout(callback,0)};function testSignalsReturn(){doAsyncSignals();doAsyncSignals();doAsyncSignals();asyncTestCase.waitForSignals(3)}function testSignalsMixedSyncAndAsync(){asyncTestCase.signal();doAsyncSignals();doAsyncSignals();asyncTestCase.waitForSignals(3)}function testSignalsMixedSyncAndAsyncMultipleWaits(){asyncTestCase.signal();doAsyncSignals();asyncTestCase.waitForSignals(1);doAsyncSignals();asyncTestCase.waitForSignals(2)}function testSignalsCallContinueTestingBeforeFinishing(){doAsyncSignals();asyncTestCase.waitForSignals(2);window.setTimeout(function(){var thrown=assertThrows(function(){asyncTestCase.continueTesting()});assertEquals("Still waiting for 1 signals.",thrown.message)},0);doAsyncSignals()}