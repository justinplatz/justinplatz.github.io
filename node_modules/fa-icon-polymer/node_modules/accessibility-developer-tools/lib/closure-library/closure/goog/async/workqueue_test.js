goog.provide("goog.async.WorkQueueTest");goog.setTestOnly("goog.async.WorkQueueTest");goog.require("goog.async.WorkQueue");goog.require("goog.testing.jsunit");var id=0,queue=null;function setUp(){queue=new goog.async.WorkQueue}function tearDown(){queue=null}function testEntriesReturnedInOrder(){var fn1=function one(){},scope1={},fn2=function two(){},scope2={};queue.add(fn1,scope1);queue.add(fn2,scope2);var item=queue.remove();assertEquals(fn1,item.fn);assertEquals(scope1,item.scope);assertNull(item.next);item=queue.remove();assertEquals(fn2,item.fn);assertEquals(scope2,item.scope);assertNull(item.next);item=queue.remove();assertNull(item)}function testReturnedItemReused(){var fn1=function(){},scope1={},fn2=function(){},scope2={};assertEquals(0,goog.async.WorkQueue.freelist_.occupants());queue.add(fn1,scope1);var item1=queue.remove();assertEquals(0,goog.async.WorkQueue.freelist_.occupants());queue.returnUnused(item1);assertEquals(1,goog.async.WorkQueue.freelist_.occupants());queue.add(fn2,scope2);assertEquals(0,goog.async.WorkQueue.freelist_.occupants());var item2=queue.remove();assertEquals(item1,item2)}function testEmptyQueueReturnNull(){var item1=queue.remove();assertNull(item1)}