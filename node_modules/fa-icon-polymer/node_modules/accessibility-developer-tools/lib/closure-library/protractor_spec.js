var Promise=require("promise"),allTests=require("./alltests"),TEST_TIMEOUT=1e3*45,TEST_SERVER="http://localhost:8080",IGNORED_TESTS=["closure/goog/ui/plaintextspellchecker_test.html","closure/goog/testing/multitestrunner_test.html","closure/goog/testing/fs/integration_test.html","closure/goog/debug/fpsdisplay_test.html","closure/goog/net/jsloader_test.html","closure/goog/net/filedownloader_test.html","closure/goog/promise/promise_test.html","closure/goog/editor/plugins/abstractdialogplugin_test.html","closure/goog/net/crossdomainrpc_test.html","closure/goog/useragent/flash_test.html"];describe("Run all Closure unit tests",function(){var removeIgnoredTests=function(tests){for(var i=0,index;i<IGNORED_TESTS.length;i++){index=tests.indexOf(IGNORED_TESTS[i]);if(-1!=index){tests.splice(index,1)}}return tests};beforeAll(function(){allTests=removeIgnoredTests(allTests)});beforeEach(function(){browser.ignoreSynchronization=!0});var waitForTestSuiteCompletion=function(testPath){var testStartTime=+new Date,waitForTest=function(resolve,reject){browser.executeScript(function(){if(window.G_testRunner&&window.G_testRunner.isFinished()){var status={isFinished:!0,isSuccess:window.G_testRunner.isSuccess(),report:window.G_testRunner.getReport()};return status}else{return{isFinished:!1}}}).then(function(status){if(status&&status.isFinished){resolve(status)}else{var currTime=+new Date;if(currTime-testStartTime>TEST_TIMEOUT){status.isSuccess=!1;status.report=testPath+" timed out after "+TEST_TIMEOUT/1e3+"s!";resolve(status)}else{setTimeout(waitForTest.bind(void 0,resolve,reject),300)}}},function(err){reject(err)})};return new Promise(function(resolve,reject){waitForTest(resolve,reject)})};it("should run all tests with 0 failures",function(done){for(var failureReports=[],runNextTest=function(testPath){return browser.navigate().to(TEST_SERVER+"/"+testPath).then(function(){return waitForTestSuiteCompletion(testPath)}).then(function(status){if(!status.isSuccess){failureReports.push(status.report)}return status})},chainNextTest=function(promise,test){return promise.then(function(){runNextTest(test)})},testPromise=null,i=0;i<allTests.length;i++){if(null!=testPromise){testPromise=chainNextTest(testPromise,allTests[i])}else{testPromise=runNextTest(allTests[i])}}testPromise.then(function(){var totalFailures=failureReports.length;if(0<totalFailures){console.error("There was "+totalFailures+" test failure(s)!");for(var i=0;i<failureReports.length;i++){console.error(failureReports[i])}}expect(failureReports.length).toBe(0);done()})})});