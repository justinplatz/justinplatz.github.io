"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class NameType{constructor(name){this.kind="name";this.name=name}*traverse(){yield this}serialize(){return this.name}}exports.NameType=NameType;class UnionType{constructor(members){this.kind="union";this.members=members}*traverse(){for(const m of this.members){yield*m.traverse()}yield this}simplify(){const flattened=[];for(const m of this.members){if("union"===m.kind){flattened.push(...m.members)}else{flattened.push(m)}}const deduped=[],names=new Set;let hasNull=!1,hasUndefined=!1;for(const m of flattened){if("name"===m.kind){if("null"===m.name){hasNull=!0}else if("undefined"===m.name){hasUndefined=!0}else if(!names.has(m.name)){deduped.push(m);names.add(m.name)}}else{deduped.push(m)}}if(hasNull){deduped.push(exports.nullType)}if(hasUndefined){deduped.push(exports.undefinedType)}this.members=deduped}serialize(){return this.members.map(member=>{let s=member.serialize();if("function"===member.kind){s="("+s+")"}return s}).join("|")}}exports.UnionType=UnionType;class ArrayType{constructor(itemType){this.kind="array";this.itemType=itemType}*traverse(){yield*this.itemType.traverse();yield this}serialize(){if("name"===this.itemType.kind){return`${this.itemType.serialize()}[]`}else{return`Array<${this.itemType.serialize()}>`}}}exports.ArrayType=ArrayType;class ParameterizedType{constructor(name,itemTypes){this.kind="parameterized";this.name=name;this.itemTypes=itemTypes}*traverse(){for(const itemType of this.itemTypes){yield*itemType.traverse()}yield this}serialize(){const types=this.itemTypes.map(t=>t.serialize());return`${this.name}<${types.join(", ")}>`}}exports.ParameterizedType=ParameterizedType;class FunctionType{constructor(params,returns){this.kind="function";this.params=params;this.returns=returns}*traverse(){for(const p of this.params){yield*p.traverse()}yield*this.returns.traverse();yield this}serialize(){const params=this.params.map(param=>param.serialize());return`(${params.join(", ")}) => ${this.returns.serialize()}`}}exports.FunctionType=FunctionType;class ConstructorType{constructor(params,returns){this.kind="constructor";this.params=params;this.returns=returns}*traverse(){for(const p of this.params){yield*p.traverse()}yield*this.returns.traverse();yield this}serialize(){const params=this.params.map(param=>param.serialize());return`{new(${params.join(", ")}): ${this.returns.serialize()}}`}}exports.ConstructorType=ConstructorType;class ParamType{constructor(data){this.kind="param";this.name=data.name;this.type=data.type||exports.anyType;this.optional=data.optional||!1;this.rest=data.rest||!1;this.description=data.description||""}*traverse(){yield*this.type.traverse();yield this}serialize(){let out="";if(this.rest){out+="..."}out+=this.name;if(this.optional){out+="?"}out+=": "+this.type.serialize();return out}}exports.ParamType=ParamType;class RecordType{constructor(fields){this.kind="record";this.fields=fields}*traverse(){for(const f of this.fields){yield*f.traverse()}yield this}serialize(){const fields=this.fields.map(field=>field.serialize());return`{${fields.join(", ")}}`}}exports.RecordType=RecordType;class IntersectionType{constructor(types){this.kind="intersection";this.types=types}*traverse(){for(const t of this.types){yield*t.traverse()}yield this}serialize(){return this.types.map(t=>t.serialize()).join(" & ")}}exports.IntersectionType=IntersectionType;class IndexableObjectType{constructor(keyType,valueType){this.kind="indexableObject";this.keyType=keyType;this.valueType=valueType}*traverse(){yield*this.keyType.traverse();yield*this.valueType.traverse();yield this}serialize(){return`{[key: ${this.keyType.serialize()}]: ${this.valueType.serialize()}}`}}exports.IndexableObjectType=IndexableObjectType;exports.anyType=new NameType("any");exports.nullType=new NameType("null");exports.undefinedType=new NameType("undefined");